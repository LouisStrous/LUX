\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename lux.info
@settitle LUX
@dircategory Programming
@direntry
* Lux: (lux).                   A scientific data processing package.
@end direntry
@setchapternewpage odd
@headings on
@c %**end of header
@c the above must appear at the start of a Texinfo file

@paragraphindent 0

@include version.texi

@tex
\centerline{LUX}
\centerline{Image Processing Package}
\vskip 1ex
\centerline{Louis Strous}
\centerline{\today}
\parindent 0pt
@end tex

@node Top, Conventions, (dir), (dir)
@comment  node-name,  next,  previous,  up
@top LUX

This text documents the LUX data processing language and program,
version @value{VERSION}, and was last updated on @value{UPDATED}.

@copyright{} 1995-2017 Louis Strous

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
copy of the license is included in the section entitled "GNU Free
Documentation License".

@menu
* Conventions::                 Font conventions used in this manual.
* Start & Stop::                Starting and stopping LUX.
* Tutorial::                    The basics step by step.
* Input/Output::                Interaction with LUX.
* Syntax::                      LUX parser syntax specification (summary).
* Expressions::                 How to specify values.
* Statements::                  How to control program flow.
* Graphics::                    How to display plots and display images
* Debugging::                   Help in finding bugs in your programs.
* Calculator Mode::             Use LUX as a regular calculator.
* Routine Groups::              Routines and functions listed by category.
* Installing LUX::              How to install LUX.
* Environment::                 Environment variables for LUX.
* History::                     The history of LUX.
* Reference Manual::            Alphabetical list of LUX routines/functions.
* gnu Free Documentation License::  The GNU Free Documentation License.
* Concept Index::               Alphabetical list of concepts.

@detailmenu
 --- The Detailed Node Listing ---

Starting and Stopping LUX.

* Command Line Arguments::      What you can add to the "lux" command
* Batch Mode::                  How to run LUX unattached to any terminal

Input/Output

* Command Input::               Typing commands at the keyboard
* Data I/O Routines::           Getting data in or out of LUX
* Formatted Input/Output::      I/O according to specific formats
* Escape Codes::                How to specify non-printable characters

Command Line Input

* Key Code Overview::

Data Input/Output Routines

* Keyboard/Screen I/O::         Data from keyboard / to screen
* Disk File I/O::               Data from/to disk files
* LUX Disk File Formats::       Disk file formats specific to LUX
* Byte Order::                  The order in which data bytes are stored
* Tape File I/O::               Data from/to tape files

LUX Disk File Formats

* LUX FZ File Format::
* LUX FITS File Format::
* LUX ASTORE File Format::

Formatted Input/Output

* Format Specifiers::
* Format Modifiers::
* Format Field Width::
* Format Precision::
* Format Grouping::
* Long output lines::
* In-Line Print Formats::
* Output Data Formats::
* Input Data Formats::

Input Data Formats

* Input Format Types::          Specifying data types for input
* Input Format Examples::       Some examples of input formats

Expressions

* Variables::                   Variables in LUX
* Data Classes::                Classes of data available in LUX
* Operators::                   Basic arithmetic and more
* Function Call::               How to use functions
* Precedence::                  Order of precedence

Variables

* Local Variables::             Variables that are local to a routine
* Global Variables::            Variables that are accessible everywhere
* Reserved Keywords::           Words that you cannot use as variable names

Data Classes

* Undefined::                   Variables without a value
* Scalars::                     A single number
* Strings::                     A string of text
* Arrays::                      A group of similar values
* File Arrays::                 Assigning an array structure to a disk file
* Associated Variables::        Assigning a record structure to a disk file
* Ranges::                      A range
* Compact Lists::               A group of dissimilar values
* Compact Pointer Lists::       A group of pointers to variables
* Lists::                       A group of dissimilar values
* Structures::
* Pointers::                    A pointer to another variable

Scalars

* Numerical Data Types::        How to enter specific numerical values
* Integer Numbers::             How to enter integer values
* Floating-Point Numbers::      How to enter fractional values
* Complex Numbers::             How to enter complex values

Arrays

* Specifying Arrays::           How to enter array values
* Combining Arrays::            How to combine arrays into bigger ones
* Referencing Arrays::          How to refer to array elements

Operators

* Unary Minus::                 How to add a minus sign to a value
* Unary Plus::                  How to add a plus sign to a value
* Binary Arithmetic::           Standard arithmetic on two values
* Binary Logic::                Logical operations on two values
* Binary Conditionals::         Logical operations with conditional evaluation
* Binary Relationals::          Determining relations between values
* Binary Bounding::             Restricting values to specific ranges
* Structure/List Element::      How to select elements from structures
* Concatenation::               How to combine elements
* Subscripts::                  How to select elements from arrays

Subscripts

* Coordinate Subscripts::       Specifying elements by coordinates
* Index Subscripts::            Specifying elements by array index
* Range Subscripts::            Specifying elements by ranges
* Lists of Subscripts::         Specifying arbitrary numbers of arguments
* Multiple Subscripts::         Specifying elements in multiple dimensions
* Fractional Subscripts::       Specifying fractional coordinates
* Expression Subscripts::       Applying subscripts to expressions is OK

Function Call

* Arguments::                   Arguments to subroutines and functions
* Recursion::                   LUX allows recursion of routines

Arguments to Functions and Subroutines

* Argument Specification::      How to specify arguments
* Empty Arguments::             How unspecified arguments are handled

Statements

* Assignment::                  Assignment statements
* IF Statement::                Select based on a condition
* CASE Statement::              Select based on a value
* NCASE Statement::             Select based on conditions
* FOR Statement::               Repeat a fixed number of times
* REPEAT Statement::            Repeat until a final condition is met
* WHILE-DO Statement::          Repeat while an initial condition is met
* DO-WHILE Statement::          Repeat while a final condition is met
* Block Statement::             Treat a group of statements as one
* Block Routine Definition::    Name a group of statements
* Block Routine Execution::     How to execute a named group of statements
* Subroutine Definition::       Define a subroutine
* Subroutine Call::             How to use a subroutine
* Extended Parameter Lists::    Arbitrary numbers of arguments
* Function Definition::         Define a function
* Jumps::                       Forced jumps to other statements
* File Inclusion::              Reading commands from a file
* Ignoring Input::              How to make LUX ignore input
* Line Breaks::                 How LUX treats line breaks

Assignment

* Straight Assignment::         Assignment to a whole variable
* Insertion::                   Assignment to some elements of a variable
* Operand-Assignment::          Modification of a variable

Insertion

* Subscript Insertion::         Inserting through subscripts
* Structure Insertion::         Inserting through structure tags

Jumps

* BREAK Statement::             Exit from the current loop
* CONTINUE Statement::          Jump to the start of the current loop
* RETURN Statement::            Return from a function or subroutine
* RETALL Statement::            Return to the main execution level
* EXIT/QUIT Statement::         Quit LUX

Graphics

* Screen Coordinates::          Coordinate systems for screen positions
* Colors::                      Colors
* Image Display::               Displaying images
* Plots and Graphs::            Displaying plots and graphs
* Widgets::                     Displaying and using widgets

Colors

* Color Ramp::                  For image display
* Incidental Colors::           For line drawings and such

Widgets

* Building Widgets::
* Managing Widgets::

Building Widgets

* Button Widgets::

Debugging

* Error Messages::              What you see if something goes wrong
* Variable Inspection::         How to check the values of variables
* System Inspection::           How to check the condition of LUX's innards
* Tracing::                     How to trace execution of your commands
* Stepping::                    How to step through execution
* Help Routines::               How to find information about routines
* Diagnostic Output::           How to record input/output to a file

Error Messages

* Parser Errors::               Parser errors
* Execution Errors::            Execution errors

Routine Groups

* Array Manipulation::          How to manipulate arrays
* Astronomy and Calendars::     Finding dates and positions of planets
* Binary Operators::            Standard operations
* Color::                       Routines dealing with color
* Complex Routines::            Routines dealing with complex numbers
* Data Compression::            How to compress data
* Data Conversion::             How to convert data to a different type
* Data Creation::               How to create data
* Debug Routines::              How to find mistakes in your code
* Events::                      How to capture mouse and keyboard events
* Information::                 How to obtain information about various things
* Data Input/Output::           Getting data in or out of LUX
* Math Routines::               Various mathematical routines
* Menus::                       How to use LUX menus
* Plots::                       How to create plots
* Postscript::                  How to send graphics to a Postscript file
* Running::                     How to run or affect LUX
* Stack::                       How to use the user stack of variables
* String Routines::             Routines dealing with text
* System::                      System information
* Topology::                    Routines dealing with topology
* Windows::                     Routines dealing with graphical screen output
* Multi-Dim Routines::          Routines that treat arbitrary dimensions

Array Creation and Manipulation

* Array Creation::              How to create arrays
* Array Data Compression::      How to compress arrays

Array Creation

* Default Arrays::              Arrays with default values
* File Array Creation::         Arrays that address disk files
* Random Arrays::               Arrays of random numbers

Astronomy and Calendars

* Astronomical Coordinate Calculations::
* Astronomical Time Scales::

Data Compression

* Data-Compressed I/O::         Input/output of compressed data

Data Conversion

* Data Mapping::                How to map data to different types
* String Conversion::           How to convert to or from text strings
* Number Conversion::           How to convert numbers to different types

Data Creation

* Array Creation::                 How to create arrays

Data Input/Output

* Disk I/O::                    Input/output with disk files
* User I/O::                    Input/output with the user
* Tape I/O::                    Input/output with tape files

Disk I/O

* Opening/Closing Files::       How to open or close a file
* Uncompressed Disk Output::    Uncompressed output to a disk file
* Uncompressed Disk Input::     Uncompressed input from a disk file

Math Routines

* Bessel Functions::            Various Bessel functions
* Complex Functions::           Functions that accept complex values
* Exponential/Logarithmic Functions::  Various exponents and logarithms
* Spectral Functions::          Spectral transforms
* Filters::                     Routines that modify values
* Fitting::                     Routines that fit curves to data
* Hyperbolic Functions::        Various hyperbolic functions
* Interpolation::               Routines that interpolate
* Matrix Math::                 Routines that deal with matrices
* Seek::                        Routines that find values
* Smoothing::                   Routines that smooth
* Sorting::                     Routines that sort values
* Statistical Functions::       Various statistical distributions
* Trigonometry::                Trigonometric functions

Reference Manual

* Packages::                    Routines/variables of varying availability
* Read-Only Globals::           Global variables that the user cannot modify
* Read-Write Global Vars::      Global variables that the user can modify
* Status Funcs::                Global variables that query the system
* Internal Routines::           Routines that are built in to LUX

Packages

* debug::
* develop::
* jpeg::
* motif::
* regex_h::
* sofa::
* tape::
* x11::

Read-Only Global Variables

* #0::                          Zero
* #1::                          One
* #2pi::                        Two pi
* #42::                         The answer to Life, Universe, and Everything
* #c::                          Speed of light (cgs)
* #class::                      LUX classes structure
* #col::                        Number of columns on the terminal
* #coordsys::                   LUX coordinate systems structure
* #deg::                        Degrees to radians
* #d.r::                        Degrees to radians
* #e::                          Base of natural logarithm
* #ec::                         Electron charge (cgs)
* #event::                      LUX events structure
* #filetype::                   Data file types
* #g::                          Gravitational constant (cgs)
* #h::                          Planck constant (cgs)
* #hb::                         Planck constant divided by pi (cgs)
* #i::                          Imaginary unit
* #infty::                      Infinity
* #k::                          Boltzmann constant (cgs)
* #m::                          Electron mass (cgs)
* #max_args::                   Maximum number of arguments
* #max_byte::                   Greatest value possible in a BYTE
* #max_dims::                   Maximum allowed number of array dimensions
* #max_double::                 Greatest value possible in a DOUBLE
* #max_float::                  Greatest value possible in a FLOAT
* #max_int64::
* #max_long::                   Greatest value possible in a LONG
* #max_pixmap::                 Greatest pixmap number
* #max_window::                 Greatest window number
* #max_word::                   Greatest value possible in an INT
* #min_double::                 Smallest nonzero value possible in a DOUBLE
* #min_float::                  Smallest nonzero value possible in a FLOAT
* #min_int64::
* #min_long::                   Most negative value possible in a LONG
* #min_word::                   Most negative value possible in an INT
* #minus1::                     Minus one
* #msbfirst::                   Byte order
* #pi::                         Pi
* #p3d::                        Projection matrix
* #r::                          Gas constant (cgs)
* #r.d::                        Radians to degrees
* #rad::                        Radians to degrees
* #row::                        Number of lines on the terminal
* #stack::                      User stack
* #type::                       LUX data types
* #typesize::                   Sizes of data types
* #zero::                       System zero (don't use)

Read-Write Global Variables

* !autocon::                    Automatic contour level selection
* !badmatch::                   Number of bad matched in GRIDMATCH
* !bb_update::                  Update plot bounding box
* !bc::
* !button::                     Pointer button state
* !bxb::                        Bounding box lower x
* !bxt::                        Bounding box upper x
* !byb::                        Bounding box lower y
* !byt::                        Bounding box upper y
* !col::                        Number of columns on the terminal
* !contour_border::
* !contour_box::                Draw a small box at origin of contour plot
* !contour_dash_lev::
* !contour_mode::
* !contour_nlev::               Number of counter levels
* !contour_style::
* !contour_ticks::
* !contour_tick_fac::
* !contour_tick_pen::
* !cratio::                     Plot symbol aspect ratio
* !crunch_bits::                Number of bits in last CRUNCH
* !crunch_bpp::                 Number of bits per element in last CRUNCH
* !crunch_slice::               CRUNCH tweak parameter
* !dashsize::                   Relative size of plot dashes
* !dlabx::                      Plot x axis divisions
* !dlaby::                      Plot y axis divisions
* !dot::
* !dots::
* !erase::                      Automatic window erase on PLOT
* !errno::                      Last system error number
* !error_extra::
* !eventsource::                Source window of event
* !eventtype::                  Type of event
* !fftdp::                      Double precision FFTs
* !font::                       Default font number
* !format_c::                   Output format for complex numbers
* !format_f::                   Output format for floating-point numbers
* !format_i::                   Output format for integer numbers
* !format_s::                   Output format for strings
* !fsize::                      Default font size 
* !fstepx::                     Free data increment per major x tick mark
* !fstepy::                     Free data increment per major y tick mark
* !fstepz::                     Free data increment per major z tick mark
* !fz::                         Free lower y plot bound
* !fzx::                        Free lower x plot bound
* !fzz::                        Free lower z plot bound
* !height::                     Last window height
* !histmin::                    Last histogram minimum ordinate
* !histmax::                    Last histogram maximum ordinate
* !iblank::
* !iorder::                     TV coordinate swap order
* !itmax::
* !ix::                         Last selected DEV x coordinate in window
* !ixhigh::
* !iy::                         Last selected DEV y coordinate in window
* !iyhigh::
* !kb::
* !keycode::                    Code of pressed physical key
* !keystate::                   State of modifier keys
* !keysym::                     Character code of pressed key
* !labx::                       Labels on plot x axis
* !laby::                       Labels on plot y axis
* !landscape::                  Landscape mode for PostScript file
* !lastmax::                    Last maximum value
* !lastmaxloc::                 Last maximum location
* !lastmean::                   Last mean value
* !lastmin::                    Last minimum value
* !lastminloc::                 Last minimum location
* !lastsdev::                   Last standard deviation
* !last_menu::                  Last selected menu entry
* !maxhistsize::                Histogram upper size limit
* !maxregridsize::              REGRID upper size limit
* !menu_item::                  Last selected menu item
* !meritc::                     Last merit value of displacement determination
* !motif::                      MOTIF available
* !mxb::                        Last plot x lower data value
* !mxt::                        Last plot x upper data value
* !myb::                        Last plot y lower data value
* !myt::                        Last plot y upper data value
* !mzb::                        Last plot z lower data value
* !mzt::                        Last plot z upper data value
* !narg::                       Arguments to current user-defined routine
* !noeventflush::               Do not flush events at start of XLOOP
* !pdev::                       Plot device
* !pen::                        Plot pen width
* !pltyp::                      Plot style (linear/logarithmic)
* !plxerrb::                    Plot x error bar height
* !plyerrb::                    Plot y error bar width
* !ps_file::                    PostScript output file
* !range_warn_flag::
* !read_count::
* !redim_warn_flag::
* !root_x::                     Last root window x
* !root_y::                     Last root window y
* !row::                        Number of lines on the terminal
* !rx::                         Round plot x axis range
* !ry::                         Round plot y axis range
* !scalemax::                   Image scale maximum
* !scalemin::                   Image scale minimum
* !screen_height::              Screen height
* !screen_width::               Screen width
* !sort_flag::                  Select SORT algorithm
* !startx::                     Data value of first major x tick mark
* !starty::                     Data value of first major y tick mark
* !stepx::                      Data increment per major x tick mark
* !stepy::                      Data increment per major y tick mark
* !stretchmark::
* !stretch_clip::
* !symratio::                   Plot symbol aspect ratio
* !symsize::                    Relative symbol size
* !tapemessages::
* !tickx::                      Plot x tick mark size
* !tickxr::                     Plot x secondary tick mark relative size
* !ticky::                      Plot y tick mark size
* !tickyr::                     Plot y secondary tick mark relative size
* !tvix::                       Left edge coordinate of last image
* !tvixb::                      Right edge coordinate of last image
* !tviy::                       Bottom edge coordinate of last image
* !tviyb::                      Top edge coordinate of last image
* !tvscale::                    Current magnification factor
* !tvsmt::                      Select SMOOTH algorithm
* !vdev::                       Video device
* !width::                      Current window width
* !window::                     Current window number
* !wxb::                        Plot window DEV lower x
* !wxt::                        Plot window DEV upper x
* !wyb::                        Plot window DEV lower y
* !wyt::                        Plot window DEV upper y
* !wzb::                        Plot window DEV lower z
* !wzt::                        Plot window DEV upper z
* !xb::
* !xc::                         Calligraphy current x
* !xerrors::
* !xf::                         Last selected x coordinate in window
* !xmenu::
* !xroot::                      Last selected x coordinate in root window
* !xt::
* !xtime::
* !yb::
* !yc::                         Calligraphy current y
* !yf::                         Last selected y coordinate in window
* !ymenu::
* !yroot::                      Last selected y coordinate in root window
* !yt::
* !yydebug::                    Select parser debugging
* !zoomframe::                  Current ZOOM frame
* !zoomhigh::                   Upper limit of ZOOM contrast
* !zoomlow::                    Lower limit of ZOOM contrast
* !zoommag::                    Last used magnification factor in ZOOM
* !zoomx::                      Last used center x coordinate in ZOOM
* !zoomy::                      Last used center y coordinate in ZOOM

Status Functions

* !cputime::                    CPU time used so far
* !ctime::                      Time and date string
* !date::                       Date string
* !jd::                         Current Julian Date
* !readkey::                    Read key press and echo
* !readkeyne::                  Read key press but don't echo
* !systime::                    Current time in seconds
* !time::                       Time string

Internal Functions and Subroutines

* abs::                         Absolute value
* acos::                        Arc cosine
* acosh::                       Inverse hyperbolic cosine
* alog::                        Natural logarithm
* alog10::                      Decimal logarithm
* and::                         Logical AND
* andif::                       Conditional logical AND
* area::                        Disjoint area labeling
* area2::                       Connected area labeling
* areaconnect::                 Determine area connections
* arestore::                    Restore complete variables from disk
* arg::                         Complex argument
* array::                       Create an array of arbitrary type
* asin::                        Arc sine
* asinh::                       Inverse hyperbolic sine
* assoc::                       Create an associated variable
* astore::                      Store complete variables on disk
* astrf::                       Astronomical coordinate transformations
* astron::                      Calculate planetary positions
* atan::                        Arc tangent (mod 180 degrees)
* atan2::                       Arc tangent (mod 360 degrees)
* atanh::                       Inverse hyperbolic tangent
* atol::                        Read an integer value from a string
* atomize::                     Show internal structure of a variable
* basin::                       Full-coverage image segmentation
* batch::                       Run in batch mode
* bessel_i0::                   Bessel I_0 function
* bessel_i1::                   Bessel I_1 function
* bessel_j0::                   Bessel J_0 function
* bessel_j1::                   Bessel J_1 function
* bessel_jn::                   Bessel J_n function
* bessel_k0::                   Bessel K_0 function
* bessel_k1::                   Bessel K_1 function
* bessel_kn::                   Bessel K_n function
* bessel_y0::                   Bessel Y_0 function
* bessel_y1::                   Bessel Y_1 function
* bessel_yn::                   Bessel Y_n function
* beta::                        Beta function
* bi0::                         Bessel I_0 function
* bi00::                        Frame bias vector
* bi1::                         Bessel I_1 function
* bisect::                      Calculates bisectors
* bj0::                         Bessel J_0 function
* bj1::                         Bessel J_1 function
* bjn::                         Bessel J_n function
* bk0::                         Bessel K_0 function
* bk1::                         Bessel K_1 function
* bkn::                         Bessel K_n function
* bmap::                        Convert to @code{byte} byte by byte
* bp00::                        Frame bias and precession, IAU 2000
* bp06::                        Frame bias and precession, IAU 2006
* bpn2xy::                      CIO x,y from bias-precession-nutation matrix
* breakpoint::                  Manipulate breakpoints
* bsmooth::                     Binary smoothing
* by0::                         Bessel Y_0 function
* by1::                         Bessel Y_1 function
* byn::                         Bessel Y_n function
* bytarr::                      Create a @code{byte} array
* byte::                        Convert to @code{byte} value by value
* bytfarr::                     Create a @code{byte} file array
* c::                           Calligraphy
* c2i00a::                      CIO matrix, IAU 2000A
* c2i00b::                      CIO matrix, IAU 2000B
* c2i06a::                      CIO matrix, IAU 2000A/2006
* c2ibpn::                      CIO matrix from BPN
* c2ixy::                       CIO matrix from CIP x,y
* c2ixys::                      CIO matrix from CIP x,y, CIO s
* c2s::                         Cartesian to spherical coordinates
* c2t00a::                      C2T matrix from CIP xp,yp, IAU 2000A
* c2t00b::                      C2T matrix from CIP xp,yp, IAU 2000B
* c2t06a::                      C2T matrix from CIP xp,yp, IAU 2000A/2006
* c2tcio::                      C2T matrix from C2I, ERA, POM
* c2teqx::                      C2T matrix from BPN, GST, POM
* c2tpe::                       C2T matrix from nutation and polar coordinates
* c2txy::                       C2T from CIP x,y and polar xp,yp
* cal2jd::                      Julian Day Numbers from Gregorian Calendar dates
* calculator::                  Calculator mode
* calendar::                    Calendar conversions
* callig::                      Calligraphy
* cbrt::                        Cube root
* cdblarr::                     Create a @code{cdouble} array
* cdblfarr::                    Create a @code{cdouble} file array
* cdmap::                       Convert to @code{cdouble} byte by byte
* cdouble::                     Convert to @code{cdouble} value by value
* ceil::                        Convert to @code{long} by rounding up
* cfloat::                      Convert to @code{cfloat} value by value
* cfltarr::                     Create a @code{cfloat} array
* cfltfarr::                    Create a @code{cfloat} file array
* cfmap::                       Convert to @code{cfloat} byte by byte
* chdir::                       Change directory
* checklist::                   debugging]
* checkmenu::                   Check for menu selection
* checkwindow::                 Check for window selection
* chi2::                        Chi-square function.
* classname::                   Name of data class
* close::                       Close disk file
* cluster::                     Cluster analysis
* colorcomponents::             Derive RGB values
* colorpixel::
* colorstogrey::                Get greyscale values
* compile::                     Compile a string as LUX code
* compile_file::
* complex::                     Convert to a complex data type
* compress::                    Reduce the number of elements of an array
* concat::                      Concatenate scalars and/or arrays
* conjugate::                   Complex conjugate
* constellation::               Determine the astronomical constellation
* constellationname::           Provide constellation names
* contour::                     Contour plot
* convert::                     Convert to specified data type 
* coordtrf::                    Plot/windoe coordinate conversions
* cos::                         Cosine
* cosh::                        Hyperbolic cosine
* crosscorr::                   Cross-correlation coefficient
* crunch::                      Data compression
* crunchrun::
* cspline::                     Interpolation using cubic splines
* cspline_extr::                Find extremes on cubic splines
* cspline_find::
* ctop::                        Transform from Cartesian to polar coordinates
* d::                           Dump information about an expression
* dat::                         TAI minus UTC
* date_from_tai::               Date string from a TAI time
* dblarr::                      Create a @code{double} array
* dblfarr::                     Create a @code{double} file array
* decomp::                      LU matrix decomposition
* decrunch::                    Data decompression
* default::                     Specify a default value for a variable
* defined::                     Does the variable have a defined value?
* delete::                      Delete a variable's data value
* despike::                     Treat bad pixels (spikes) in an image
* detrend::                     Remove a polynomial fit
* diagnostic::                  Write diagnostic output to a file
* differ::                      Running difference
* dilate::                      Binary image dilation operator
* dilatedir::
* dimen::                       Return a dimension of an array
* disablenewline::              Tell LUX to ignore newlines
* distarr::                     Distance array
* distr::                       Distribute data to array elements
* dmap::                        Convert to @code{double} byte by byte
* doub::                        Convert to @code{double} value by value
* double::                      Convert to @code{double} value by value
* dsmooth::                     Directional smoothing
* dsolve::                      Solve a set of linear equations
* dsum::                        Sum as @code{double}
* dtdb::                        TDB minus TT
* dump::                        Dump information about an expression
* dump_lun::                    Dump information about open files
* dump_stack::                  Dump information about the data stack
* easterdate::                  Calculate the date of Easter
* echo::                        Echo code to be compiled
* ee00::                        Equation of Equinoxes from nutation, IAU 2000
* ee00a::                       Equation of Equinoxes, IAU 2000
* ee00b::                       Equation of Equinoxes, IAU 2000B
* ee06a::                       Equation of Equinoxes, IAU 2000A/2006
* eect00::                      Equation of Equinoxes complementary terms
* eform::                       Earth reference ellipsoid
* enablenewline::               Tell LUX to resume interpreting newlines
* endian::                      Convert between little-endian and big-endian
* enhanceimage::                Enhance the intensities of an image
* eo06a::                       Equation of Origins, IAU 2000A/2006
* eors::                        Equation of Origins from bias-precession-nutation and CIO s
* epb::                         Julian Date to Besselian epoch
* epb2jd::                      Besselian epoch to Julian Date
* epj::                         Julian Date to Julian epoch
* epj2jd::                      Julian epoch to Julian Date
* epv00::                       Earth position and velocity
* eq::                          Equal-to
* eqeq94::                      Equation of Equinoxes, IAU 1994
* equivalence::                 Determine equivalence classes
* era00::                       ERA, IAU 2000
* erase::                       Erase the window contents
* erf::                         Error function
* erfc::                        Complementary error function
* erode::                       Binary image erosion operator
* erodedir::
* error::                       User-defined error with message
* esegment::                    Extreme-based data segmentation
* esmooth::                     Asymmetrical exponential smoothing
* eval::                        Evaluate a string as LUX code
* eventname::                   Name of an event
* execute::                     Execute a string as LUX code
* exit::                        Exit LUX
* exp::                         Exponential function
* expand::                      Increase the size of an image
* expm1::                       Exponential of one less than the argument
* f0h::                         Retrieve the header from an FZ file
* f0head::                      Retrieve the header from an FZ file
* f0r::                         Retrieve data from an FZ file
* f0read::                      Retrieve data from an FZ file
* f0w::                         Write data to an FZ file
* f0write::                     Write data to an FZ file
* fad03::                       Mean elongation of Moon
* fade::                        Fade between two images
* fade_init::                   Initialize a fade between two images
* fae03::                       Mean longitude of Earth
* faf03::                       Mean longitude of Moon from ascending node
* faju03::                      Mean longitude of Jupiter
* fal03::                       Mean anomaly of Moon
* falp03::                      Mean anomaly of Sun
* fama03::                      Mean longitude of Mars
* fame03::                      Mean longitude of Mercury
* fane03::                      Mean longitude of Neptune
* faom03::                      Mean longitude of Moon's ascending node
* fapa03::                      General accumulated precession in longitude
* fasa03::                      Mean longitude of Saturn
* faur03::                      Mean longitude of Uranus
* fave03::                      Mean longitude of Venus
* fcrunwrite::                  Write compressed data to an FZ file
* fcrw::                        Write compressed data to an FZ file
* fcw::                         Write compressed data to an FZ file
* fcwrite::                     Write compressed data to an FZ file
* fft::                         Discrete Fast Fourier Transform
* fftb::
* fftexpand::
* fftshift::                    Shifts data using Fourier interpolation
* fileptr::                     Manipulate a file pointer
* fileread::                    Unformatted reading from a file
* filesize::                    Size of a file
* filetofz::                    Transform a file to an FZ file
* filetype::                    Finds the type of the file
* filetypename::                Returns the name of the file type
* filewrite::                   Unformatted writing to a file
* find::                        Find the first occurrence of particular values
* findfile::                    Find a particular file
* find_max::                    Find the values of local maxima
* find_maxloc::                 Find the locations of local maxima
* find_min::                    Find the values of local minima
* find_minloc::                 Find the locations of local minima
* fit::                         Fit arbitrary function to data
* fit2::                        Fit arbitrary function to data
* fit3::
* fit3dcube::                   Ensure complete 3D plot fits on screen
* fits_header::                 Read the header of a FITS file
* fits_key::                    Get a value from a FITS file header
* fits_read::                   Read a FITS file
* fits_write::                  Write a FITS file
* fits_xread::                  Read a FITS file
* fix::                         Convert to @code{long} by truncating
* fk52h::                       FK5 J2000.0 star positions to Hipparcos
* fk5hip::                      FK5 J2000.0 rotation and spin to Hipparcos
* fk5hz::                       FK5 J2000.0 star positions to Hipparcos (zero proper motion)
* float::                       Convert to @code{float} value by value
* floor::                       Convert to @code{long} by rounding down
* fltarr::                      Create a @code{float} array
* fltfarr::                     Create a @code{float} file array
* fmap::                        Convert to @code{float} byte by byte
* format_set::                  Manipulate the formats for ASCII output
* fprint::                      Print to screen
* fprintf::                     Write to file in ASCII format
* fratio::                      F variance ratio function
* fread::                       Read from keyboard
* freadf::                      Read from file in ASCII format
* freads::                      Read from string
* fstring::                     Convert to @code{string}
* fsum::                        Sum as @code{float}
* fw2m::                        Fukushima-Williams angles to rotation matrix
* fw2xy::                       CIP x,y from Fukushima-Williams angles
* fzarr::                       Create a file array appropriate for an FZ file
* fzh::                         Retrieve the header from an FZ file
* fzhead::                      Retrieve the header from an FZ file
* fzinspect::                   Return information on an FZ file
* fzr::                         Retrieve data from an FZ file
* fzread::                      Retrieve data from an FZ file
* fzw::                         Write data to an FZ file
* fzwrite::                     Write data to an FZ file
* gamma::                       Gamma function
* gc2gd::                       Geodetic from geocentric coordinates
* gc2gde::                      Geodetic from geocentric coordinates and ellipsoid
* gcommand::                    Send a gnuplot command to gnuplot
* gcontour::                    Contour plot via gnuplot
* gd2gc::                       Geocentric from geodetic coordinates
* gd2gce::                      Geocentric from geodetic coordinates and ellipsoid
* ge::                          Greater-than-or-equal-to
* getdirectories::              Gets a list of subdirectories
* getdirects::                  Gets a list of subdirectories
* getenv::                      Get the value of an environment variable
* getfiles::                    Gets a list of files in a directory
* getfiles_r::                  Gets a list of files in/below a directory
* getmatchedfiles::             Gets files matching a regexp in a directory
* getmatchedfiles_r::           Gets files matching a regexp in/below a directory
* getmin9::                     Minimum of a fit to 3 by 3 data values
* get_lun::                     Gets an available logical unit
* gifread::                     Read a GIF file
* gifwrite::                    Write a GIF file
* gmst00::                      Greenwich mean sidereal time, IAU 2000
* gmst06::                      Greenwich mean sidereal time, IAU 2006
* gmst82::                      Greenwich mean sidereal time, IAU 1982
* goplot::                      Overplot via gnuplot
* gplot::                       Plot via gnuplot
* gplot3d::                     3D plot via gnuplot
* gridmatch::                   Determine displacements between two images
* gsmooth::                     Gaussian smoothing
* gst00a::                      Greenwich apparent sidereal time, IAU 2000
* gst00b::                      Greenwich apparent sidereal time, IAU 2000B
* gst06::                       Greenwich apparent sidereal time, IAU 2006
* gst06a::                      Greenwich apparent sidereal time, IAU 2000/2006
* gst94::                       Greenwich apparent sidereal time, IAU 1982/1994
* gt::                          Greater-than
* gtv::                         Display an image via gnuplot
* h2fk5::                       Hipparcos to FK5 J2000.0 star positions
* hairs::                       User-selected position
* help::                        Help
* hex::
* hfk5z::                       Hipparcos to FK5 J2000.0 star positions (zero proper motion)
* hilbert::                     Hilbert transform
* hist::                        Histogram
* histr::                       Normalized histogram
* ibeta::                       Incomplete beta function
* idlread::                     Read one variable from an IDL Save file
* idlrestore::                  Read all variables from an IDL Save file
* igamma::                      Incomplete gamma function
* ignore::                      Ignore LUX code up to matching RESUME
* imaginary::                   Imaginary part of a complex argument
* index::                       Determine ascending order of data
* indgen::                      Fill array with data coordinate
* info::                        Information about LUX
* inpolygon::                   Determine if points are inside a polygon
* insert::                      Insert data into an array
* int::                         Convert to @code{word} value by value
* int64::                       Convert to @code{int64} value by value
* int64arr::                    Create an @code{int64} array
* int64farr::                   Create an @code{int64} file array
* int64map::                    Convert to @code{int64} byte by byte
* intarr::                      Create a @code{word} array
* intfarr::                     Create a @code{word} file array
* ir::                          Identity 3-by-3 matrix
* isarray::                     Is the argument an array?
* isnan::                       Is the argument not a number?
* isscalar::                    Is the argument a scalar?
* isstring::                    Is the argument a string?
* ist::                         Convert to @code{string}
* istring::                     Convert to @code{string}
* jd2cal::                      Gregorian dates from Julian Day Numbers
* jpegread::                    Read from a JPEG file
* jpegwrite::                   Write as a JPEG file
* kepler::                      Solve Kepler's equation
* ksmooth::
* le::                          Less-than-or-equal-to
* legendre::                    Associated Legendre polynomials
* limits::                      Manipulate plot coordinate ranges
* list::                        List the definition of a user-defined routine
* llsq::
* lmap::                        Convert to @code{long} byte by byte
* local_max::                   The value of a local maximum
* local_maxloc::                The location of a local maximum
* local_min::                   The value of a local minimum
* local_minloc::                The location of a local minimum
* log::                         Natural logarithm
* log10::                       Decimal logarithm
* log1p::                       Natural logarithm of one plus the argument
* lonarr::                      Create a @code{long} array
* lonfarr::                     Create a @code{long} file array
* long::                        Convert to @code{long} value by value
* lowcase::                     Convert letters to lower case
* lower::                       Convert letters to lower case
* lsmooth::                     Directional spreading
* lsq::                         Least-squares fit
* lt::                          Less-than
* match::                       Match source values to target values
* max::                         Maximum
* maxdir::
* maxfilter::                   Running maximum
* maxloc::                      Location of maximum
* mdiagonal::
* mean::                        Mean value
* medfilter::                   Running median
* median::                      Median valuey
* memory::                      Memory use
* menu::                        Create or select a menu
* menuhide::                    Hide a menu
* menuitem::                    Change a menu item
* menupop::                     Pop (raise) a menu
* menuread::                    Read a value through a menu item
* menuzap::                     Zap (destroy) a menu
* min::                         Minimum
* minfilter::                   Running minimum
* minloc::                      Location of minimum
* mod::                         Modulus
* mproduct::
* multisieve::                  Determine locations of particular values
* name::
* ncchi2::                      Non-central chi-square function
* ne::                          Not equal to
* newallocs::                   Reports on recent memory allocation
* noecho::                      Do not echo code to be compiled
* noop::                        No operation
* not::                         Logical NOT
* num00a::                      Nutation matrix, IAU 2000A
* num00b::                      Nutation matrix, IAU 2000B
* num06a::                      Nutation matrix, IAU 2000A/2006
* numat::                       Nutation matrix from nutation components
* num_dim::                     Number of dimensions
* num_elem::                    Number of elements
* nut00a::                      Nutation components, IAU 2000A
* nut00b::                      Nutation components, IAU 2000B
* nut06a::                      Nutation components, IAU 2000A/2006
* nut80::                       Nutation components, IAU 1980
* nutm80::                      Nutation matrix, IAU 1980
* obl06::                       Mean obliquity of ecliptic, IAU 2006
* obl80::                       Mean obliquity of ecliptic, IAU 1980
* one::                         Fill with ones
* openr::                       Open a file for reading only
* openu::                       Open a file for updating (reading/writing)
* openw::                       Open a file for writing only
* oplot::                       Add data to a plot
* or::                          Logical OR
* ordfilter::                   Running ordinal
* orientation::                 Determine local orientation
* orif::                        Conditional logical OR
* p06e::                        Precession angles, IAU 2006
* p2s::                         Spherical from cartesian coordinates
* pap::                         Position angle from cartesian coordinates
* pas::                         Position angle from angular coordinates
* pb06::                        Precession Euler angles, IAU 2006
* pdev::                        Set/show plot device
* pdp::                         Inner product of 3-vectors
* peek::                        Investigate memory locations
* pen::                         Set pen width
* pencolor::                    Set pen color
* pfw06::                       Fukushima-Williams precession angles, IAU 2006
* pit::                         Polynomial fit
* pixelsto8bit::                Convert pixel values to 8-bit values
* plan94::                      Heliocentric planet position and velocity
* plot::                        Plot
* plot3d::                      Three-dimensional plot
* pm::                          Modulus of 3-vectors
* pmat00::                      Precession matrix, IAU 2000
* pmat06::                      Precession matrix, IAU 2006
* pmat76::                      Precession matrix, IAU 1976
* pn::                          Modulus and unit vector from 3-vector
* pn00::                        Precession-nutation matrix from nutation components, IAU 2000
* pn00a::                       Precession-nutation matrix, IAU 2000A
* pn00b::                       Precession-nutation matrix from nutation components, IAU 2000B
* pn06::                        Precession-nutation matrix from nutation components, IAU 2006
* pn06a::                       Precession-nutation matrix, IAU 2000A/2006
* pnm00a::                      Precession-nutation matrix, IAU 2000A
* pnm00b::                      Precession-nutation matrix, IAU 2000B
* pnm06a::                      Precession-nutation matrix, IAU 2000A/2006
* pnm80::                       Precession-nutation matrix, IAU 1976/1980
* pointer::                     Convert to a pointer
* polartossfc::                 Convert polar coordinates to SSFC
* polate::                      Linear interpolation
* poly::                        Polynomial evaluation
* pom00::                       Polar motion matrix, IAU 2000
* pop::                         Pop from the stack
* postimage::                   Write an image to a Postscript file
* postraw::                     Write a string to a Postscript file
* postrel::                     Finish and close a Postscript file
* postrelease::                 Finish and close a Postscript file
* power::                       Power spectrum
* pr00::                        Precession rate, IAU 2000
* prec76::                      Precession Euler angles, IAU 1976
* precess::                     Correct astronomical coordinates for precession
* print::                       Print to the screen
* printf::                      Write to a file in ASCII format
* project::                     Project 3D coordinates to screen coordinates
* projection::                  Manipulate 3D projection
* projectmap::                  Returns a projected version of a flat map
* psum::                        Sum weighted with powers of the coordinates
* ptoc::                        Transform from polar to Cartesian coordinates
* push::                        Push unto the stack
* pv2s::                        Spherical from cartesian position/velocity coordinates
* pvdpv::                       Inner product of position/velocity vectors
* pvm::                         Modulus of position/velocity vectors
* pvstar::                      Catalog coordinates from position/velocity vectors
* pvxpv::                       Outer product of two position/velocity vectors
* pxp::                         Outer product of two 3-vectors
* quantile::                    Quantiles
* quit::                        Quit LUX
* random::                      Pseudo-random numbers
* randomb::                     Pseudo-random bits
* randomd::                     Pseudo-random numbers user-distributed
* randome::                     Pseudo-random numbers exponentially distributed
* randomn::                     Pseudo-random numbers normally distributed
* randomu::                     Pseudo-random numbers uniformly distributed
* read::                        Read a value from the keyboard
* readarr::                     Read values from the keyboard into an array
* readf::                       Read values from a file in ASCII format
* readorbits::                  Read orbital da
* readu::                       Read values from a file in machine format
* read_jpeg::                   Read from a JPEG-compressed file
* real::                        Real part of a complex argument
* record::                      Record user input and/or LUX output
* redim::                       Modify the dimensions of an array
* regex::                       Match a regular expression to text
* regrid::                      Interpolate on a warped grid (nearest neighbor)
* regrid3::                     Interpolate on a warped grid (bicubic)
* regrid3ns::                   Interpolate on a warped grid (bicubic)
* reorder::
* replace::                     Replace some values with others
* restart::                     Restart LUX
* restore::                     Retrieve data from an FZ file
* resume::                      Negate one previous IGNORE
* return::                      Return from a subroutine or function
* reverse::                     Reverse the order of data in an array
* rewind::                      Rewind a tape
* rewindf::                     Move a file pointer to the file start
* rfix::                        Convert to @code{long} by rounding
* rm2v::                        Rotation vector from rotation matrix
* roll::                        Rearrange dimensions
* root3::                       Solve a cubic equation
* runcum::                      Running sum over a fixed width
* runmax::
* runmin::
* runord::
* runprod::                     Running product from the beginning
* runsum::                      Running sum from the beginning
* rv2m::                        Rotation matrix from rotation vector
* rx::                          Rotates 3-by-3 matrix about x axis
* rxr::                         Multiplies two 3-by-3 matrices
* rxpv::                        Product of 3-by-3 matrix and position/velocity vector
* ry::                          Rotates 3-by-3 matrix about y axis
* rz::                          Rotates 3-by-3 matrix about z axis
* s::                           Show information about variables
* s00::                         CIO locator from CIP x,y, IAU 2000A
* s00a::                        CIO locator, IAU 2000A
* s00b::                        CIO locator, IAU 2000B
* s06::                         CIO locator from CIP x,y, IAU 2000A/2006
* s06a::                        CIO locator, IAU 2000A/2006
* s2c::                         Cartesian unit from spherical coordinates
* s2p::                         Cartesian from spherical coordinates
* s2pv::                        Cartesian position/velocity from spherical coordinates
* sc::                          Sine-cosine transform
* scale::                       Convert to @code{byte} suitable for display
* scalerange::                  Convert to @code{byte} suitable for display
* scanf::                       Read from file in ASCII format
* scb::                         Inverse sine-cosine transform
* sccomplex::
* sdev::                        Standard deviation
* segment::                     Curvature-based image segmentation
* segmentdir::                  Curvature-based linear image segmentation
* sepp::                        Angular separation from cartesian coordinates
* seps::                        Angular separation from spherical coordinates
* set::                         Set properties of the LUX session
* setbackground::               Set the background color
* setbg::                       Set the background color
* setenv::                      Set an environment variable
* setfg::                       Set the foreground color
* setforeground::               Set the foreground color
* setnan::                      Markk values as Not-a-Number
* sgn::                         The signum function: the sign of data
* shift::                       Circular integer shift of an array
* shift3::                      Bicubic interpolation shift of an array
* show::                        Show information about variables
* showorbits::                  Show information on read orbital data
* showstats::                   Show information about the LUX session
* show_files::                  Show info on all open files
* show_func::                   Show information about a LUX function
* show_subr::                   Show information about a LUX subroutine
* show_temps::                  Show information about temporary variables
* show_visuals::                Show available color display schemes
* siderealtime::                The mean sidereal time
* sieve::                       Select elements according to a condition
* sin::                         Sine
* sinh::                        Hyperbolic sine
* skipc::                       Skip characters in a string
* skipf::                       Skip files on a tape
* skipr::                       Skip records on a tape
* smap::                        Convert to @code{string} byte by byte
* smod::                        Signed modulus
* smooth::                      Boxcar smoothing
* solar_b::                     Solar B angle
* solar_l::                     Solar L angle
* solar_p::                     Solar P angle
* solar_r::                     Apparent solar radius
* sort::                        Sort into ascending order
* sp00::                        TIO locator
* spawn::                       Send a command to the operating system
* sprintf::                     Convert to @code{string}
* sqrt::                        Square root
* sscanf::                      Read from string
* ssfctopolar::                 Convert SSFC to polar coordinates
* starpm::                      Update star catalog data for space motion
* starpv::                      Convert star catalog data to position/velocity vector
* step::                        Step through LUX code
* store::                       Write data to an FZ file
* str::                         Convert to @code{string}
* strarr::                      Create a @code{string} array
* strcount::                    Count the occurrence of a substring
* stretch::                     Warp an image
* string::                      Convert to @code{string}
* strlen::                      Length of a string
* strloc::                      Locate a substring
* strpbrk::                     Locate a substring
* strpos::                      Locate a substring
* strr::                        Substitute a substring
* strreplace::                  Substitute a substring
* strskp::                      Skip a substring
* strsub::                      Return a substring
* strtok::                      Find and return a token from a string
* strtol::                      Read a number from a string
* strtrim::                     Skip whitespace
* struct::
* student::                     Student's t distribution
* subshift::                    Calculate a subpixel shift
* subshiftc::                   Calculate a subpixel shift
* sun_b::                       Solar B angle
* sun_d::                       Solar distance
* sun_p::                       Solar P angle
* sun_r::                       Solar radius
* svd::                         Singular Value Decomposition
* swab::                        Swap bytes in pairs
* swapb::                       Swap bytes in pairs
* swaphalf::                    Swap array halfs
* switch::                      Switch identity of two variables
* symbol::                      Return the symbol with the given name
* symclass::                    Data class of a symbol
* symdtype::                    Data type of a numerical or string variable
* symmem::                      Memory use of a symbol
* symnum::                      Symbol number of a named symbol
* t::                           Print to screen
* table::                       Linear interpolation in a table
* taitt::                       TAI to TT
* taiut1::                      TAI to UT1
* taiutc::                      TAI to UTC
* tai_from_date::               Conversion between UTC and TAI
* tan::                         Tangent
* tanh::                        Hyperbolic tangent
* tapebufin::                   Read from tape
* tapebufout::                  Write to tape
* tape_status::                 Tape status
* taprd::                       Read from tape
* tapwrt::                      Write to tape
* tcbtdb::                      TCB to TDB
* tcgtt::                       TCG to TT
* tdbtcb::                      TDB to TCB
* tdbtt::                       TDB to TT
* temporary::                   Temporary copy
* tense::                       Interpolate using splines under tension
* tense_curve::                 Interpolate using splines under tension
* tense_loop::                  Interpolate using splines under tension
* threecolors::                 Install the "three-colors" color table
* tolookup::                    Condense using a lookup table
* total::                       Return the total of parts of an array
* tr::                          Transpose a 3-by-3 matrix
* trace::                       Trace execution of LUX code
* trace_decoder::
* trajectory::                  Calculate particle trajectories
* transpose::
* trend::                       Determine polynomial trend in data
* tri_name_from_tai::
* trxp::                        Product of 3-vector and transposed 3-by-3 matrix
* trxpv::                       Product of position/velocity vector and transposed 3-by-3 matrix
* tttai::                       TT to TAI
* tttcg::                       TT to TCG
* tttdb::                       TT to TDB
* ttut1::                       TT to UT1
* tv::                          Display an image
* tv3::                         Display an image and two bitmaps
* tvlab::                       Display a label
* tvlct::                       Load a color table
* tvmap::                       Display an array
* tvplane::
* tvraw::                       Display an array without color mapping
* tvread::                      Read an image into an array
* ty::                          Print to screen
* type::                        Print to screen
* typename::                    Name of a data type
* ulib::                        User library
* unload::                      Unload a tape
* unmod::
* upcase::                      Convert a string to upper case
* upper::                       Convert a string to upper case
* ut1tai::                      UT1 to TAI
* ut1tt::                       UT1 to TT
* ut1utc::                      UT1 to UTC
* utctai::                      UTC to TAI
* utcut1::                      UTC to UT1
* variance::                    Variance
* varname::                     Return the name of a variable
* verify::
* voigt::                       Voigt function
* wait::                        Wait
* wait_for_menu::               Wait for a menu selection
* wait_for_tape::               Wait for completion of a tape command
* watch::                       Watchpoint for a variable
* weof::                        Write an end-of-file to tape
* where::                       Return symbol that a memory address is in
* window::                      Select a window
* wmap::                        Convert to @code{word} byte by byte
* word::                        Convert to @code{word} value by value
* writeu::                      Write unformatted to a disk file
* write_jpeg::
* xanimate::                    Animate a set of images
* xclose::                      Close the X connection
* xcopy::                       Copy a part of an image
* xcursor::                     Select a pointer type
* xdelete::                     Delete a window
* xdrawarc::
* xdrawline::
* xevent::                      Show information about pending X events
* xexist::
* xflush::                      Flush the X event queue
* xfont::                       Select a font for display
* xinvertarc::
* xinvertline::
* xlabel::                      Display a label
* xlabelwidth::                 Determine the width of a display label
* xloop::                       X event loop
* xmaddfiletolist::
* xmalignment::
* xmarmcolor::
* xmarrow::                     Arrow widget
* xmattach::                    Specify attachment of widgets
* xmattach_relative::           Specify attachment of widgets
* xmbackgroundcolor::           Set a widget's background color
* xmboard::                     Bulletin board widget
* xmbordercolor::               Set a widget's border color
* xmborderwidth::               Set a widget's border width
* xmbottomshadowcolor::         Set a widget's bottom shadow color
* xmbutton::                    Button widget
* xmcheckbox::                  Check box widget
* xmcolumns::                   Column widget
* xmcommand::                   Command widget
* xmdestroy::                   Destroy a widget
* xmdialog_board::
* xmdialog_form::
* xmdrawingarea::
* xmdrawinglink::
* xmfilegetlist::
* xmfileselect::
* xmfont::                      Sets a widget's font
* xmforegroundcolor::           Sets a widget's foreground color
* xmform::                      Form widget
* xmframe::                     Frame widget
* xmgetoptionselection::
* xmgetpixmap::
* xmgetwidgetaddress::
* xmgetwidgetposition::
* xmgetwidgetsize::
* xmhscale::
* xmhscrollbar::
* xmlabel::                     Label widget
* xmlist::
* xmlistadditem::
* xmlistcount::
* xmlistdeleteall::
* xmlistdeleteitem::
* xmlistfromfile::
* xmlistfunc::
* xmlistselect::
* xmlistsubr::
* xmmenubar::                   Menu bar widget
* xmmessage::                   Message widget
* xmoptionmenu::
* xmpixmapbutton::
* xmpixmapoptionmenu::
* xmposition::                  Set a widget's position and size
* xmprompt::                    Prompt widget
* xmpulldownmenu::              Pull-down menu widget
* xmquery::
* xmradiobox::                  Radio box widget
* xmraise::
* xmresizepolicy::
* xmrows::                      Row widget
* xmscalegetvalue::
* xmscaleresetlimits::
* xmscalesetvalue::
* xmscrollbarsetvalues::
* xmscrolledwindow::
* xmscrolledwindowapp::
* xmselectcolor::
* xmsensitive::
* xmseparator::                 Separator widget
* xmsetcolors::
* xmsetdirectory::
* xmsetlabel::
* xmsetmargins::
* xmsetmnemonic::
* xmsetmodal::
* xmsetoptionselection::
* xmsetpixmap::
* xmsettitle::
* xmset_text_output::
* xmsize::
* xmtext::
* xmtextappend::
* xmtextbox::
* xmtexterase::
* xmtextfield::
* xmtextfieldarray::
* xmtextfieldgetstring::
* xmtextfieldseteditable::
* xmtextfieldsetmaxlength::
* xmtextfieldsetstring::
* xmtextfromfile::
* xmtextgetinsertposition::
* xmtextgetlastposition::
* xmtextgetselection::
* xmtextgetstring::
* xmtextreplace::
* xmtextseteditable::
* xmtextsetposition::
* xmtextsetrowcolumnsize::
* xmtextsetstring::
* xmtogglegetstate::
* xmtogglesetstate::
* xmtoplevel_board::            Top level bulletin board widget
* xmtoplevel_form::             Top level form widget
* xmtopshadowcolor::            Set a widget's top shadow color
* xmvscale::
* xmvscrollbar::
* xopen::                       Open the X connection
* xor::                         Exclusive or
* xplace::                      User-selected position
* xport::                       Create or rescale a window
* xpurge::                      Purge the X event queue
* xquery::                      Determine the status of the pointer
* xregister::                   Register event types for capture
* xsetaction::                  Select copy type
* xtloop::
* xtmluxge::
* xtparent::
* xtpopdown::
* xtpopup::
* xtunmluxge::
* xtv::                         Display an image
* xtvread::                     Read an image into an array
* xtwindow::
* xwin::                        Create or rescale a window
* xwindow::                     Create or rescale a window
* xy06::                        CIP x,y, IAU 2000A/2006
* xys00a::                      CIP x,y, IAU 2000A
* xys00b::                      CIP x,y, IAU 2000B
* xys06a::                      CIP x,y and CIO locator, IAU 2000A/2006
* xymov::                       Draw a line
* zap::                         Completely remove a variable
* zero::                        Zero a variable
* zeroifnotdefined::
* zeronans::                    Remove NaN values
* zinv::                        Zero-protected inverse
* zoom::                        Image inspection using the pointer
* Square Brackets::             Concatenation into an array
* Curly Braces::                Concatenation into a list

calendar

* General Calendar Details::
* Common Calendar::
* Julian Calendar::
* Gregorian Calendar::
* Islamic Calendar::
* Hebrew Calendar::
* Julian Day Numbers::
* Egyptian Calendar::
* Mayan Tikal Calendar::
* Mayan Long Count::
* Lunar Calendar::
* Latin Calendar::
* Time Scales::

ctop

* ctop Details::

hilbert

* hilbert Details::

orientation

* orientation details::

plot

* Plot Styles::
* plot Globals::

regrid

* regrid Details::

sc

* sc Details::

scb

* scb Details::

svd

* svd Applications::

@end detailmenu
@end menu

@c ------------------------------------------------------------------
@node Conventions, Start & Stop, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Typographical Conventions

@cindex Typographical conventions
@cindex Font use in the manual
@cindex Conventions for font use

This document uses the following typographical conventions:

@table @asis
@item A single key.
A single key, for instance the key marked "A", is written as
@kbd{a} if it is pressed without the shift key, @kbd{A} if it is pressed
with the shift key.  The following special key names are used in the LUX
Manual:

@table @kbd
@item Return
The key marked "Return" or "Enter", which signals completion of the
input.
@item SPC
The "space" bar, which generates a single whitespace.
@item TAB
The key marked "Tab", which advances the cursor to the next tab
position.
@item Backspace
The key marked "Backspace", which rubs out the character before the
cursor, and moves all text below and after the cursor back by one
position.
@item Delete
The key marked "Del" or "Delete", which rubs out the character under the
cursor, and moves all text after the cursor back by one position.
@item ESC
The key marked "Esc" or "Escape", which is used as introduction to
multi-key editor sequences.
@item Downarrow
The down-arrow key.
@item Uparrow
The up-arrow key.
@item Rightarrow
The right-arrow key.
@item Leftarrow
The left-arrow key.
@item Insert
The key marked "Insert", which toggles between insert and overwrite
mode.
@end table

Most keys change their meaning when they are typed while the key marked
"Control" or "Ctrl" is being kept pressed down.  Such an occurrence is
described in this manual by prepending @kbd{C-} to the name of the key
being pressed while the "Control" key is also pressed.  For instance,
pressing the "Control" key, pressing the @kbd{x} key, releasing the
@kbd{x} key, and releasing the "Control" key generates a key sequence
written as @kbd{C-x} in this manual.  Such a @emph{control sequence}
counts as a single keystroke.

@item A sequence of keystrokes.
A sequence of keystrokes that you type at the keyboard, for instance a
@kbd{t} followed by a comma (@kbd{,}), two whitespaces (@kbd{SPC}), and
a @kbd{6}, is indicated like this: @kbd{t,  6}.

@item A meta-variable name.
The name of a meta-variable in LUX, for instance the one that stands for
a general expression, is indicated as follows: @code{@var{expr}}.

@item Some LUX code.
Some arbitrary (legal) LUX code is written as follows: @code{T,6}.  Only
uppercase letters are used in names of functions and routines and in
reserved LUX key words.  The example code used for illustration here
would follow from the example used for the sequence of keystrokes,
above.
@end table

@c ------------------------------------------------------------------
@node Start & Stop, Tutorial, Conventions, Top
@comment  node-name,  next,  previous,  up
@chapter Starting and Stopping LUX.

@cindex Starting LUX
@cindex Exiting LUX
@cindex Quitting LUX
@cindex Stopping LUX
@cindex Initialization file
@cindex Start-up file

(To install LUX on your computer system, see @ref{Installing LUX}).  You
begin a LUX session by typing at the keyboard the name of the program
on your system (probably @kbd{lux}).  After some initialization and a
greeting message, the main LUX prompt appears:
@example
LUX>
@end example
LUX is now ready to take your commands.  Any complete command that you
type is executed immediately.  For example, if you type the command
@kbd{t,'Hello, world!'} and press the @kbd{RET} key, then the screen
looks something like this:
@example
LUX>t,'Hello, world!'
Hello, world!
LUX>
@end example
The @code{t} command is a synonym of @code{type} (@ref{type}) and
@code{print} (@ref{print}), and displays its arguments on the screen.
LUX has executed your command and is waiting for the next one.

You end a LUX session by entering the @code{quit} command (@ref{quit}),
or the equivalent @code{exit} command (@ref{exit});

If you want some initialization commands to be executed automatically
when LUX starts up, then put those commands in file @file{.luxinit} in
your home directory.  The contents of that file are read and executed
automatically when LUX starts.

@menu
* Command Line Arguments::      What you can add to the "lux" command
* Batch Mode::                  How to run LUX unattached to any terminal
@end menu

@c ------------------------------------------------------------------
@node Command Line Arguments, Batch Mode, Start & Stop, Start & Stop
@comment  node-name,  next,  previous,  up
@section Shell Command Line Arguments

@cindex Command line arguments of the invoking command
@cindex Options, specified when starting LUX
@cindex Shell command line arguments for LUX
@cindex Arguments to the command invoking LUX

When you start up LUX then any text on the command line after the
command name that starts LUX (probably @file{lux}) is passed to LUX as
if you typed it at the @code{LUX>} prompt.  Just remember that such text
may be changed by the shell before it is passed on to LUX, just like any
other shell arguments.

For instance, if you invoke LUX as follows:
@example
 lux @@file
@end example
then -- assuming the shell does not modify the argument -- LUX starts up
and starts reading input from the @file{file}, just like if you typed
@code{lux}, waited for the @code{LUX>} prompt, and then typed
@code{@@file}.

The quote (') character is removed by most shells, so invocations such
as
@example
 lux type,'alpha'
@end example
will pass the statement @code{type,alpha} to LUX, which generates an
error because no variable named @code{alpha} is defined when LUX first
starts.  In this case, to pass quotes to LUX, you can enclose the whole
argument list between double quotes ("), or prepend backslashes (\) to
the quotes; i.e.,
@example
 lux type,\'alpha\'
@end example
and
@example
 lux "type,'alpha'"
@end example
should work.  The latter form is better, because it also protects some
other characters that are special to the shell from being modified.

@c ------------------------------------------------------------------
@node Batch Mode,  , Command Line Arguments, Start & Stop
@comment  node-name,  next,  previous,  up
@section Batch Mode

@cindex Batch mode
@cindex Running LUX unconnected to a terminal
@cindex Running LUX in the background

You can have LUX run in @emph{batch mode}: in the background,
unconnected to a terminal, even after you have logged out.  To make this
work, you need to be able to do three things:

@enumerate
@item
Make LUX take all input from a disk file rather than from the keyboard.
@item
Make LUX send all output to a disk file or discard it rather than
send it to the screen.
@item
Put LUX in the background where it can run unconnected to any terminal.
@end enumerate

The first item can be taken care of by LUX itself; the last two items
must be done by the shell in which you start LUX.  Of course, you cannot
use any commands that generate screen output or that rely on screen or
mouse input if the LUX process is unconnected to a terminal.

To make LUX read commands from a file, use file inclusion (@ref{File
Inclusion}): The command
 @example
  @@file
 @end example
makes LUX read commands from file @file{file.lux}.  However, if the file
contains a command that requests user input, then such input is read
from the keyboard by default.  You can instruct LUX to read such input
from the file, too, by issuing the @code{batch} command (@ref{batch}).

The following discussion of input and output redirection and of
background processes is valid for most Unix-type operating systems.

In most Unix-type shells, you make a command send all output to a disk
file by appending a file name after a greater-than (>) sign to the
command line, and make the command take input from a disk file by
appending a file name after a less-than (<) sign, and make the command
run in the background, unconnected to any terminal, by ending the
command line with an ampersand (&) sign.

The command
@example
lux batch statements exit > outputfile &
@end example
executes the listed statements in LUX, takes all input (if any) from the
read files, sends all output to file @file{outputfile}, and runs in the
background.  In this case, you must explicitly tell LUX to exit (using
the @code{exit} command, @ref{exit}) when it is done, or else it will
hang around in the background waiting for more input.  If no additional
user input is required during execution of the statements, then you can
leave out the @code{batch} command.  In most cases, the shell will
complain if file @file{outputfile} already exists.  If you use double
greater-than signs (>>) rather than a single one, then the output is
appended to @file{outputfile}, which may or may not already exist.  In
some shells, if you use a greater-than sign followed by an exclamation
mark (>!), then if @code{outputfile} already exists its previous
contents are discarded.

If all of your LUX commands are in a single file @file{inputfile}, then
you can also use the following command to execute these commands in the
background:
@example
lux < inputfile > outputfile &
@end example
If LUX finds that it cannot get more input because it has read all of
the input file and it is not connected to a terminal (as in this case),
then it quits, so you do not need to have an @code{exit} command at the
end of @file{inputfile} in this case.

If you are running LUX connected to a terminal and then decide you'd
rather have it continue in the background, then you can send it the
"suspend" interrupt signal, commonly generated by pressing @kbd{C-Z},
and then type the shell command @code{bg} to put the session in the
background.  However, you cannot have subsequent output be sent to a
file in this way, so if LUX generates any output after it is put in the
background in this way, then the process will hang around until it gets
reattached to a terminal.  Likewise, if LUX is ready for more input, the
process will wait around for that.  To reattach the process to the
terminal, type @code{fg}.

@c ------------------------------------------------------------------
@node Tutorial, Input/Output, Start & Stop, Top
@comment  node-name,  next,  previous,  up
@chapter Tutorial

This chapter gives an overview of the basic details of LUX.  It skips
many of the fine details, but gives pointers to where you can find more
about such details.  After reading this tutorial, you may be interested
to see a listing of most of LUX's routines by category: @ref{Routine
Groups}.  WARNING: This chapter is new and yet incomplete.

Once you've installed (@ref{Installing LUX}) and started up the LUX
program (@ref{Start & Stop}), you can type commands at the @code{LUX>}
prompt (@ref{Command Input}).  Our first example program prints the
string @code{hello, world!} on the screen.  In LUX, this is simply
@example
LUX>t,'hello, world!'
hello, world!
LUX>
@end example
The @code{LUX>} at the beginning of the line is the prompt, which
indicates that LUX is ready to accept your commands.  The @code{t}
subroutine (synonyms: @code{type}, @code{print}; @ref{t},
@ref{Subroutine Call}) prints its comma-separated arguments to the
screen, using default output formats (@ref{Formatted Input/Output}).
The argument in this case is a literal string (@ref{Strings}).  LUX also
knows about numbers.  You can specify integer numbers in various bases,
and also floating-point numbers with optional exponents (@ref{Scalars}).

LUX distinguishes between lower case and upper case letters.  Addition
of arbitrary amounts of whitespace (blanks) is ignored except inside
literal strings and inside names.  So, the first example could also
have been given as
@example
LUX>  type  ,    'hello, world!'
hello, world!
LUX>
@end example

Besides subroutines such as @code{t}, LUX also offers many functions,
which take arguments and return a value (@ref{Function Call}).  For
example,
@example
LUX>t,sin(1)
      0.841471
LUX>
@end example
shows the value returned by the trigonometric sine function (@ref{sin},
@ref{Trigonometry}) for the argument @code{1} (measured in radians in
this case).  Arguments to functions must be separated by commas, and the
whole argument list must be enclosed in parentheses.  You can change the
format in which the result is printed (@ref{Formatted Input/Output}).
Besides functions, LUX knows a number of other operations that yield
values (@ref{Operators}), including arithmetic operators such as
addition and multiplication, and also operators that compare their
operands (@ref{Binary Relationals}), perform binary logic on them
(@ref{Binary Logic}), and a number of others.

One of the strengths of LUX is that it is easy to work with large sets
of numbers, in arrays (@ref{Arrays}).  You can specify an array by
listing its members explicitly, e.g.,
@example
LUX>x=[1,2,6,12]
LUX>t,x
         1         2         6        12
LUX>
@end example
assigns a four-element array to the variable named @code{x}
(@ref{Variables}, @ref{Square Brackets}).  In assignments like this, the
variable assumes the data class (@ref{Data Classes}) and type, if any,
of the expression that is assigned to it (@ref{Expressions}): you do not
need to declare the type of the variable beforehand.  You can also use
one of the many functions in LUX that generate arrays (@ref{Array
Creation}).  The data values in arrays are arranged in a specific
coordinate system that may have several dimensions (up to
@code{#max_dims} of them, actually -- @ref{#max_dims}).  For example,
you can create an array of 3 by 4 elements which contain as values their
index counted from the start of the array:
@example
LUX>x=indgen(lonarr(3,4))
LUX>t,x
         0         1         2         3         4         5         6
         7         8         9        10        11
LUX>d,x
195 X         array, LONG, #elem = 12, (3,4)
LUX>
@end example
In this example, the @code{lonarr} function (@ref{lonarr}) creates and
returns a @code{long} (four-byte integer, @ref{Numerical Data Types})
array of 3 by 4 elements with unspecified values for its elements.  The
@code{indgen} function (@ref{indgen}) that is applied to this array
fills each element of its argument array with its index, counted from
the start of the array.  The @code{d} subroutine (@ref{d}, a synonym of
@code{dump}) displays basic information about the variable or variables
that are specified as its arguments.  In this case, it shows that
@code{x} is a @code{long} array of 3 by 4 elements, making 12 elements
in total.  Note that in assignments, the variable that is assigned to
loses any previous contents it might have had -- in this case, the
earlier contents @code{[1,2,6,12]} are deleted and replaced by the new
contents.  The new contents need not be of the same class or type as the
old contents.

You can inspect particular elements of an array in various ways
(@ref{Subscripts}).  The most basic way is to specify the coordinates of
the element you wish, separated by commas and enclosed in parentheses,
but you can also inspect ranges of elements:
@example
LUX>t,x(2,3)
        11
LUX>t,x(0:1,2:*)
         6         7         9        10
@end example
The asterisk @code{*} in the second command means "through the end of
the array in the current coordinate", and the semicolons @code{:}
separate the specification of the beginning of each range from the
specification of the end.

You modify particular elements of an array using similar subscripts on
the left-hand side of the equal sign (@kbd{=}):
@example
LUX>x(2,3) = 17
LUX>x(0:1,2:*) = [1, 2, 3, 4]
@end example
Lines like the previous ones, that instruct LUX to perform a particular
task, and after which LUX is ready to accept another command, are called
@emph{statements}.  You've already seen assignment statements
(@ref{Assignment}) and subroutine calls such as the ones to subroutine
@code{t} (@ref{Subroutine Call}), but there are many more
(@ref{Statements}).  You can repeat particular statements using
@code{for}, @code{repeat-until}, @code{while-do}, or @code{do-while}
statements.  You can select particular statements for execution from a
number of statements, using an @code{if}, @code{case}, or @code{ncase}
statement.

@c ------------------------------------------------------------------
@node Input/Output, Syntax, Tutorial, Top
@comment  node-name,  next,  previous,  up
@chapter Input/Output

@cindex Input to LUX

LUX accepts input from the keyboard, disk files, and tape files, and
provides output to the screen, disk files, and tape files.

@menu
* Command Input::               Typing commands at the keyboard
* Data I/O Routines::           Getting data in or out of LUX
* Formatted Input/Output::      I/O according to specific formats
* Escape Codes::                How to specify non-printable characters
@end menu

@c ------------------------------------------------------------------
@node Command Input, Data I/O Routines, Input/Output, Input/Output
@comment  node-name,  next,  previous,  up
@section Command Line Input

@cindex Keyboard input
@cindex Input from the keyboard
@cindex Command line input
@cindex Continuation of input lines
@cindex Input continuation

Whatever you type at the keyboard is only passed on to LUX's interpreter
when you press the @kbd{RET} key.  Before you do that, you can edit the
command line in various ways, described below.  Most of the editing
commands are the same as those in the Emacs editor.

During command line input, the leftmost four columns of the screen are
reserved for the display of @emph{prompts}, which convey information
about the status of the input.  The rightmost column of the screen is
reserved for the continuation character @kbd{-}, which is displayed
whenever the input is too long to fit on a single screen line.  The
columns between the prompt and continuation columns are used to display
your input.

On input, any non-printable characters that are not recognized as
editing commands (for instance tabs) are treated as whitespace.

@c ------------------------------------------------------------------
@menu
* Key Code Overview::
@end menu

@node Key Code Overview,  , Command Input, Command Input
@comment  node-name,  next,  previous,  up
@subsection Key Code Overview

@cindex Key code overview
@cindex Keystroke overview

LUX makes use of the GNU readline library for reading lines at the
keyboard.  Here are some of the special keystrokes that are
recognized.

@table @kbd
@item Backspace
Delete the character before the cursor.
@item Delete
Delete the character under the cursor.
@item Downarrow
Retrieve next line from history buffer.
@item Insert
Toggles between insert and overwrite mode.
@item Leftarrow
To previous character.
@item Rightarrow
To next character.
@item Uparrow
Retrieve previous line from history buffer.
@item C-a
To beginning of command line.
@item C-b
To previous character.
@item C-d
Delete the current character.
@item C-e
To end of command line.
@item C-f
To next character.
@item C-k
Kill the text from the current position to the end of the line.
@item C-l
Clear the screen, reprinting the current line at the top.
@item C-n
Retrieve the next line from the history buffer.
@item C-p
Retrieve the previous line from the history buffer.
@item C-r
Retrieve a line with a particular string in it from the history
buffer, going backwards.  Terminate the search with @kbd{Escape} or
@kbd{C-J} (to accept the found line and allow it to be edited), or
@kbd{Return} (to accept the found line and execute it) or @kbd{C-g}
(to abandon the search and restore the previous line).
@item C-s
Retrieve a line with a particular string in it from the history buffer,
going forwards.  Terminate the search with @kbd{Escape} or
@kbd{C-J} (to accept the found line and allow it to be edited), or
@kbd{Return} (to accept the found line and execute it) or @kbd{C-g}
(to abandon the search and restore the previous line).
@item C-t
Transpose characters.
@item C-u
Delete the command line part before the cursor.
@item C-x Delete
Delete the command line part before the cursor.
@item C-w
Kill from the current position to the previous whitespace.
@item C-y
Yank the most recently killed text back into the line.
@item C__ or C-x C-u
Incremental undo.
@item M-Delete
Kill from the cursor to the previous start-of-word.
@item M-b
To previous beginning-of-word.
@item M-c
Capitalize the current (or following) word.
@item M-d
Kill from the current position to the next end-of-word.
@item M-f
To next end-of-word.
@item M-l
Downcase the current (or following) word.
@item M-n
Non-incremental search forward in the history lines.
@item M-p
Non-incremental search back in the history lines.
@item M-r
Undo all changes made to this line.
@item M-t
Transpose words.
@item M-u
Upcase the current (or following) word.
@item M-y
Rotate the kill-ring and yank the new topmost element.  This only has
effect just after @kbd{C-y} or @kbd{M-y}.
@item M-<
Move to the first line in the history.  Note that LUX retains only a
limited number of history lines (currently 100).
@item M->
Move to the last line in the history.
@end table

@c ------------------------------------------------------------------
@node Data I/O Routines, Formatted Input/Output, Command Input, Input/Output
@comment  node-name,  next,  previous,  up
@section Data Input/Output Routines

@cindex Data I/O routines
@cindex Input/Output routines

LUX provides data input/output to screen, disk file, or tape.  The data
can be either formatted or unformatted -- adjectives which refer to
formatting for human consumption.  Formatted data can be easily read by
humans, and unformatted data is better suited for the computer.
Unformatted data usually takes less space than formatted data.

The order in which data bytes are stored in memory or in a file depends
on what computer you are using.  LUX's native file format (FZ) knows how
to deal with this, and LUX also offers some routines to switch between
the two most-used data byte orders.

@c ------------------------------------------------------------------
@menu
* Keyboard/Screen I/O::         Data from keyboard / to screen
* Disk File I/O::               Data from/to disk files
* LUX Disk File Formats::       Disk file formats specific to LUX
* Byte Order::                  The order in which data bytes are stored
* Tape File I/O::               Data from/to tape files
@end menu

@node Keyboard/Screen I/O, Disk File I/O, Data I/O Routines, Data I/O Routines
@comment  node-name,  next,  previous,  up
@subsection Keyboard/Screen Input/Output

@cindex Input from keyboard
@cindex Keyboard input
@cindex Output to screen
@cindex Screen output

Output to the screen is provided through subroutines @code{type} (with
its aliases @code{t}, @code{ty}, and @code{print}) and @code{fprint}.
Input from the keyboard is provided by routines @code{read},
@code{readarr}, and @code{fread}, and by system functions
@code{!readkey} and @code{!readkeyne}.

See also: @ref{fprint}, @ref{fread}, @ref{read}, @ref{readarr},
@ref{!readkey}, @ref{!readkeyne}, @ref{type}

@c ------------------------------------------------------------------
@node Disk File I/O, LUX Disk File Formats, Keyboard/Screen I/O, Data I/O Routines
@comment  node-name,  next,  previous,  up
@subsection Disk File Input/Output

@cindex Disk file I/O
@cindex Input from disk files
@cindex Output to disk files

Both output to and input from disk files is provided through associated
variables (created through subroutine @code{assoc}) and file arrays
(created through subroutine @code{fltfarr} and cousins), which behave to
some extent like ordinary data arrays.

Output to disk files is also provided through classical file operations,
such as opening disk files for writing (subroutines @code{openw} and
@code{openu}), writing to disk files (subroutines @code{printf} and
@code{fprintf} for formatted output, @code{writeu} for unformatted
output).

Input from disk files is likewise provided through opening disk files
for reading (subroutine @code{openr}), reading from disk files
(subroutines @code{readf} and @code{freadf} for formatted input,
@code{readu} for unformatted input).

Also useful in these cases is repositioning the file pointer (subroutine
@code{fileptr}), closing disk files (subroutine @code{close}), and
getting the disk file size (function @code{filesize}).

In addition, LUX supports input and output of files according to various
standard formats, such as uncompressed GIF files (@code{gifread},
@code{gifwrite}), lossy compressed JPEG files (@code{jpegread},
@code{jpegwrite}), FITS files with or without extensions
(@code{fits_read}, @code{fits_write}), and LUX's own FZ format, which
comes in uncompressed (@code{fzread}, @code{fzwrite}) and compressed
flavors (@code{fcwrite}).  Unformatted files can be transformed into FZ
files, using @code{filetofz}.

See also: @ref{assoc}, @ref{Associated Variables}, @ref{close},
@ref{fileptr}, @ref{filesize}, @ref{filetofz}, @ref{fits_read},
@ref{fltfarr}, @ref{fprintf}, @ref{freadf}, @ref{File Arrays},
@ref{openr}, @ref{openu}, @ref{openw}, @ref{printf}, @ref{readf},
@ref{readu}, @ref{writeu}, @ref{gifread}, @ref{gifwrite},
@ref{jpegread}, @ref{jpegwrite}, @ref{fzread}, @ref{fzwrite},
@ref{fcwrite}

@c ------------------------------------------------------------------
@node LUX Disk File Formats, Byte Order, Disk File I/O, Data I/O Routines
@comment  node-name,  next,  previous,  up
@subsection LUX Disk File Formats

LUX supports several of its own disk file formats, which are discussed
below.

@menu
* LUX FZ File Format::
* LUX FITS File Format::
* LUX ASTORE File Format::
@end menu

@c ------------------------------------------------------------------
@node LUX FZ File Format, LUX FITS File Format, LUX Disk File Formats, LUX Disk File Formats
@comment  node-name,  next,  previous,  up
@subsubsection LUX FZ File Format

The LUX FZ file format allows storage of data in uncompressed or
compressed form, with header text of limited size.  The used compression
is of the Rice type, with or without run-length encoding.  The data type
and dimensions are encoded in the file.

@c ------------------------------------------------------------------
@node LUX FITS File Format, LUX ASTORE File Format, LUX FZ File Format, LUX Disk File Formats
@comment  node-name,  next,  previous,  up
@subsubsection LUX FITS File Format

FITS stands for Flexible Image Transport System and is a file format
developed by the astronomical community for data exchange and storage.
For general information, see the FITS Support Office home page at
@code{http://fits.gsfc.nasa.gov/fits_home.html}.  

An LUX FITS file containing uncompressed data has the standard
@code{SIMPLE, BITPIX, NAXIS}, and @code{NAXISn} records, and any general
user-specified header text is placed on one or more @code{COMMENT} lines
beyond the last @code{NAXISn} record.

For LUX FITS file that contain compressed data we define a few
LUX-specific FITS keywords.  A typical example of the header of such a
file is displayed below.

@example
SIMPLE  =                    T / LUX Rice compressed
BITPIX  =                    8
NAXIS   =                    1
NAXIS1  =               217750
COMPRESS= 'RICE    ' / used type of compression
UBITPIX =                   16 / BITPIX of uncompressed data
UNAXIS  =                    2 / NAXIS of uncompressed data
UNAXIS1 =                  464 / dimension of uncompressed data
UNAXIS2 =                  438 / dimension of uncompressed data
COMMENT = user-defined header text
END
@end example

The @code{BITPIX, NAXIS,} and @code{NAXISn} keywords refer to the actual
data in the rest of the FITS file, as the standard demands.  In this
case, 217750 bytes of compressed data follow.  The type of compression
is described by the @code{COMPRESS} line, which may currently hold
either of the values @code{'RICE    '} for Rice compression without
run-length encoding, and @code{'RICE RLE '} for Rice compression with
run-length encoding.  The type and dimensions of the uncompressed data
are indicated by the lines with the @code{U} keywords, and any general
user-defined header text is stored on one or more @code{COMMENT} lines.

@c ------------------------------------------------------------------
@node LUX ASTORE File Format,  , LUX FITS File Format, LUX Disk File Formats
@comment  node-name,  next,  previous,  up
@subsubsection LUX ASTORE File Format

The LUX ASTORE file format allows storage of multiple LUX variables.
The data type, dimensions, and associated variable names are encoded in
the file.

@c ------------------------------------------------------------------
@node Byte Order, Tape File I/O, LUX Disk File Formats, Data I/O Routines
@comment  node-name,  next,  previous,  up
@subsection Byte Order

@cindex Disk file byte order
@cindex Bigendian machine
@cindex Littleendian machine
@cindex Byte order in multi-byte data formats

All information in computers is stored in the form of bits, where each
bit can be either a 0 or a 1.  Most modern computers use as the unit of
memory a byte, which consists of eight bits and which can contain 256
different values.  LUX's data types (@ref{Numerical Data Types}) all
consist of an integral number of bytes.  If a data value consists of
more than one byte, then the byte that counts the smallest units of the
value is called the @emph{least significant byte} and the byte that
counts the biggest units of the value is called the @emph{most
significant byte}.  The bytes of a multi-byte data value can be stored
in memory in different orders.  The two byte orders used the most are
the one in ascending order of significance, often referred to as
@emph{little-endian} (because you start at the end of the "little"
values), and the one in descending order of significance, often called
@emph{bigendian}.

What happens if you try to read data on a bigendian machine that was
written on a littleendian one?  If you use any of the classical file I/O
operations (i.e., following @code{openr} or @code{openu}), or use direct
mapping of an array structure onto a disk file (i.e., @code{assoc} or
@code{fltfarr} and its cousins), then LUX cannot automatically correct
for the byte order discrepancy, because arbitrary files do not contain
indications of how many bytes make up a value, and what their byte order
might be.  However, LUX provides the routine @code{endian}, which
switches the byte order of the data in a variable from littleendian to
bigendian or the other way around, so in this case you can read the data
as usual and then switch its byte order if necessary.

If you use files that conform to LUX's own FZ format (written using,
e.g., @code{fzwrite}, @code{fcwrite}, or @code{store}) then the data's
type and byte order are included in the file's header so any necessary
corrections for byte order discrepancies are taken care of
automatically.  If you create such a file, then the data is always
written in your machine's native byte order.

The @code{fzarr} function which assigns an array structure to an FZ disk
file does not correct for byte order discrepancies, even though the FZ
file contains byte order information.  This is because @code{fzarr}
returns an appropriate file array (@ref{File Arrays}) to access the file
data and file arrays do not contain byte order information.  This means
that if you copy a file from a bigendian machine to a littleendian
machine, or the other way around, then you cannot use a file array to
access that data (except if you combine such access with the use of
@code{endian}).

To find out if your computer is bigendian or littleendian, you can check
the value of read-only global variable @code{#msbfirst}: if it is equal
to @code{1}, then the most significant byte comes first (i.e., your
computer is bigendian), and if it is equal to @code{0}, then the least
significant byte comes first (it is littleendian).

Another way is to execute @code{t,bmap(1)}.  If the result is @code{0 0
0 1}, then your computer is bigendian; if the result is @code{1 0 0 0}
then your computer is littleendian.

See also: @ref{Disk File I/O}, @ref{#msbfirst}

@c ------------------------------------------------------------------
@node Tape File I/O,  , Byte Order, Data I/O Routines
@comment  node-name,  next,  previous,  up
@subsection Tape File Input/Output

@cindex Tape file I/O
@cindex Input from tape
@cindex Output to tape

Output to tape files is performed through the subroutines @code{tapwrt}
and @code{tapebufout}.  Input is done through @code{taprd} and
@code{tapebufin}.  @code{skipf} is used for skipping files (either
forward or backward), @code{skipr} for skipping records (either forward
or backward), and @code{rewind} for rewinding the tape.

See also: @ref{rewind}, @ref{skipf}, @ref{skipr}, @ref{tapebufin},
@ref{tapebufout}, @ref{taprd}, @ref{tapwrt}

@c ------------------------------------------------------------------
@node Formatted Input/Output, Escape Codes, Data I/O Routines, Input/Output
@comment  node-name,  next,  previous,  up
@section Formatted Input/Output

@cindex Formatted I/O
@cindex Input formatting
@cindex Output formatting

The format in which output is printed may be specified in various ways,
which broadly divide into two classes: those that find a format suitable
for the argument, and those that map the argument to fit the format.
The first class is used by routine @code{type} and its aliases, as well
as by @code{printf}, @code{string}, and @code{str}.  The second class is
used by @code{fprint}, @code{fprintf}, and @code{fstring}.

Input routines are similarly divided into two classes.  Routines
@code{read} and @code{readf} read data depending on the argument type,
and routines @code{fread}, @code{freadf}, and @code{freads} read data
according to a specified format.

To do any kind of formatted input or output, one must be able to specify
the format that is to be used.  LUX uses format specifications which are
modeled on those from C, but with some modifications.

Format strings consist of ordinary text, format entries, and format
groupings.  All format entries are introduced by a percent sign
(@kbd{%}) and must contain a specifier character (which indicates the
type of data the format applies to).  The simplest formats contain
nothing more.

A general single format entry consists of the following components, in
the indicated order:
@enumerate
@item
a percent sign (@code{%})
@item
optional modifier characters (@ref{Format Modifiers})
@item
an optional field width (an unsigned integer number) (@ref{Format Field
Width})
@item
an optional period (@code{.})
@item
an optional precision (an unsigned integer number) (@ref{Format Precision})
@item
an optional type modifier character (@ref{Format Specifiers})
@item
a format specifier character (@ref{Format Specifiers})
@item
an optional repeat count followed by a pound sign (@code{#})
@item
optional plain text
@end enumerate

See also: @ref{fprint}, @ref{fprintf}, @ref{fread}, @ref{freadf},
@ref{freads}, @ref{fstring}, @ref{printf}, @ref{read}, @ref{readf},
@ref{str}, @ref{string}, @ref{type}.

@c ------------------------------------------------------------------
@menu
* Format Specifiers::
* Format Modifiers::
* Format Field Width::
* Format Precision::
* Format Grouping::
* Long output lines::
* In-Line Print Formats::
* Output Data Formats::
* Input Data Formats::
@end menu

@node Format Specifiers, Format Modifiers, Formatted Input/Output, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Format Specifier Characters

The format specifier consists of one character from the following
list, optionally preceded by a format type modifier (discussed below
the table).  The C format types @code{c}, @code{n}, @code{u}, and
@code{p} are not supported.  The format types @code{J}, @code{S},
@code{t}, and @code{z} are available in LUX but not in C.

@table @code
@item d
refers to an integer (@code{long}) argument.  On ouput, it is
printed in decimal (base 10) notation.  On input, its base is determined
from the first character(s): initial @code{0x} or @code{0X} indicate a
hexadecimal (base 16) number; otherwise initial @code{0} indicates an
octal (base 8) number; otherwise it's a decimal (base 10) number.
@item i
refers to an integer (@code{long}) argument in decimal (base 10)
notation.
@item o
refers to an integer (@code{long}) argument in octal (base 8) notation.
On input, an initial @code{0} is allowed.
@item x, X
refer to an integer (@code{long}) argument in hexadecimal (base 16)
notation, using letters @code{a} through @code{f} to denote hexadecimal
"digits" 10 through 15.  On input, initial @code{0x} or @code{0X} are
allowed.  On output, @code{%x} requests lower-case letters, and
@code{%X} requests upper-case letters.
@item e, E
refer to a floating-point (@code{float}, @code{double}) argument in
exponential notation.  Exponential notation consists of a plus sign or
minus sign, some decimal digits, a decimal point (usually a period
@kbd{.}), more decimal digits, an @emph{exponent marker}, a plus sign or
minus sign, and some decimal digits.  The exponent marker is an @code{e}
or an @code{E}.  The part before the exponent marker is the
@emph{mantissa}, and the part after the exponent marker is the
@emph{exponent}.  The indicated number is equal to the product of the
mantissa and ten to the power of the exponent.  On output, the exponent
is always printed.  On input, the exponent, decimal point, initial sign,
and all except one digit are optional.
@item f
refers to a floating-point (@code{float}, @code{double}) argument which
is printed in fixed-point notation (i.e., with a decimal point but no
exponent).
@item g, G
refer to a floating-point (@code{float}, @code{double}) argument.  On
output, it is printed in exponential (@code{%e} for @code{%g}, @code{%E}
for @code{%G}) notation if the exponent is less than @minus{}4 or not
less than the precision; otherwise, fixed-point (@code{%f}) notation is
used.  On input, @code{%g} and @code{%G} work like @code{%e}.  By
default, a trailing decimal point and trailing zeros after the decimal
point are not printed.
@item J

refers to a date and time argument.  On output, the value (a
@code{float} or @code{double}) is interpreted as a Chronological
Julian Day Number (for @code{%J}) or a Julian Day Number (for
@code{%#j}) and converted to the corresponding date in the common
Western calendar; @ref{calendar} for more information about calendar
transformations.  The specified precision determines how many
components of the date and time are shown, starting from the year:
@code{%.1J} provides just the year, @code{%.2J} the year and the
month, @code{%.3J} the year, month, and day, @code{%.4J} through
@code{%.6J} add the hour, minute, and second, and greater precisions
add further sexagesimal divisions of seconds.  If a width is specified
that is greater than is needed for minimal output, and if left
alignment is selected, then the last displayed component is shown with
further digits after the decimal marker until the specified width has
been filled.  @code{%.6J} yields a date and time in ISO 8601 format,
similar to @code{2000-12-30T03:04:05}.

@item s, S
refer to a @code{string} argument.  On output, both formats are
equivalent.  On input, the @code{%s} format does not accept whitespace
(i.e., reads one whitespace-delimited word), and the @code{%S} format
does accept whitespace except for newlines.
@item T
refers to a floating point (@code{float}, @code{double}) argument.  On
output, it is printed with the fractional part in sexagesimal
notation, similar to @code{1234:45:56}.  The field width indicates the
minimum width of the string and the precision the number of
sexagesimal elements.  The precision defaults to 2 (i.e., hh:mm) and
cannot be less than 2.  All elements are printed as 2-digit integers,
except the last one, which is printed as a floating-point number.  The
string is lengthened (if necessary to attain the minimum field width)
by printing the last element with more digits after the decimal point.
The first element is preceded by a whitespace or a sign (depending on
the sign of the argument and the presence of the @code{+} modifier).
The @code{#} modifier (e.g., @code{%#t}) divides the argument by 15
before transforming from decimal to sexagesimal notation: it equates
360 degrees with 24 hours.
@item z
a complex (@code{cfloat}, @code{cdouble}) number, shown as two
floating-point numbers (using a @code{%g} format, or a @code{%f} if the
format specifier is @code{%#z}) of which the first one represents the
real part, and the second one the imaginary part of the number.  The
imaginary part is always displayed with a sign, and is directly followed
by an @code{i}.  The specified width refers to the whole output, but the
specified precision applies to each of the two components separately.
@end table

@code{d i o x X} specifiers may be directly preceded by an @code{h} to
indicate a @code{word} argument rather than a @code{long} argument on
input, or by a @code{j} to indicate a @code{int64} argument.  @code{e
E f g G t T z} specifiers may be directly preceded by an @code{l} to
indicate a @code{double} argument rather than a @code{float} argument
on input.

If you use a format specifier that is not in this table, then strange
things may happen.

@c ------------------------------------------------------------------
@node Format Modifiers, Format Field Width, Format Specifiers, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Format Modifiers

@cindex Format modifiers
@cindex Text format modifiers
@cindex Modifiers of text formats

Format modifiers may be specified in any order.

@table @code
@item -
specifies left adjustment of the argument in its field.  Right
adjustment is the default.  (Does not affect the @code{%t} and @code{%T}
formats.)
@item +
specifies that the number will always be printed with a sign.  By
default, a sign is not printed for positive numbers.
@item 0
specifies that for numerical arguments the field will be padded with
leading zeros if necessary.
@item (whitespace)
specifies that nonnegative numbers be preceded by a space.
@item #
specifies an alternate output form.  For the @code{o} format, prefixes a
zero for nonzero numbers; for @code{x} or @code{X}, prefixes @code{0x} or
@code{0X} to nonzero numbers; for @code{e}, @code{E}, @code{f}, @code{g},
@code{G}, and @code{z}, the number will always contain a decimal point;
for @code{g}, @code{G}, and @code{z}, trailing zeros will not be removed. 
@item *
indicates suppression of assignment when reading input: If a @code{*} is
specified in an input format specification, then a value corresponding
to the format entry with the @code{*} in it is read, but the value is
then discarded.  This allows specification of required but not used
fields in the input.
@item _
indicates that if the argument to which this format entry is applied is
an array, then the plain text immediately following the format entry
should be printed after each element of the array, rather than just once
after all the elements have been printed.
@item =
indicates that if the argument to which this format entry is applied is
an array, then the plain text immediately following the format entry
should be printed between all elements of the array, rather than just
once after all the elements have been printed.
@end table

The @code{_} and @code{=} format modifiers are LUX extensions to the C set.

@c ------------------------------------------------------------------
@node Format Field Width, Format Precision, Format Modifiers, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Format Field Width

@cindex Format field width
@cindex Field widths in formats
@cindex Width of fields in formats
@cindex Formats, field width

The argument will be printed in a field at least this wide, and wider if
necessary.  Padding, if necessary, occurs on the left (or right, if the
@code{-} modifier has been used), and with space (or a zero, if the
@code{0} modifier has been used).

@c ------------------------------------------------------------------
@node Format Precision, Format Grouping, Format Field Width, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection  Format Precision

@cindex Format precision specification
@cindex Precision in formats
@cindex Formats, precision

The meaning of the precision for the various format types is as follows:

@table @code
@item e, E, f
the number of digits to be printed after the decimal point.
@item g, G
the number of significant digits to be printed.
@item z
the number of significant digits to be printed for each of the real and
imaginary parts of the value.
@item d, i, o, u, x, X
the minimum number of digits to be printed (padded with whitespace,
except when the @code{0} modifier is used, which yields padding with
zeros).
@item s, S
the maximum number of string characters to be printed.
@item t, T
the number of sexagesimal elements to print.
@end table

@c ------------------------------------------------------------------
@node Format Grouping, Long output lines, Format Precision, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Format Grouping

Parts of a format string can be separated from the rest through
@emph{format grouping}.  The beginning of a format group is indicated by
@code{%(} and the end by a matching @code{%)}.  Format grouping may be
nested.  A format group end may be followed by a positive integer repeat
count and a pound sign @code{#}.

Some examples:
@example
LUX>fprint,'%(alf)2#a\n'
alfalfa
LUX>fprint,'%($%.2f %)3#combined\n',2.34,4.32,6.75
$2.34 $4.32 $6.75 combined
LUX>fprint,'x:%=d-; y:%3d\n',[1,2,3],[32,11,2]
x:1-; y:2-; y:3 32 11  2
LUX>fprint,'x:%(%=d-); y:%3d\n',[1,2,3],[32,11,2]
x:1-2-3; y: 32 11  2
@end example

See also: @ref{Formatted Input/Output}

@c ------------------------------------------------------------------
@node Long output lines, In-Line Print Formats, Format Grouping, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Long output lines

When generating output, if LUX finds that some text to be printed to the
screen is too long to fit on the current screen line, then it looks for
good places to break the line into pieces that are short enough to each
fit on a separate line on the screen.  If the text to be printed begins
with whitespace, then LUX assumes that you prefer the text to be broken
between punctuation characters (i.e., not alphabetical or numerical or
whitespace characters) or between a non-whitespace character and
whitespace.  If the text does not begin with whitespace, then LUX
assumes that any whitespace in the text is there merely to separate
non-whitespace words, and any whitespace at the beginning of new screen
lines will be suppressed.

If filling up the screen line completely means that LUX's preferences
are not met, then LUX will back up to the last earlier location that
meets the preferences.  For this purpose, LUX assumes the screen to be
@code{!col} characters wide.  The initial value of this variable is
taken from @code{#col}, which itself is determined by the actual width
of your screen or text window when LUX was first started.  You cannot
change @code{#col}, but you can set @code{!col} to any desired value
and thereby change how wide LUX assumes the screen to be.  If you resize
the text window then you must change @code{!col} manually to reflect the
new width.

LUX knows how newlines (@code{\n}) and carriage returns (@code{\r})
affect the cursor position, but assumes that other special characters
(such as @code{\a}, @code{\f}, and @code{\b}) as ordinary characters.
If you use special characters that do not advance the cursor by exactly
one position, then you may not get nicely formatted results.

@c ------------------------------------------------------------------
@node In-Line Print Formats, Output Data Formats, Long output lines, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection In-Line Print Formats

@cindex In-line print formats
@cindex Output format for each data type

@code{print} and its aliases and @code{printf} use format system
variables by default, or in-line format strings if specified.

The format system variables are @code{!format_i}, @code{!format_f},
@code{!format_c}, and @code{!format_s}, for integers, floats, complex
numbers, and strings, respectively.  They may be set by assignment or by
routine @code{format_set}.

A newline is printed after treatment of all arguments, except if keyword
@code{/JOIN} is specified in the call.  Unless you specify keyword
@code{/RAW}, LUX tries to avoid having a word (a sequence of
alphabetical or numerical characters) cross the right edge of the
screen (@ref{Long output lines})

A string argument which starts with one but not two percent signs is
considered an (in-line) format string.  Two inital percent signs are
reduced to one and printed.  An in-line format string may contain many
formats.  For each next argument, the next format entry (if any) will be
copied into the appropriate format symbol.  A format is maintained until
the end of the current argument list or until it is superseded by
another format from the same class (integer, float, or string).

Each argument takes the most recently defined format string that suits
its data type.

See also: @ref{!format_c}, @ref{!format_f}, @ref{!format_i},
@ref{!format_s}, @ref{format_set}, @ref{Output Data Formats},
@ref{print}, @ref{printf}.

@c ------------------------------------------------------------------
@node Output Data Formats, Input Data Formats, In-Line Print Formats, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Output Data Formats

@cindex Output data formats
@cindex Formats for data output

@code{fprint}, @code{fprintf}, and @code{fstring} have a format string
as their first argument (or second in the case of @code{fprintf}).  Each
next argument is mapped to fit the data type requested by the next
format entry in the format string.  The last format entry is repeated as
needed to service all arguments (if there are more arguments than format
entries).  There is no implied newline printed after treatment of the
argument list: A second @code{fprint} starts printing where the first
one left off.

There is one format entry per argument, so all elements of an array are
printed with the same format entry.  String arguments coupled with a
number format are printed as @code{0}.  Number arguments coupled with a
string format are not printed.

LUX accepts most legal C format strings.  LUX format strings consist of
ordinary text, interspersed with format entries, which are made up of a
percent sign (@code{%}), a modifier, the minimum field width, a period
(@code{.}), the precision, and the argument type.  All but the percent
sign and the argument type are optional.  C escape sequences like
@code{\n} are handled properly (@ref{Escape Codes}).

Each format entry comprises some plain text, a %-specification, or a
%-specification with some following plain text, depending on the details
of the %-specification.

The main differences between the LUX format strings and the C format
strings are that LUX but not C features the @code{%J}, @code{%T},
@code{%S}, and @code{%z} formats and @code{_} and @code{=} format
modifiers, and that C but not LUX features @code{%n}, @code{%c}, and
@code{%p} formats.

See also: @ref{Formatted Input/Output}
@c ------------------------------------------------------------------
@node Input Data Formats,  , Output Data Formats, Formatted Input/Output
@comment  node-name,  next,  previous,  up
@subsection Input Data Formats

@cindex Input data formats
@cindex Formats for data input

Routines @code{fread} and @code{freadf} have a format string as their
first (for @code{fread}) or second (for @code{freadf}) argument.  Each
next data value is read according to the next viable format entry in the
format string.

LUX accepts most legal C input format strings, but with some notable
exceptions.  LUX's input format strings consist of whitespace (which
matches that much or more whitespace), ordinary text, which must be
matched by the next non-whitespace input, and format entries.

Ordinarily, each input value consists of the next string of
non-whitespace characters up to the next whitespace or until the
specified field width has been reached, so that whitespace does not
count against field width.  However, if the @code{/COUNTSPACES} keyword
is specified, then LUX does count whitespace against field width.  This
format is suitable for reading data that is aligned on specific columns
but for which no field delimiters are present and for which some values
may be missing.

If the format contains explicit text to be matched but that text is not
present in the expected position in the input, then an error is
generated.

The differences between LUX input formats and C input formats are:

@enumerate
@item Initial whitespace in format specifications is ignored by LUX,
while in C it usually matches any amount of initial whitespace in the
input.
@item Whitespace counts against field width in LUX if the
@code{/COUNTSPACES} keyword is specified.  In C and in LUX (in absence
of the @code{/COUNTSPACES} keyword) whitespace does not count against
field width.
@item LUX format @code{%S}, which reads non-newline characters, is not
available in C.
@item LUX postfices such as @code{6#}, not available in standard C,
indicate that the preceding format must be used 6 times and the result
stored in a single array (if not suppressed through the @code{*}
modifier).
@item LUX does not support the C input format @code{%u} (unsigned
integer).
@item C modifier @code{L} is not supported in LUX.
@item LUX formats @code{%t} and @code{%T} read data in sexagesimal
notation.  This format is not available in C.
@item LUX format @code{%z} reads complex numbers.  This format is not
available in C.
@end enumerate

@c ------------------------------------------------------------------
@menu
* Input Format Types::          Specifying data types for input
* Input Format Examples::       Some examples of input formats
@end menu

@node Input Format Types, Input Format Examples, Input Data Formats, Input Data Formats
@comment  node-name,  next,  previous,  up
@subsubsection Input Format Types

@cindex Input format types
@cindex Types of input formats
@cindex Formats, input types

The format types consist of a single character from the following list.
LUX does not support C types @code{u} (unsigned integer), @code{c}
(character).

@table @code
@item d
Decimal integer.  @code{%hd} generates a @code{word}, @code{%ld} and
@code{%d} generate @code{long}s, @code{%jd} generates a @code{int64}.
@item i
Integer, which may be decimal, octal (leading @code{0}), or hexadecimal
(leading @code{0x} or @code{0X}).  @code{%hi} generates a @code{word},
@code{%li} and @code{%i} generate @code{long}s, and @code{%ji}
generates a @code{int64}.
@item o
Octal integer.  @code{%ho} generates a @code{word}, @code{%lo} and
@code{%o} generate @code{long}s, and @code{%jo} generates a
@code{int64}.
@item x
Hexadecimal integer.  @code{%hx} generates a @code{word}, @code{%lx} and
@code{%x} generate @code{long}s, and @code{%jx} generates an
@code{int64}.
@item e, f, g
Floating-point numbers, consisting of an optional sign, a string of
numbers containing an optional decimal point, and an optional exponent
field containing an @code{e} or @code{E} and an optionally signed
integer exponent.  @code{%e}, @code{%f}, and @code{%g} generate
@code{float}s, @code{%le}, @code{%lf}, and @code{%lg} generate
@code{double}s.
@item s
A string consisting of the next non-whitespace characters (up to the
field width).  The result may be shorter than the field width, if
whitespace or the end of the string intervene.  If no field width is
specified, then the next non-whitespace word is returned.
@item S
A string consisting of the next non-newline characters (up to the field
width).
@item [...]
Matches the longest non-empty string of input characters from the set
between brackets.  If you want to include @code{]} in the set, then
place it directly after the initial @code{[}.  Use a minus sign to
indicate a range of characters, e.g. @code{0-9} for @code{0} through
@code{9}.  If you want to include a minus sign itself, then make it the
last element before the closing @code{]}.
@item [^...]
Matches the longest non-empty string of input characters that are not in
the set between brackets.  If you want to include @code{]} in the set,
then place it directly after the initial @code{[^}.  For the rest,
similar to @code{[...]}
@item T
A number in sexagesimal notation (e.g., times in hours, minutes, and
seconds, or angles in degrees, minutes, and seconds).  The number
consists of two or more numerical components separated by any amount of
non-digits.  Only the first numerical component may be signed.  All but
the last numerical component must be integers; the last one may be
floating-point (with a decimal point and/or exponent).  The first
numerical component counts units and each next numerical component
counts 1/60th as much as the previous one.
@item z
A number in complex notation, consisting of an optionally signed
floating-point number followed by a signed floating-point number
followed by an @code{i} or @code{I}.  The first number indicates the
real part, and the second number the complex part of the result.
@item %
Literal @code{%}.  No assignment is made.
@end table

@c ------------------------------------------------------------------
@node Input Format Examples,  , Input Format Types, Input Data Formats
@comment  node-name,  next,  previous,  up
@subsubsection Input Format Examples

@cindex Input format examples
@cindex Formats, input examples
@cindex Examples of input formats

Here are some examples.  The numerical examples all have an argument
@code{3.14159265}, except for the @code{%t} and @code{%T} examples which
have arguments @code{3,14,15.92}.  The string examples have argument
@code{'alphabet soup'}.  The results are shown as would be produced by
default @code{type}: with at most 6 digits after the decimal point.

@table @code
@item %d
@code{3}
@item %f
@code{3.141593}
@item %5f
@code{3.141}
@item %5-3f
@code{3.141} and @code{592}
@item %T
@code{3.233333} (equivalent to @code{3:14})
@item %.3T
@code{3.237756} (equivalent to @code{3:14:15.92})
@end table

@c ------------------------------------------------------------------
@node Escape Codes,  , Formatted Input/Output, Input/Output
@comment  node-name,  next,  previous,  up
@section Escape Codes

@cindex Escape codes

Some byte values do not have an associated printable character; for
example, the "newline" and "return" characters.  Program code cannot
contain non-printable characters.  To allow such characters to yet be
included in programs, C-style @emph{escape codes} can be used.  An
escape code is introduced by a backslash @code{\}.  The following escape
codes are recognized by LUX:

@table @code
@item \a
stands for the "audible bell" character, which when printed may produce
an audible signal, such as a beep.
@item \b
stands for the "backspace" character, which when printed makes the
cursor go one position to the left.
@item \f
stands for the "formfeed" character, which when printed makes the cursor
go down to the next page.
@item \n
stands for the "newline" character, which when printed makes the cursor
go to the beginning of the next line.
@item \r
stands for the "carriage return" character, which when printed makes the
cursor go to the beginning of the current line.
@item \t
stands for the "horizontal tab" character, which when printed makes the
cursor go to the next horizontal tab stop position.
@item \v
stands for the "vertical tab" character, which when printed makes the
cursor go to the next vertical tab stop position.
@item \\
stands for a single backslash @code{\} character.
@item \?
stands for a question mark @code{?} character.
@item \'
stands for a single quote @code{'} character.
@item \"
stands for a double quote @code{"} character.
@item \ooo
with "ooo" equal to one, two, or three octal digits: stands for a
character whose value is equal to the indicated octal number.
@item \xhh
with "hh" equal to an arbitrary number of hexadecimal digits: stands for
the character whose value is equal to the indicated hexadecimal number.
@end table

@c ------------------------------------------------------------------
@node Syntax, Expressions, Input/Output, Top
@comment  node-name,  next,  previous,  up
@chapter Syntax

@cindex Syntax of LUX
@cindex LUX syntax
@cindex LUX grammar
@cindex Grammar of LUX

This chapter contains a schematic specification of the language syntax
of LUX.  All valid LUX code can be expressed in terms of the following
specification.  The specification consists of a number of rules.  The
word on the left-hand side of the first colon of each rule indicates the
name of the rule, and the text following the colon specify the valid
forms of the rule, separated by vertical bars (|).  Lower-case words
indicate names of other rules.  Upper-case words indicate key LUX syntax
words (such as @code{for} and @code{else}) or names of types of
expressions that can appear at those points (such as @code{filename} or
@code{number}), or the expression @code{(empty)} which means no input,
or @code{c_id}, which stands for a common identifier (one starting with
an alphabetic character), or @code{s_id}, which stands for a special
identifier (one starting with one character out of @code{! $ #}).  Other
characters are expected in the input at the indicated positions.  By
starting at the very first rule (the one named @code{lines}) and
successively replacing rule names by one of their valid forms you can
end up with any valid piece of LUX code.  However, not all possible
output of this set of rules yields valid LUX code: whether some code is
valid depends also on the classes and contents of the variables and
expressions, which is not taken into account in these rules.

@table @code
@item lines:
@code{next_line} | @code{lines} @code{next_line}

@item next_line:
@code{statement} | @code{newline}

@item statement:
@code{assignment} | @code{routine_execution} | @code{routine_definition}
| @code{selection} | @code{loop} | @code{return} @code{opt_arg} |
@code{begingroup} @code{statement_list} @code{endgroup} | @code{break} |
@code{continue} | @code{@@FILENAME} | @code{@@@@FILENAME} |
@code{retall} | @code{run} @code{,} @code{var} | @code{run} @code{var}

@item opt_arg:
@code{(empty)} | @code{,} @code{expr}

@item begingroup:
@code{begin} | @code{@{}

@item endgroup:
@code{end} | @code{@}}

@item assignment:
@code{lhs} @code{=} @code{expr} | @code{lhs} @code{op_assign}
@code{expr}

@item tag_list:
@code{structtag} | @code{tag_list} @code{structtag}

@item member_spec:
@code{(} @code{subsc_list} @code{)} | @code{tag_list} |
@code{member_spec} @code{(} @code{subsc_list} @code{)} |
@code{member_spec} @code{tag_list}

@item lhs:
@code{var} @code{member_spec} | @code{var}

@item var:
@code{c_id} | @code{s_id}

@item struct_list:
@code{struct_element} | @code{struct_list} @code{,}
@code{struct_element}

@item struct_element:
@code{c_id} @code{:} @code{expr} | @code{expr}

@item expr:
@code{number} | @code{string} | @code{lhs} | @code{var} @code{(}
@code{)} | @code{expr} @code{member_spec} | @code{&} @code{var} |
@code{(} @code{range} @code{)} | @code{@{} @code{struct_list} @code{@}}
| @code{@{} @code{@}} | | @code{(} @code{expr} @code{)} | @code{[}
@code{expr_list} @code{]} | @code{expr} @code{+} @code{expr} |
@code{expr} @code{-} @code{expr} | @code{expr} @code{*} @code{expr} |
@code{expr} @code{/} @code{expr} | @code{expr} @code{%} @code{expr} |
@code{expr} @code{^} @code{expr} | @code{expr} @code{>} @code{expr} |
@code{expr} @code{<} @code{expr} | @code{expr} @code{eq} @code{expr} |
@code{expr} @code{ne} @code{expr} | @code{expr} @code{ge} @code{expr} |
@code{expr} @code{gt} @code{expr} | @code{expr} @code{lt} @code{expr} |
@code{expr} @code{le} @code{expr} | @code{expr} @code{and} @code{expr} |
@code{expr} @code{or} @code{expr} | @code{expr} @code{xor} @code{expr} |
@code{expr} @code{&} @code{expr} | @code{expr} @code{|} @code{expr} |
@code{expr} @code{andif} @code{expr} | @code{expr} @code{orif}
@code{expr} | @code{-} @code{expr} | @code{+} @code{expr}

@item expr_list:
@code{expr} | @code{expr_list} @code{,} @code{expr}

@item range:
@code{expr} @code{:} @code{expr} | @code{expr} @code{:} @code{*}
@code{-} @code{expr} | @code{expr} @code{:} @code{*} | @code{*} @code{-}
@code{expr} @code{:} @code{expr} | @code{*} @code{-} @code{expr}
@code{:} @code{*} @code{-} @code{expr} | @code{*} @code{-} @code{expr}
@code{:} @code{*} | @code{*} @code{-} @code{expr} | @code{*}

@item subsc:
@code{range} | @code{range} @code{:} @code{+} | @code{range} @code{:}
@code{>} @code{expr} | @code{+} | @code{>} @code{expr} | @code{expr}
@code{:} @code{>} @code{expr} | @code{expr} @code{:} @code{+}

@item subsc_or_key:
@code{subsc} | @code{expr} | @code{key}

@item subsc_list:
@code{subsc_or_key} | @code{subsc_list} @code{,} @code{subsc_or_key}
			
@item op_assign:
@code{+=} | @code{-=} | @code{*=} | @code{/=}

@item routine_execution:
@code{c_id} @code{s_arglist}

@item s_arglist:
@code{(empty)} | @code{,} @code{arglist}

@item arglist:
@code{arg} | @code{arglist} @code{,} @code{arg}
			
@item key_param:
@code{c_id}

@item key:
@code{key_param} @code{=} @code{expr} | @code{/} @code{key_param}

@item arg:
@code{expr} | @code{key}

@item routine_definition:
@code{subr} @code{c_id} @code{s_paramlist} @code{statement_list}
@code{endsubr} | @code{func} @code{c_id} @code{f_paramlist}
@code{statement_list} @code{endfunc} | @code{block} @code{c_id}
@code{statement_list} @code{endblock}

@item endsubr:
@code{endsubr} | @code{end}

@item endfunc:
@code{endfunc} | @code{end}

@item endblock:
@code{endblock} | @code{end}

@item paramlist2:
@code{paramlist} | @code{paramlist} @code{,} @code{ellipsis}

@item s_paramlist:
@code{(empty)} | @code{,} @code{paramlist2}

@item sf_paramlist:
@code{s_paramlist} | @code{f_paramlist}

@item paramlist:
@code{c_id} | @code{paramlist} @code{,} @code{c_id}

@item statement_list:
@code{statement} | @code{statement_list} @code{statement}
			
@item f_paramlist:
@code{(} @code{)} | @code{(} @code{paramlist2} @code{)} |
@code{s_paramlist}

@item selection:
@code{if} @code{expr} @code{opt_then} @code{statement} @code{opt_else} |
@code{case} @code{case_list} @code{opt_else} @code{endcase} |
@code{ncase} @code{expr} @code{statement_list} @code{opt_else}
@code{endcase}

@item opt_then:
@code{(empty)} | @code{then}

@item opt_else:
@code{(empty)} | @code{else} @code{statement}

@item opt_case_else:
@code{(empty)} | @code{else} @code{statement} | @code{else} @code{:}
@code{statement}

@item case_list:
@code{expr} @code{:} @code{statement} | @code{case_list} @code{expr}
@code{:} @code{statement} 
			
@item loop:
@code{for} @code{c_id} @code{=} @code{expr} @code{,} @code{expr}
@code{opt_step} @code{opt_do} @code{statement} | @code{repeat}
@code{statement} @code{until} @code{expr} | @code{do} @code{statement}
@code{while} @code{expr} | @code{while} @code{expr} @code{opt_do}
@code{statement}

@item opt_step:
@code{(empty)} | @code{,} @code{expr}

opt_do:
@code{(empty)} | @code{do}
@end table

@c ------------------------------------------------------------------
@node Expressions, Statements, Syntax, Top
@comment  node-name,  next,  previous,  up
@chapter Expressions

@cindex Expressions
@cindex Values

An expression is a single value or set of values, or a combination of
several values through an operator such as addition or multiplication,
or through a function call to functions such as the sine function or the
averaging function.

Expressions belong to specific @emph{data classes}, such as scalar,
string, or array, and their value can be stored in a variable.

@c ------------------------------------------------------------------
@menu
* Variables::                   Variables in LUX
* Data Classes::                Classes of data available in LUX
* Operators::                   Basic arithmetic and more
* Function Call::               How to use functions
* Precedence::                  Order of precedence
@end menu

@node Variables, Data Classes, Expressions, Expressions
@comment  node-name,  next,  previous,  up
@section Variables

@cindex Variables
@cindex Named variables

A variable is a name to which a value can be assigned.  In LUX, whenever
you assign a value to a variable, the variable takes on the data class
and type of the value you assigned to it (with the exception of pointer
variables (see @ref{Pointers}).  So, the set of assignments
@example
@code{@var{x}} = 17.3
@code{@var{x}} = 'Jabberwocky'
@end example
first makes variable @code{@var{x}} be a @code{float}, and then a @code{string}.

Names of variables must start with a letter or one of the characters
@kbd{$ ! #}.  Following characters in the names of variables must be
letters, digits, or the character @kbd{_}.  Variables are either local
or global.

Reserved keywords cannot be used as names of variables.

@c ------------------------------------------------------------------
@menu
* Local Variables::             Variables that are local to a routine
* Global Variables::            Variables that are accessible everywhere
* Reserved Keywords::           Words that you cannot use as variable names
@end menu

@node Local Variables, Global Variables, Variables, Variables
@comment  node-name,  next,  previous,  up
@subsection Local Variables

@cindex Local variables
@cindex Variables local to a routine/function

A variable whose name starts with a letter is a @emph{local} variable.
Its scope is limited to the current context (user-defined subroutine or
function, or the main level).  A particular variable that you define at
the main level of execution (i.e., at the @samp{LUX>} prompt) is not
known inside a user-defined subroutine or function.  Likewise, a
variable that you define inside a particular user-defined subroutine or
function is not known inside any other subroutine or function, or at the
main execution level.  This means that you can have different variables
with different values but the same name in different contexts.  You can
define a variable @code{x} at the main execution level, another @code{x}
inside your subroutine @code{mysub}, and another @code{x} inside your
subroutine @code{dothis}, and all of these variables will be distinct.

You can access variables inside a subroutine or function from outside
that subroutine or function by prepending the name of the subroutine or
function and a period (@kbd{.}) to the name of the variable.  In this
case the subroutine or function acts like a structure variable
(@ref{Structures}).  For instance, to inspect from the main execution
level the variable @code{x} inside your subroutine @code{mysub}, type
the following:

@example
T,mysub.x
@end example

Of course, inside the subroutine the variable is called just @code{x}.
This procedure does not work for parameters of user-defined functions
and subroutines: their value is lost when the routine is finished.

See also: @ref{Recursion}

@c ------------------------------------------------------------------
@node Global Variables, Reserved Keywords, Local Variables, Variables
@comment  node-name,  next,  previous,  up
@subsection Global Variables

@cindex Global variables
@cindex Variables, global

A variable whose name starts with one of @kbd{$ ! #} is a @emph{global}
variable: It is available to the user in any context, at the main
execution level, inside user-defined subroutines, and inside
user-defined functions.

Some variables whose names start with a @kbd{#} are predefined read-only
variables.  The user cannot change their value.  These variables contain
constants of nature and the like.  For instance, @code{#pi} returns the
value of pi, the ratio between the circumference and the radius of a
circle in a plane (see @ref{#pi}).

The user can create more global variables whose names start with a
@kbd{#}.  These additional variables are global, their value can be
changed, and they can be deleted again.

Variables whose names start with a @kbd{!} are predefined global
variables.  The user cannot create such variables.  These variables come
in two flavors.  One set is linked to one or more specific subroutines
or functions and either govern some aspect of their behavior, or are
assigned some value by the subroutine or function.  This set of
variables is only important if the corresponding subroutine or function
is called, and their value can be modified by the user.  For instance,
@code{!lastmax} returns the maximum value that was found during the most
recent call to any of the functions @code{min}, @code{max},
@code{minloc}, or @code{maxloc} (see @ref{!lastmax}, @ref{min},
@ref{max}, @ref{minloc}, @ref{maxloc}), and @code{!fftdp} determines if
FFTs are performed in single or double precision.

Variables in the second set are @emph{status functions}, and they are
not linked to any (other) subroutine or function.  They generally
require system I/O during their evaluation and generally yield a
different value each time they are inspected.  For example, @code{!time}
returns a string containing the current time (see @ref{!time}).

Variables whose names start with a @kbd{$} are read-write global
variables.  No such variables are predefined, and the user can create,
modify, and delete such variables just like any local variable.

@c ------------------------------------------------------------------
@node Reserved Keywords,  , Global Variables, Variables
@comment  node-name,  next,  previous,  up
@subsection Reserved Keywords

@cindex Reserved keywords
@cindex Words, reserved

A number of words are reserved by LUX to indicate certain LUX language
features.  The list of reserved words is the following:

@code{and}, @code{andif}, @code{begin}, @code{block}, @code{break},
@code{case}, @code{compileif}, @code{continue}, @code{do},
@code{else}, @code{end}, @code{endblock}, @code{endcase},
@code{endcif}, @code{endfunc}, @code{endsubr}, @code{eq}, @code{for},
@code{func}, @code{ge}, @code{gt}, @code{if}, @code{le}, @code{lt},
@code{mod}, @code{ncase}, @code{ne}, @code{or}, @code{orif},
@code{repeat}, @code{retall}, @code{return}, @code{run}, @code{smod},
@code{subr}, @code{then}, @code{until}, @code{while}, @code{xor}

These words (in any combination of upper case and lower case letters)
cannot be used as names for variables, user-defined subroutines, or
functions, and will generate errors when used as such.  They can be used
as part of literal strings (i.e., @code{t,'break'} is OK; @code{t,break}
is not).

In addition, the words @code{ignore} and @code{resume} are similarly
reserved if they occur as the first word on a line.  They can be used as
named for variables or routines as long as they do not appear as the
first word on a line.  See @ref{Ignoring Input} for more information.

@c ------------------------------------------------------------------
@node Data Classes, Operators, Variables, Expressions
@comment  node-name,  next,  previous,  up
@section Data Classes

@cindex Data classes
@cindex Classes of data

Any value in LUX belongs to a specific data class.  Within a data class,
several data types may be distinguished between.  All data classes (and
the data types within them) that are available to the user are described
below.

@c ------------------------------------------------------------------
@menu
* Undefined::                   Variables without a value
* Scalars::                     A single number
* Strings::                     A string of text
* Arrays::                      A group of similar values
* File Arrays::                 Assigning an array structure to a disk file
* Associated Variables::        Assigning a record structure to a disk file
* Ranges::                      A range
* Compact Lists::               A group of dissimilar values
* Compact Pointer Lists::       A group of pointers to variables
* Lists::                       A group of dissimilar values
* Structures::
* Pointers::                    A pointer to another variable
@end menu

@node Undefined, Scalars, Data Classes, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Undefined Variables

@cindex Undefined variable

There is a data class @code{undefined}, to which variables belong that
currently have no value assigned to them.  Any variable can be made
undefined by using routine @code{delete}.  For example,
@example
DELETE,x
@end example
makes variable @code{x} undefined.  See @ref{delete}.

@c ------------------------------------------------------------------
@node Scalars, Strings, Undefined, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Scalars

@cindex Scalars
@cindex Single numbers

A @code{scalar} is a single number.  The more digits you wish to specify
for a number, the more memory space is required to store that number.
To make efficient use of the limited amount of memory that is available,
LUX offers different numerical @emph{data types}, which offer greater or
smaller ranges of numbers, and so require greater or smaller amounts of
memory for storage.

LUX allows specification of integer numbers in octal (base 8), decimal
(base 10), and hexadecimal (base 16) formats, and floating-point numbers
in decimal and restricted sexagesimal (base 60) notation.  In addition,
LUX allows specification of complex numbers.

@c ------------------------------------------------------------------
@menu
* Numerical Data Types::        How to enter specific numerical values
* Integer Numbers::             How to enter integer values
* Floating-Point Numbers::      How to enter fractional values
* Complex Numbers::             How to enter complex values
@end menu

@node Numerical Data Types, Integer Numbers, Scalars, Scalars
@comment  node-name,  next,  previous,  up
@subsubsection Numerical Data Types

@cindex Numerical data types
@cindex Data types
@cindex Numbers
@cindex BYTE value
@cindex WORD value
@cindex INT value
@cindex LONG value
@cindex INT64 value
@cindex FLOAT value
@cindex DOUBLE value

LUX offers the following numerical data types:
@table @code
@item BYTE
A @code{byte} number requires 8 bits of storage, and can have any
integer value between 0 and 255 (@code{#max_byte} -- @ref{#max_byte} --
inclusive).
@ifinfo
(2^8 - 1),
@end ifinfo
@tex
$2^8-1$,
@end tex
inclusive.

@item WORD
A @code{word} number requires 16 bits of storage, and can have any
integer value between @minus{}32768 (@code{#min_word} --
@ref{#min_word}) and +32767 (@code{#max_word} -- @ref{#max_word})
@ifinfo
(2^15 - 1),
@end ifinfo
@tex
($2^{15}-1$),
@end tex
inclusive.

@item LONG
A @code{long} number requires 32 bits of storage, and can have any
integer value between @minus{}2147483648 (@code{#min_long} --
@ref{#min_long}) and +2147483647 (@code{#max_long} -- @ref{#max_long})
@ifinfo
(2^31 - 1),
@end ifinfo
@tex
($2^{31}-1$),
@end tex
inclusive.

@item INT64
An @code{int64} number requires 64 bits of storage, and can have any
integer value between @minus{}9223372036854775808 (@code{#min_int64}
-- @ref{#min_int64}) and +9223372036854775807 (@code{#max_int64} --
@ref{#max_int64})
@ifinfo
(2^63 - 1),
@end ifinfo
@tex
($2^{63}-1$),
@end tex
inclusive.

@item FLOAT
A @code{float} number requires four bytes of storage, and has a
single-precision floating-point value.  The meaning of "single
precision" depends on the way that floating-point numbers are
represented inside your computer.  On all computers, these values have
at least 6 significant digits, and may have a magnitude at least as
large as
@ifinfo
10^37
@end ifinfo
@tex
$10^{37}$
@end tex
and at least as small as (when larger than zero)
@ifinfo
10^-37.
@end ifinfo
@tex
$10^{-37}$.
@end tex
The largest absolute value representable on your machine as a
@code{float} is equal to @code{#max_float} (@ref{#max_float}).  The
smallest representable non-zero absolute value is equal to
@code{#min_float} (@ref{#min_float}).

On machines that comply with the IEEE 754-1985 standard for binary
floating-point arithmetic, values of type @code{float} may have the
value zero and also values between about
@ifinfo
7*10^-46 (2^-150)
@end ifinfo
@tex
$7\cdot{}10^{-46} (2^{-150})$
@end tex
and
@ifinfo
3*10^38 (2^128),
@end ifinfo
@tex
$3\cdot{}10^{38} (2^{128})$,
@end tex
as well as the special values @code{Inf} (too large for this data
type) and @code{NaN} (Not-A-Number, for undefined results such as the
square root of a negative number; see @ref{isnan}).

@item DOUBLE
A @code{double} number requires eight bytes of storage, and has a
double-precision floating-point value.  As for @code{float} values, the
precision reached depends on your computer.  These values have at least
10 significant digits, and have a range of magnitudes at least as large
as that of a @code{float} value.  The largest and smallest representable
absolute non-zero values of type @code{double} are @code{#max_double}
(@ref{#max_double}) and @code{#min_double} (@ref{#min_double}).

On computers that comply with the IEEE 754-1985 standard for binary
floating-point arithmetic, values of type @code{double} may have the
value zero and also values between about
@ifinfo
1*10^-308 (2^-1075)
@end ifinfo
@tex
$10^{-308} (2^{-1075})$
@end tex
and
@ifinfo
4*10^308 (2^1025),
@end ifinfo
@tex
$4\cdot{}10^{308} (2^{1025})$,
@end tex
as well as the special values @code{Inf} (too large for this data
type) and @code{NaN} (Not-A-Number, for undefined results such as the
square root of a negative number).
@end table

On computers that comply with the IEEE 754-1985 standard, the ratio
@code{1.0/0.0} yields the value @code{Inf} (infinity), and that value is
available in the global variable @code{#infty}.  On computers that do
not allow division by (floating-point) zero, @code{#infty} is equal to
@code{#max_float}.

See also: @ref{#infty}

@c ------------------------------------------------------------------
@node Integer Numbers, Floating-Point Numbers, Numerical Data Types, Scalars
@comment  node-name,  next,  previous,  up
@subsubsection Integer Numbers

@cindex Integer numbers
@cindex Numbers, integer
@cindex Base 8 numbers
@cindex Base 10 numbers
@cindex Base 16 numbers
@cindex Octal numbers
@cindex Decimal numbers
@cindex Hexadecimal numbers
@cindex B at end of hexadecimal numbers

Integer numbers can be specified in three bases, as follows:

@table @asis
@item base 8 (octal).
A set of octal digits followed by @code{o} or @code{o} specifies a
number in base 8.  For example, @code{17o} is equal to 1*8+7 = 15 in
base 10.

@item base 10 (decimal).
A set of decimal digits (@kbd{0-9}) specifies a number in base 10.

@item base 16 (hexadecimal).
A set of hexadecimal digits (@kbd{0-9, a-f, A-F}) preceded by @kbd{0x}
or @kbd{0X}, specifies a number in base 16.  For example, @kbd{0x3a},
and @kbd{0X3A} all specify the same number in base 16, which is equal to
3*16+10 = 58 in base 10.
@end table

By default, an integer number is assumed to have data type @code{long}
(see @ref{Numerical Data Types}).  A non-hexadecimal number can be
specified to be @code{byte} by appending a @code{b} or @code{B} to the
number.  A number in any base is specified to be of type @code{word}
by appending a @code{w} or @code{W}.  Data type @code{long} can be
specified explicitly by appending an @code{l} or @code{L}.  Data type
@code{INT64} is selected by appending a @code{q} or @code{Q}.  For
example, @code{17} and @code{17L} have data type @code{long},
@code{17b} is @code{byte}, and @code{17w} is @code{word}.

The data type specification, if any, follows the base specification, if
any.  The @code{bB} specifier is disallowed for hexadecimal numbers to
prevent confusion between a final hexadecimal digit @code{B} and the
@code{byte} type specifier.

NOTE: With LUX version 3.1.86, the principle has been adopted that the
legality of a character as part of a number specification must be
determinable from that character and perhaps the directly following
character, but not more.  This means that the method of identifying
hexadecimal numbers by appending an @code{X} is now disallowed.

Also, use of the @code{B} data type specifier on hexadecimal numbers was
disallowed starting with LUX version 3.1.86.

@c ------------------------------------------------------------------
@node Floating-Point Numbers, Complex Numbers, Integer Numbers, Scalars
@comment  node-name,  next,  previous,  up
@subsubsection Floating-Point Numbers

@cindex Floating-point numbers
@cindex Single precision floating-point numbers
@cindex Double precision floating-point numbers
@cindex Base 60 numbers
@cindex Sexagesimal numbers

Floating-point numbers can be specified in single or double precision
(@ref{Numerical Data Types}), and also in sexagesimal format (see
below).  The following specification of a single-precision
floating-point number (of data type @code{float}) is of the most general
type available: @code{6.4e-3}.  An upper-case @code{E} may be used
instead of the lower-case @code{e}.  The number following the @code{e}
or @code{E} is the @emph{exponent}, and the number before the @code{e}
or @code{E} is the @emph{mantissa}.  The exponent indicates by what
power of ten the mantissa is to be multiplied.  The current example
involves the number 6.4 divided by 1,000.

The following specifications, which lack parts of the general format,
are also legal for single-precision floating-point numbers:
@code{0.023}, @code{.5}, @code{11.}, @code{7E+3}, @code{17e}.  The first
three examples lack an exponent, but are still @code{float} because a
decimal point was specified.  The third example lacks a decimal point,
but is still @code{float} because an exponent is present.  Note that a
plus sign is allowed (but not necessary) in the exponent.  The fourth
example lacks both a decimal point and an exponent, but is still
@code{float} because the @code{e} marker is present.

Double-precision floating-point numbers (data type @code{double}) are
specified like single-precision numbers, except that the @code{e} or
@code{E} marker is replaced by a @code{d} or @code{D} marker, and this
marker must be present in any explicit specification of a
double-precision number.

A floating-point number can be specified in restricted sexagesimal
notation, for instance @code{23s33:32:11.3}.  The @code{s} flags
sexagesimal interpretation; a decimal number precedes it, and zero or
more colon-separated decimal numbers and an optional final
floating-point number may follow.  The first number counts units of 1,
and each next number counts units that are 1/60th as large as the
previous one.  The final number must not have an exponent, though one
character from @code{dDeE} may follow to indicate @code{float}
(@code{eE}) or @code{double} (@code{dD}) data type.  Besides @code{s},
also @code{S}, @code{h} or @code{H} may be used to indicate sexagesimal
notation.  The @code{S} is equivalent to @code{s}, and the @code{h} and
@code{H} indicate that the result must be multiplied by 15, transforming
hours to degrees, so that @code{24h} is equivalent to @code{360}.

NOTE: The use of the @code{s} and @code{h} specifiers for sexagesimal
numbers is new, starting with LUX version 3.1.89.  Before, colons were
used instead of @code{sS}, and no @code{hH} transformation was
available.

@c ------------------------------------------------------------------
@node Complex Numbers,  , Floating-Point Numbers, Scalars
@comment  node-name,  next,  previous,  up
@subsubsection Complex Numbers

@cindex complex numbers
@cindex numbers, complex
@cindex imaginary numbers

Complex numbers consist of two parts, called the @emph{real} part and
the @emph{imaginary} part.  A complex number that has no imaginary part
is called a real number; A complex number that has no real part is
called an imaginary number.  Any imaginary number can be written as the
product of a real number and the @emph{imaginary unit}.  The imaginary
unit is generally denoted @code{i} in mathematical notation and @code{j}
in engineering texts, and is available in LUX as read-only variable
@code{#i}, and as suffix @code{i} or @code{I} on any non-imaginary
number: @code{2*#i} and @code{2i} are two ways of expressing twice the
imaginary unit.  The imaginary unit is defined such that
@code{#i^2 = -1}.

Complex numbers come in two data types: complex float (@code{cfloat}),
and complex double (@code{cdouble}).  @code{cdouble} is explicitly
indicated by use of the @code{D} specifier (for @code{double}) and the
@code{I} specifier (for imaginary).

Complex numbers have no natural ordering, so there is no obvious way
to decide whether a complex number @code{x} is less than or greater
than another complex number @code{y}.  If @code{x = a + b*#i} and
@code{y = c + d*#i} where @code{a, b, c, d} are real (non-complex)
numbers, then we adopt the rule that @code{x > y} if @code{a + b > c +
d}, and @code{x < y} if @code{a + b < c + d}.  With that rule, the
ordering of @code{cfloat} or @code{cdouble} numbers with their
imaginary part equal to 0 (i.e., so-called purely imaginary numbers)
is the same as the ordering of the corresponding @code{float} or
@code{double} numbers (e.g., @code{1+0i GT -2+0i}, just like @code{1
GT -2}), and the ordering of complex numbers with their real part
equal to 0 is similar to that of real numbers (e.g., @code{1i GT
-2i}).

However, any such rule can lead to somewhat unusual results.  For real
(non-complex) numbers, if both @code{x LT y} and @code{x GT y} are
false, then @code{x EQ y} must be true, and vice versa.  For complex
numbers, that relationship does not necessarily hold anymore.  For
example, with the above rule, @code{x LT y} and @code{x GT y} and
@code{x EQ y} are all false if @code{x = 3+2i} and @code{y = 8-3i},
because 3+2 is equal to 8-3.  So, even though @code{x} is not less
than @code{y}, and @code{x} is not greater than @code{y}, yet @code{x}
is not equal to @code{y}.

The abovementioned ordering rule for complex numbers is used by the
binary relational operators @code{lt}, @code{le}, @code{gt},
@code{ge}, and also by the binary bounding operators @code{>},
@code{<}.

See also: @ref{#i}, @ref{abs}, @ref{real}, @ref{imaginary},
@ref{conjugate}, @ref{fft}, @ref{Binary Relationals}, @ref{Binary
Bounding}

@c ------------------------------------------------------------------
@node Strings, Arrays, Scalars, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Strings

@cindex Strings
@cindex Literal text
@cindex Quotes

A @code{string} is a sequence of arbitrary characters.  A string may
have any (nonnegative integer) length, and takes one byte of storage for
each character.  A string is explicitly specified by enclosing the
characters of the string between single right-hand quotes or between
double quotes, like so:

@example
'a string'
"another string"
@end example

Such an explicit string specification is called a @emph{literal string}.
An empty literal string is specified by two single or double quotes, as
follows:

@example
''
""
@end example

The kind of quote character that introduced the string is referred to as
the @emph{active quote character}.  Within a string delimited by one
kind of quotes, the inactive other kind is treated as a regular
character.  For example:

@example
LUX>t,"It's wonderful!"
It's wonderful!
LUX>
@end example

If you insist on specifying an active quote character as explicit part
of a literal string, then include a pair of such quote characters, as
illustrated by the following example:

@example
LUX>t,'It''s wonderful!'
It's wonderful!
LUX>
@end example

All C-style escape sequences are honored in literal strings.  For
example, @code{\n} inside a literal string is replaced by the newline
character.  All such escape sequences start with a backslash @kbd{\}.
The recognized escape sequences are:

@table @asis
@item \n
A newline character.
@item \t
A horizontal tab character.
@item \v
A vertical tab character.
@item \b
A backspace character.
@item \r
A carriage return character.
@item \f
A form feed character.
@item \a
A bell (audible alert) character.
@item \\
A backslash (@kbd{\}) character.
@item \?
A question mark (@kbd{?}) character.
@item \'
A single quote (@kbd{'}) character.
@item \"
A double quote (@kbd{"}) character.
@item \ooo
The character indicated by the specified octal code (in place of the
@kbd{ooo}) in the native character set of your computer.  The octal
number may have up to three characters: the greatest number up to
three is taken that yields a valid octal number. 
@item \xhh
The character indicated by the specified hexadecimal code (in place of
the @kbd{hh}) in the native character set of your computer.  The
hexadecimal number may have any number of hexadecimal digits.  The
greatest number is taken that yields a valid hexadecimal number, but
you may get unexpected results if you specify more than two of them.
@end table

Internally, these escape sequences are replaced by a byte code that
uniquely identifies them, just as happens to ordinary characters.  O

most if not all computers, newline means "go to the start of the next
line", carriage return means "go to the start of the current line", and
backspace means "go one position closer to the start of the current line
without deleting the current character".  One can extract parts of a
string by using subscripts (@ref{Subscripts}).

@c ------------------------------------------------------------------
@node Arrays, File Arrays, Strings, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Arrays

@cindex Arrays
@cindex Numerical arrays
@cindex Groups of numbers
@cindex Sets of numbers
@cindex String arrays
@cindex Groups of strings
@cindex Sets of strings

An @code{array} is a set of data values of one class and data type.  LUX
offers arrays of @code{scalar}s (see @ref{Scalars}) and arrays of
@code{string}s (see @ref{Strings}).  Each array has a specific
dimensional structure, with up to @code{#max_dims} (usually 8)
dimensions (see @ref{#max_dims}).

@c ------------------------------------------------------------------
@menu
* Specifying Arrays::           How to enter array values
* Combining Arrays::            How to combine arrays into bigger ones
* Referencing Arrays::          How to refer to array elements
@end menu

@node Specifying Arrays, Combining Arrays, Arrays, Arrays
@comment  node-name,  next,  previous,  up
@subsubsection Specifying Arrays

@cindex Specifying arrays
@cindex Arrays, specifying
@cindex Numerical arrays, specifying
@cindex String arrays, specifying

One-dimensional numerical arrays can be specified explicitly by listing
the elements, separated by commas, and enclosed between square brackets,
as shown in the following example:

@example
@code{@var{x}} = [ 5, 7, 13.0, 23 ]
@end example

The data type (see @ref{Numerical Data Types}) of such a numerical
array is the smallest data type that can store all of the elements
while (if both integer and floating-point values are present) losing
as little precision as possible.

For determining the data type of the array, the data types of the
elements are divided into size classes as follows:

@enumerate 1
@item
@code{byte}
@item
@code{word}
@item
@code{long}, @code{float}, @code{cfloat}
@item
@code{int64}, @code{double}, @code{cdouble}
@end enumerate

The data type of the array is in the greatest size class present among
its elements.  Moreover, if any of the elements are complex
(@code{cfloat}, @code{cdouble}), then so is the array.  Otherwise, if
any of the elements are non-complex floating-point (@code{float},
@code{double}), then so is the array.  Otherwise, the array is
integer.

One-dimensional string arrays can be specified in the same way as
numerical arrays are, by combining the string
components.  For instance,
@example
@code{@var{s}} = ['Jill', 'John', 'Joan', 'Jerry Lee Lewis']
@end example
generates a string array with four elements.

Arrays with a specific dimensional structure and data type and with
all of their elements set to zero can be created through the functions
@code{bytarr}, @code{intarr}, @code{lonarr}, @code{int64arr},
@code{fltarr}, @code{dblarr}, @code{cfltarr}, @code{cdblarr},
@code{strarr}, and @code{array} (@ref{array}).  For instance,
@example
@code{x} = FLTARR(200,100)
@end example
creates a @code{float} array with dimensions 200 by 100, with
undefined elements; i.e., the elements get whatever values happen to
be in the memory slots that the elements are assigned to.  You can
fill the array with specific values through, for instance, the
@code{zero}, @code{one}, and @code{indgen} functions (@ref{zero},
@ref{one}, @ref{indgen}).

It is quite easy to request an array that is so large that not enough
room for it is available in your computer, or even so large that the
number of its bytes does not fit in any integer number type that is
available on your computer.  For example, you can request an array with
6 dimensions that are each equal to one million (e.g., through @code{N =
1000000 X = BYTARR(N,N,N,N,N,N)}); such an array is @emph{very much}
bigger than would fit in all the computer memory that exists today in
the whole world.  LUX generates an error message if you request an array
that is too big.

@c ------------------------------------------------------------------
@node Combining Arrays, Referencing Arrays, Specifying Arrays, Arrays
@comment  node-name,  next,  previous,  up
@subsubsection Combining Arrays

@cindex Combining arrays
@cindex Arrays, combining
@cindex Numerical arrays, combining
@cindex String arrays, combining

Arrays can be combined into a single, bigger array through the
@code{concat} (@ref{concat}) or @code{[]} (@ref{Square Brackets})
functions, if each dimension but the last is the same in all component
arrays.  In this function, a scalar is treated as a one-dimensional
array with only one element.  For instance, we can combine a 3-element
array with a scalar to get a 4-element array.  The following two
assignments yield the same result:
@example
x = [[3, 4, 5], 12]
x = [3, 4, 5, 12]
@end example

Arrays can be endowed with an extra dimension by applying the
@code{concat} or @code{[]} function to that array alone.  For instance,
@example
y = [[3, 4, 5]]
@end example
defines a two-dimensional array, with dimensions 3 by 1.  Also legal are
the following assignments:
@example
z = [y, y]
a = [z, y]
@end example
which define a 3-by-2 and a 3-by-3 array, respectively.

@c ------------------------------------------------------------------
@node Referencing Arrays,  , Combining Arrays, Arrays
@comment  node-name,  next,  previous,  up
@subsubsection Referencing Array Elements

@cindex Referencing array elements
@cindex Extracting array elements
@cindex Arrays, referencing elements
@cindex Arrays, extracting elements
@cindex Numerical arrays, referencing elements
@cindex String arrays, extracting elements
@cindex Numerical arrays, referencing elements
@cindex String arrays, extracting elements
@cindex Elements, extracting array

You reference one or more particular elements of an array by
coordinates, ranges, or indices.  See @ref{Subscripts}.

@c ------------------------------------------------------------------
@node File Arrays, Associated Variables, Arrays, Data Classes
@comment  node-name,  next,  previous,  up
@subsection File Arrays

@cindex File arrays
@cindex Arrays, file
@cindex Disk file arrays

A @code{FILE ARRAY} is a variable that assigns an array type and
structure to a disk file, so that you can access and modify the disk
file as if it were an @code{array} (see @ref{Arrays}).  Since
interaction with disk files takes longer than interaction with internal
memory, working with file arrays is slower than working with ordinary
arrays.  However, ordinary arrays are limited in size by the size of
your work memory, whereas file arrays are limited in size by the size of
your hard disk, which is usually much bigger.

You create a file array by using one of the functions @code{bytfarr},
@code{intfarr}, @code{lonfarr}, @code{fltfarr}, @code{dblfarr},
@code{cfltfarr}, or @code{cdblfarr}.  (See @ref{bytfarr}, @ref{intfarr},
@ref{lonfarr}, @ref{fltfarr}, @ref{dblfarr}, @ref{cfltfarr}, and
@ref{cdblfarr}.)  For instance:
@example
@code{z} = FLTFARR('file.dat',200,100)
@end example
creates a @code{float} file array with dimensions 200 by 100, associated
with file @file{file.dat}.  If the file does not exist yet, then it is
created the first time you write data to it.  You use a file array just
like an ordinary array, except that the @code{+} summation flag is not
(yet) implemented for file arrays.

File arrays assume that the data values in the disk file have the byte
order that is appropriate for the current computer system.  FZ files are
always stored in little-endian order, so file arrays reading from FZ
files currently only works on little-endian machines.

@c ------------------------------------------------------------------
@node Associated Variables, Ranges, File Arrays, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Associated Variables

@cindex Associated variables
@cindex Variables, associated with disk file
@cindex Disk file associated variables

An associated variable links a record with a particular array structure
to a logical unit, and allows access to and modification of the file
opened on the logical unit (if any) by records.  No file need be opened
on the logical unit when the associated variable is created.

Create an associated variable with function @code{assoc} (@ref{assoc}).
For instance:
@example
@code{@var{z}} = ASSOC(1, FLTARR(200,300))
@end example
associates a record with the structure of a @code{float} @code{array} of
200 by 300 elements with logical unit number 1.  After such an
assignment, @code{@var{z}(@code{@var{i}})} refers to the @code{@var{i}}th record (of
200 by 300 @code{float} elements) in the file linked to logical unit 1.

@c ------------------------------------------------------------------
@node Ranges, Compact Lists, Associated Variables, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Ranges

@cindex Ranges

A @code{range} is a variable that combines two values.  Ranges are
designed for indicating the start and end of index ranges in subscripts
(@ref{Range Subscripts}), but can be used to hold any kind of data.  A
range variable is defined as follows:

@example
r = (r1:r2)
@end example

In this example, the variables @code{r1} and @code{r2} are the "start"
and the "end" of the range, respectively.  The only operations that can
be performed on ranges other than scalar ranges (see below) are
assignment and extraction of elements.

A scalar range is a range that contains only scalars.  For scalar
ranges, a special notation is available for counting from the end of the
index range.  In either field of a scalar range, @code{@var{expr}}
stands for "count @code{@var{expr}} from the beginning of the index
range", and @code{* - @code{@var{expr}}} stands for "count
@code{@var{expr}} backwards from one beyond the end of the index range".
For instance, if one-dimensional array @code{x} has ten elements, then
@code{x(3:5)} selects the elements with indices 3, 4, and 5, and
@code{x(3:*-3)} selects the elements with indices 3, 4, 5, 6, and 7.  A
single asterisk @code{*} in either field is equivalent with @code{* -
1}.

If only one field is specified but this field contains a @code{*} or
@code{* - @var{expr}} expression, then the variable is treated as a
@code{range} variable.  A single asterisk * indicates the full range and
is equivalent to @code{(0:*)}.  The @code{* - @var{expr}} notation is
equivalent to a range with both fields equal to the specified one.  Such
a range selects only a single element.  When used inside a subscript,
the parentheses can be left off, and two more fields may be added to the
range (@ref{Range Subscripts}).

You can refer to the first two fields of a range variable by appending a
subscript @code{0} (for the first field) or @code{1} (for the last
field) between parentheses @kbd{()}.  For instance, if @code{r} is the
range @code{(10:20)}, then @code{r(0)} is equal to @code{10} and
@code{r(1)} is equal to @code{20}.  If the selected field contains a
@code{* - @var{expr}} entry, then @code{@var{expr}} is returned.  For
instance, if @code{r = (10:*-5)}, then @code{r(1)} yields @code{5}.

You can assign new values to the first two fields of a range variable,
but you cannot change the field's format from ordinary to @code{*} or
the other way around: you have to replace the whole range to achieve
that.  For instance, if @code{r = (10:*-5)}, then @code{r(1) = 3}
changes the value of @code{r} to @code{(10:*-3)}.  To change to
@code{(10:20)}, do @code{r = (10:20)}.  Addition and subtraction
involving ranges act to shift the range over the indicated amount.  For
instance, if @code{r = (10:*-5)}, then @code{r + 2} yields
@code{(12:*-3)}.  Multiplication and division act on each of the range
ends separately, so @code{2*r} yields @code{(20:*-10)}.

@c ------------------------------------------------------------------
@node Compact Lists, Compact Pointer Lists, Ranges, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Compact Lists of Variables

@cindex Compact Lists
@cindex Sets of expressions
@cindex Groups of expressions

A @emph{compact list} (@code{clist}) is a collection of arbitrary values
or variables of arbitrary classes and data types.  Any combination of
data classes and types can be put in a compact list.  A compact list is
a restricted version of a full list (@ref{Lists}).  Any list without
keywords is automatically transformed into a compact list.  A compact
list is created by listing the elements, separated by commas and
enclosed in curly braces.  For example,
@example
x = @{ [22, 12, 3.0], 'computers can be fun', (6:23) @}
y = @{ 'Alpha Centauri', 4.3, 'lightyears' @}
@end example
defines two compact lists.  List @code{x} combines a @code{float}
@code{array} (@ref{Arrays}), a @code{string} (@ref{Strings}), and a
@code{range} expression (@ref{Ranges}), and list @code{y} combines a
@code{string}, a @code{scalar} (@ref{Scalars}), and another
@code{string}.

You can specify a compact list without any elements, as @code{@{@}}.

One can combine different compact lists and other elements into a single
compact list, or into a compact list of lists and other things.
Concatenation using curly braces (@{@}) preserves the structure of all
concatenated elements, whereas concatenation using square brackets ([])
removes the outermost grouping from compact lists, similar to how array
concatenation works.

For instance,
@example
q = [ x, y ]
q = @{ [22, 12, 3.0], 'computers can be fun', (6:23), 'Alpha Centauri',
       4.3, 'lightyears' @}
@end example
are equivalent definitions of a @code{clist} with all elements of
@code{x} and all elements of @code{y} as its elements.  In contrast to
this,
@example
u = @{ x, y @}
@end example
defines a compact list with just two elements: The first element is
compact list @code{x}, and the second element is compact list @code{y}.

One refers to a particular element of a compact list by subscript.  For
example, @code{q(1)}, and @code{u(0)(1)} both refer to the string
@code{'computers can be fun'}.  One can extract more than one element
from a compact list using subscripts, just as for arrays (@ref{Arrays}).
The subscripts may be scalars, ranges, or arrays of indices.

Lists can be used to specify arbitrary number of subscripts to functions
or expressions.  @ref{Lists of Subscripts}.

@c ------------------------------------------------------------------
@node Compact Pointer Lists, Lists, Compact Lists, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Compact Pointer Lists

A @emph{compact pointer list} @code{cplist} is a set of pointers to
variables or expressions.  It currently only occurs in the context of
extended parameter lists in user-defined subroutines and functions.

See also: @ref{Extended Parameter Lists}, @ref{Function Call},
@ref{Subroutine Call}

@c ------------------------------------------------------------------
@node Lists, Structures, Compact Pointer Lists, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Lists

@cindex Lists
@cindex Sets of tagged expressions
@cindex Groups of tagged expressions
@cindex Lists of tagged expressions
@cindex Tagged expressions, sets of

Lists are collections of arbitrary values or variables of arbitrary
classes and data types.  Any combination of data classes and types can
be put in a list.  Each element of a list can have a name tag associated
with it, unlike compact lists (@ref{Compact Lists}).

One specifies a list by listing its elements, separated by commas, and
enclosed in curly braces.  Each element of a list consists of either
just a value, or of a name tag followed by a colon and the value.  For
instance,
@example
a = @{ NAME: 'Alpha Centauri, DISTANCE: 4.3, UNIT: 'lightyears' @}
b = @{ NUMBER: 17, 3.2 @}
@end example
defines a list @code{a} with name tags associated with all values, and a
list @code{b} with a name tag only for the first element.  Values inside
a list need not have an associated name tag, but lists with no name tags
at all associated with their elements are automatically transformed into
@code{list}s.

One can combine different lists and other symbols into a single list, or
into a list of lists and other things.  Concatenation using curly braces
(@code{@{@}}) preserves the list of all concatenated elements, whereas
concatenation using square brackets (@code{[]}) removes the outermost
grouping from lists (both compact and regular), similar to how array
concatenation works (@ref{Arrays}).

For instance,
@example
q = [ a, b ]
q = @{ NAME: 'Alpha Centauri, DISTANCE: 4.3, UNIT: 'lightyears',
NUMBER: 17, 3.2 @}
@end example
are equivalent definitions of @code{q}, whereas @code{u = @{ FIRST: a, b
@}} defines a list @code{u} with two elements which are themselves
lists, too.

One can refer to a particular element of a list by subscript, as for
compact lists, or by name tag.  For example, @code{z(1)} and
@code{z.DISTANCE} both refer to the number 4.3.  One can extract more
than one element from a list using subscripts, just as for compact lists
and arrays (@ref{Arrays}).

Lists can be used to specify arbitrary number of subscripts to functions
or expressions.  @ref{Lists of Subscripts}.

Lists were a late addition to LUX.  By the time they were added, two LUX
read-only constants @code{#r.d} and @code{#d.r} (@ref{#r.d}, @ref{#d.r})
were already in widespread use with names that contained a period.
Disallowing these two names would force all programs that already
contained them to be changed, so these names are retained as the only
exception to the rule that two text strings separated by a period
indicate a member of a list.  Their use is discouraged, however, in
favor of @code{#deg} and @code{#rad} (@ref{#deg}, @ref{#rad}) which
serve the same purpose but do not contain periods.

@c ------------------------------------------------------------------
@node Structures, Pointers, Lists, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Structures

(In development)

@c ------------------------------------------------------------------
@node Pointers,  , Structures, Data Classes
@comment  node-name,  next,  previous,  up
@subsection Pointers to Variables and Routines

@cindex Pointers to other variables
@cindex Other variables, pointers to

There are two kinds of @code{pointer}s: A variable pointer points at
another variable, and a function pointer points at a function or
routine.  Pointers act as aliases of whatever they point at.  Define a
pointer by prefixing an ampersand @kbd{&} to the name of the entity it
is to point at, or by using the routine @code{pointer} (@ref{pointer}).
For example, pointers to a variable @code{y} and a function @code{sin}
are defined as follows:
@example
y = [ 1, 2, 3 ]
z = &y
q = &SIN
POINTER, r, y
@end example

A variable pointer shares the data memory of the entity it points at.
If you assign a value to a variable pointer or to the entity it points
at, then the change is reflected in the other member of the pair as
well.  For instance, after the above assignments @code{y(1)},
@code{z(1)}, and @code{r(1)} all yield the value 2, and after the
assignment @code{y = 17}, all three refer to the value 17.

A function pointer acts in every way like the function or routine it
points at.  For instance, with the assignments mentioned above,
@code{SIN(1)} and @code{q(1)} both yield the same result.

If you use @code{DELETE,z} on pointer @code{z} defined above, then
@code{z} still points at @code{y}, but now @code{y} has data class
@code{undefined} (@ref{Undefined}).  If you use @code{ZAP,z}, then
@code{y} is removed completely, and pointer @code{z} points at nothing.
To break the link between the pointer and whatever it points at, use
@code{DELETE,/POINTER,z}.  This command makes @code{z} undefined, but
leaves whatever @code{z} pointed at unchanged.  To remove pointer
@code{z} completely, use @code{ZAP,/POINTER,z}.  This, too, leaves
whatever @code{z} pointed at unchanged.  To merely change the target of
the pointer, use the @code{pointer} routine.

@c ------------------------------------------------------------------
@node Operators, Function Call, Data Classes, Expressions
@comment  node-name,  next,  previous,  up
@section Operators

@cindex Operators

Operators are instructions like "add" and "multiply" that combine one or
more values (operands) into one other value.  Below is a list of
operators that are available in LUX.  Besides those listed, also the
pointer operator @kbd{&} (@ref{Pointers}) is available.

@c ------------------------------------------------------------------
@menu
* Unary Minus::                 How to add a minus sign to a value
* Unary Plus::                  How to add a plus sign to a value
* Binary Arithmetic::           Standard arithmetic on two values
* Binary Logic::                Logical operations on two values
* Binary Conditionals::         Logical operations with conditional evaluation
* Binary Relationals::          Determining relations between values
* Binary Bounding::             Restricting values to specific ranges
* Structure/List Element::      How to select elements from structures
* Concatenation::               How to combine elements
* Subscripts::                  How to select elements from arrays
@end menu

@node Unary Minus, Unary Plus, Operators, Operators
@comment  node-name,  next,  previous,  up
@subsection Unary Minus

@cindex Unary minus
@cindex Minus, unary

Unary minus is defined for @code{scalar}s and @code{array}s (both real
and complex).  It precedes its operand and changes the sign of the
operand from positive to negative or vice versa.  For example, if
@code{x} equals @code{16}, then @code{-x} equals @code{-16}, and
@code{--x} equals @code{16}.

@c ------------------------------------------------------------------
@node Unary Plus, Binary Arithmetic, Unary Minus, Operators
@comment  node-name,  next,  previous,  up
@subsection Unary Plus

@cindex Unary plus
@cindex Plus, unary

Unary plus is defined for @code{scalar}s and @code{array}s (both real
and complex), but does not do anything.  It precedes its operand and is
available for completeness only.

@c ------------------------------------------------------------------
@node Binary Arithmetic, Binary Logic, Unary Plus, Operators
@comment  node-name,  next,  previous,  up
@subsection Binary Arithmetical Operators

@cindex Binary arithmetic
@cindex Arithmetic, binary
@cindex Addition
@cindex Subtraction
@cindex Multiplication
@cindex Division
@cindex Power taking of expressions
@cindex Taking the power of expressions
@cindex Modulus

Binary arithmetical operators are defined for @code{scalar}s (both real
and complex), @code{array}s (real and complex), and @code{range}s (if
the range elements are numerical), and addition is also defined for
@code{string}s.  The operator goes between the two operands.  The data
type of the result is equal to the highest data type present among the
operands, except where noted.  There is no implicit conjugation when
multiplying or dividing complex numbers.

The available binary operators are:
@table @asis
@item Addition
@code{x + y} adds the values of @code{x} and @code{y} (if they are
numerical) or concatenates the values (if they are @code{STRI
G}s).  For
instance, @code{'alpha' + 'bet'} equals @code{'alphabet'}.

@item Subtraction
@code{x - y} subtracts the value of @code{y} from the value of
@code{x}.

@item Multiplication
@code{x * y} multiplies the values of @code{x} and @code{y}.

@item Matrix multiplication
@code{x # y} multiplies matrix @code{x} and matrix @code{y}.  See
@ref{mproduct}.

@item Division
@code{x / y} divides the value of @code{x} by the value of @code{y}.  If
@code{x} and @code{y} are both integer, then only the integer part
of the division is returned.

@item Power-taking
@code{x ^ y} raises @code{x} to the power @code{y}.  The result is
always of a floating-point data type.

@item Modulus
@code{x MOD y} and @code{x % y} return @code{x} modulus @code{y}, i.e.,
the nonnegative remainder of the division of @code{x} by @code{y}.

@item Signed Modulus
@code{x SMOD y} return the signed remainder of the division of
@code{x} by @code{y}, i.e., the smallest (in absolute terms)
remainder.  If @code{x = 3*y - 1} then @code{x MOD y} yields @code{y -
1} but @code{x SMOD y} yields @code{-1}.

@end table

@c ------------------------------------------------------------------
@node Binary Logic, Binary Conditionals, Binary Arithmetic, Operators
@comment  node-name,  next,  previous,  up
@subsection Binary Logical Operators

@cindex Binary logical operators
@cindex Binary operators, logical
@cindex Logical binary operators
@cindex Logical AND
@cindex Logical OR
@cindex Logical exclusive-OR

Binary logical operators are defined for integer scalars (@ref{Scalars})
and arrays (@ref{Arrays}), and combine corresponding bits in the
operands according to the selected logical operation.  The operator goes
between the two operands.  The data type of the result is the higest
data type present among the operators.

The available logical operators are:
@table @asis
@item Logical And
@code{x AND y} and @code{x & y} combine @code{x} and @code{y} such that
a bit in the result is only equal to 1 if the corresponding bit in
@code{x} is equal to 1 and if the corresponding bit in @code{y} is equal
to 1.

@item Logical Or
@code{x OR y} and @code{x | y} combine @code{x} and @code{y} such that a
bit in the result is equal to 1 if the corresponding bit in @code{x} is
equal to 1 or if the corresponding bit in @code{y} is equal to 1.

@item Logical Exclusive-Or
@code{x XOR y} combines @code{y} and @code{y} such that a bit in the
result is equal to 1 if the corresponding bit in @code{y} is unequal to
the corresponding bit in @code{y}.
@end table

@c ------------------------------------------------------------------
@node Binary Conditionals, Binary Relationals, Binary Logic, Operators
@comment  node-name,  next,  previous,  up
@subsection Binary Logical Conditional Operators

@cindex Binary logical conditional operators
@cindex Logical operators, binary conditional
@cindex Conditional operators, binary logical
@cindex Logical AND, conditional
@cindex Logical OR, conditional

Binary conditional operators are defined for integer scalars
(@ref{Scalars}).  They are somewhat similar to the corresponding binary
logical operators (@ref{Binary Logic}) but suppress evaluation of the
second operand if the first operand is sufficient to determine the value
of the whole expression.

The available conditional operators are:
@table @asis
@item Conditional And
@code{x ANDIF y} yields 0 if @code{x} is equal to zero (and then
@code{y} is not evaluated), and yields 1 if both @code{x} and @code{y}
are unequal to zero.  These results are the same as returned by @code{x
NE 0 AND y NE 0} (@ref{Binary Relationals}), except that @code{y} is not
evaluated if @code{x} is equal to zero, for then the value of the whole
expression is zero regardless of the value of @code{y}.

@item Conditional Or
@code{x ORIF y} yields 1 if @code{x} is unequal to zero (and then
@code{y} is not evaluated), and yields 0 if both @code{x} and @code{y}
are equal to zero.  These results are the same as returned by @code{x NE
0 OR y NE 0}, except that @code{y} is not evaluated if @code{x} is
unequal to zero, for then the value of the whole expression is zero
regardless of the value of @code{y}.
@end table

Conditional operators provide short-hand notation for certain IF
statements:
@example
IF x THEN
  IF y THEN statement
@end example
can be rewritten
@example
IF x ANDIF y THEN statement
@end example
and 
@example
IF @code{@var{x}} THEN
  statement
ELSE IF @code{@var{y}} THEN
  statement
@end example
can be rewritten
@example
IF @code{@var{x}} ORIF @code{@var{y}} THEN statement
@end example

Such @code{if} statements (and therefore the use of conditional
operators) is useful if @code{y} is expensive to calculate or if it may
lead to an error when @code{y} is nonzero.  For example, in the @code{if}
statement
@example
IF z EQ 0 ORIF 123/z GT 5 THEN T,'OK'
@end example
the @code{orif} operator prevents division by zero in @code{123/z} if
@code{z} is equal to zero, and in the @code{if} statement
@example
IF ok EQ 17 ANDIF EXPENSIVE(x + 2) THEN T,'OK'
@end example
the @code{andif} operator prevents evaluation of @code{EXPENSIVE(x + 2)}
if @code{ok} is not equal to 17.

@c ------------------------------------------------------------------
@node Binary Relationals, Binary Bounding, Binary Conditionals, Operators
@comment  node-name,  next,  previous,  up
@subsection Binary Relational Operators

@cindex Binary relational operators
@cindex Relational operators, binary
@cindex Equal to
@cindex Unequal to
@cindex Greater than
@cindex Less than
@cindex Greater than or equal to
@cindex Less than or equal to
@cindex Not equal to
@cindex Comparing values

Binary relational operators are defined for (real or complex) scalars
(@ref{Scalars}) and numerical arrays (@ref{Arrays}) and for strings
(@ref{Strings}).  They compare the values of the operands, and return
either a 1 or a 0, depending on whether the operands do or do not
posess the relation implied by the operator.  For string operands,
relations are tested based on the byte codes used internally by your
computer to represent the characters.  Most computers nowadays use
ASCII code for that, but some IBM mainframes use a different format.
In both of these formats, letters are compared based on alphabetical
order.  If the second string is equal to the first one with some more
characters appended, then the second string is considered to lie
closer to the end of the alphabet than the first string.  When testing
for relative order involving one or more complex numbers, an ordering
based on projection on 1+i is used, such that the usual ordering holds
on the real and imaginary axes of the complex plane (e.g., @code{1 GT
-1} and @code{#i GT -#i}; see @ref{Complex Numbers}.

The following relational operators are available:

@table @asis

@item Equal To
@code{x EQ y} returns 1 if @code{x} is equal to @code{y}.

@item Unequal To
@code{x NE y} returns 1 if @code{x} is unequal to @code{y}.

@item Greater Than
@code{x GT y} returns 1 if @code{x} is greater than @code{y}.

@item Greater Than Or Equal To
@code{x GE y} returns 1 if @code{x} is greater than or equal to @code{y}.

@item Less Than
@code{x LT y} returns 1 if @code{x} is less than @code{y}.

@item Less Than Or Equal To
@code{x LE y} returns 1 if @code{x} is less than or equal to @code{y}.
@end table

For example, the following relations are all true:
@example
6 GT 3
-6 LE -3
'Jill' LT 'John'
'Apple' NE 'Apples'
'Apples' GT 'Apple'
@end example

@c ------------------------------------------------------------------
@node Binary Bounding, Structure/List Element, Binary Relationals, Operators
@comment  node-name,  next,  previous,  up
@subsection Binary Bounding Operators

@cindex Binary bounding
@cindex Bounding values
@cindex Restricting values to ranges
@cindex Ranges, restricting values to
@cindex Lower bound
@cindex Upper bound

Binary bounding operators are defined for @code{scalar}s (both real and
complex) and @code{array}s (both real and complex).  They restrict their
operands to a range of values.  The following two operators are
available:

@table @asis

@item Lower Bound
@code{x < y} returns the smaller (i.e. closer to @minus{}Infinity, for
real numbers) of @code{x} and @code{y}.

@item Upper Bound
@code{x > y} returns the larger (i.e. closer to +Infinity, for real
numbers) of @code{x} and @code{y}.

@end table

Comparison of complex numbers is based on their projection on 1+i; see
@ref{Complex Numbers}.

So, to restrict all elements of an array @code{x} to between the values
of 20 and 33, use @code{x > 20 < 33}.

@c ------------------------------------------------------------------
@node Structure/List Element, Concatenation, Binary Bounding, Operators
@comment  node-name,  next,  previous,  up
@subsection Structure and List Elements

@cindex Structure element
@cindex List element
@cindex Element, structure
@cindex Element, list

Individual elements of structures and lists are extracted through the
@code{.} operator, or through regular subscripts.  See @ref{Lists} and
@ref{Structures}.

@c ------------------------------------------------------------------
@node Concatenation, Subscripts, Structure/List Element, Operators
@comment  node-name,  next,  previous,  up
@subsection Concatenation

@cindex Concatenation
@cindex Combining
@cindex Strings, combining
@cindex Lists, combining
@cindex Structures, combining

The concatenation operators @code{[]} (the function @code{concat} is an
alias) and @code{@{@}} combine elements into larger units, either
(numerical or @code{string}) @code{array}s, @code{list}s, or
@code{struct}ures.

Concatenation of @code{string}s is performed by addition (@ref{Binary
Arithmetic}).

See also: @ref{Square Brackets}, @ref{concat}, @ref{Arrays},
@ref{Lists}, @ref{Structures}, @ref{Combining Arrays}

@c ------------------------------------------------------------------
@node Subscripts,  , Concatenation, Operators
@comment  node-name,  next,  previous,  up
@subsection Subscripts

@cindex Subscripts
@cindex Element selection
@cindex Selecting elements from groups

A subscript is a device that selects certain elements from a set such as
an array (@ref{Arrays}), file array (@ref{File Arrays}), string
(@ref{Strings}) or associated variable (@ref{Associated Variables}).
You refer to one or more particular elements of a set by coordinates,
coordinate arrays, ranges, indices, or lists.  Coordinate array
subscripts, scalar subscripts, and range subscripts can be mixed freely.
Not just variables of the appropriate kinds, but also expressions of
those kinds can be subscripted.

If only a single subscript is specified (i.e., for a single dimension)
and the @code{/ALL} keyword is not specified, then the source is treated
as if it had only one dimension (containing all of its elements).

The result of the subscription has the same number of dimensions as the
subscripted variable, except that those dimensions of the result that
are equal to 1 are omitted, unless keyword @code{/KEEPDIMS} is used.

See also: @ref{Insertion}

@c ------------------------------------------------------------------
@menu
* Coordinate Subscripts::       Specifying elements by coordinates
* Index Subscripts::            Specifying elements by array index
* Range Subscripts::            Specifying elements by ranges
* Lists of Subscripts::         Specifying arbitrary numbers of arguments
* Multiple Subscripts::         Specifying elements in multiple dimensions
* Fractional Subscripts::       Specifying fractional coordinates
* Expression Subscripts::       Applying subscripts to expressions is OK
@end menu

@node Coordinate Subscripts, Index Subscripts, Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Coordinate Subscripts

@cindex Coordinate subscripts
@cindex Subscripts, coordinate

Reference to particular elements of an array by coordinates is done by
appending to the array the coordinates of the desired element, separated
by commas and enclosed in parentheses.  The coordinates of the first
element of an array are all equal to zero.  For instance, you select the
first element of a one-dimensional array named @code{y} by @code{y(0)},
the second element by @code{y(1)}, etcetera.  The elements of a 3-by-2
array named @code{u} are referred to as @code{u(0,0)}, @code{u(1,0)},
@code{u(2,0)}, @code{u(0,1)}, @code{u(1,1)}, and @code{u(2,1)}.

The same holds also for file arrays (@ref{File Arrays}).  Associated
variables (@ref{Associated Variables}) and strings (@ref{Strings})
allow only one coordinate.

If the @code{/SEPARATE} keyword is used, then the elements of a single
subscript of a numerical @code{array} type are interpreted as if each
was specified as a separate scalar.  In that case, only the single array
is allowed as a subscript, and it must have exactly one element for each
dimension of the source data, unless @code{/ZERO} or @code{/ALL} are
specified (@ref{Multiple Subscripts} for those keyword).  For example,
if @code{x} is a three-dimensional numerical array, then
@code{x([2,4,5], /SEPARATE)} is equivalent to @code{x(2,4,5)}.

@c ------------------------------------------------------------------
@node Index Subscripts, Range Subscripts, Coordinate Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Index Subscripts

@cindex Index subscripts
@cindex Subscripts, index

Reference to one or more particular elements of an array by index
entails appending the single index (or single array of indices) of the
desired element(s) to the array, between parentheses.  The elements of a
multi-dimensional array are stored with higher dimensions changing
slower than lower dimensions.  For example, the elements of a
3-by-2-element array @code{u} are stored in the order @code{u(0,0)},
@code{u(1,0)}, @code{u(2,0)}, @code{u(0,1)}, @code{u(1,1)},
@code{u(2,1)}, and the fourth element can be referred to both as
@code{u(0,1)} and as @code{u(3)}.  The notation @code{u([2,3,5])}
extracts the 3rd, 4th, and 5th elements of array @code{u} (because the
first element has index 0).

Index subscripts can also be applied to file arrays (@ref{File Arrays})
and to strings (@ref{Strings}).

@c ------------------------------------------------------------------
@node Range Subscripts, Lists of Subscripts, Index Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Range Subscripts

@cindex Range subscripts
@cindex Subscripts, range

One can refer to a number of adjacent elements of an array
(@ref{Arrays}) by specifying in the concerned dimension(s) a range of
coordinates rather than a single one (as in @ref{Coordinate
Subscripts}).  Such a range subscript consists of a range variable or a
range expression (@ref{Ranges}) with some modifications.  Firstly,
parentheses around the range expression are not needed when they are
used as a subscript.  Secondly, two more optional fields are added to a
range expression in a subscript.

The most general range subscript looks like this:
@example
 r1:r2:+:>d
@end example
@code{r1} and @code{r2} are the range's start and end coordinates, and may
be replaced by a single range variable.  The plus sign in the optional
third field indicates that all elements in the range must be added up,
and only the result is returned.  The optional fourth field indicates
that the extracted range must be moved to dimension number @code{d}
(starting at zero) in the result.

Regard the following examples, with @code{x} a 3-by-4 array:
@example
 x(2:3,2)
 x(*,2:*)
 x(+,2)
 x(>1,>0)
@end example

The first example extracts the elements with coordinates @code{(2,2)}
and @code{(3,2)}, i.e. a 2-element one-dimensional array.  The second
example extracts all elements with their second coordinate equal to 2 or
3, i.e. a 3-by-2 array.  The third example adds all elements with their
second coordinate equal to 2 and returns the result, which is a scalar.
The last example moves dimension number 1 to dimension number 0 and vice
versa: It transposes the array.

You cannot specify both the summation (3rd) and redirection (4th)
fields, since the summation flagged by the plus sign in the third field
removes the corresponding dimension, which can then no longer be
redirected.  If you want to sum or redirect all elements in a particular
dimension, then you don't need to specify the first two fields.

Range subscripts can be applied to arrays, file arrays (@ref{File
Arrays}), and strings (@ref{Strings}), except that file arrays don't
support the summation field, and strings only support the range start
and end fields.

@c ------------------------------------------------------------------
@node Lists of Subscripts, Multiple Subscripts, Range Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Lists of Subscripts and Arguments

@cindex Lists as subscripts
@cindex Structures as subscripts
@cindex Variable numbers of subscripts
@cindex Subscripts, lists of
@cindex Subscripts, variable numbers of
@cindex Arguments, variable numbers of

The elements of lists (@ref{Lists}) and structures (@ref{Structures}) in
argument lists can be interpreted by LUX as individual arguments rather
than as members of a single argument.  This is a mechanism for
specifying arbitrary numbers of arguments, and for assembling argument
lists on the fly.  For LUX to interpret lists and structures as such,
they must themselves contain a single list or structure.  This way we
can distinguish between the case where the user wants to specify a list
or structure as a single argument, and the case where the user wants to
specify a list or structure as a set of arguments, without causing too
much trouble.

For example, @code{FOO( x, y, @{ @{ a, b @} @}, z)} is interpreted as
@code{FOO( x, y, a, b, z)}, but in @code{FOO( x, y, @{ a, b @}, z)}, the
list is a single argument.  If @code{q} is equal to @code{@{ a, b @}},
then @code{FOO( x, y, @{ q @}, z)} is interpreted as the first example
above, and @code{FOO( x, y, q, z)} like the second one.

Lists and structures contained within a list or structure that is
interpreted as a set of arguments are also expanded into arguments: the
expansion is performed one level at a time.

This method can be used to support functions with variable number of
arguments.  For example, suppose you want to write a function that
constructs a file name by combining an arbitrary file name format with
the corresponding number of arguments.  You want your function to be
able to deal with any file name format and any corresponding number of
arguments.  Using lists of arguments, this can be done as follows:

@example
 FUNC FILENAME(format,args)
   RETURN,FSTRING(format, @{ @{args@} @})
 ENDFUNC
@end example

The enclosure of @code{args} in double curly braces in the function
definition ensures that this argument is expanded into a list of
arguments.  The call @code{filename('file%03d',7)} now returns
@code{'file007'}, and @code{filename('file-%s-%03d',@{'second',7@})}
yields @code{'file-second-007'}.  The two arguments @code{'second'} and
@code{7} must be enclosed in curly braces.

@c ------------------------------------------------------------------
@node Multiple Subscripts, Fractional Subscripts, Lists of Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Multiple Subscripts

@cindex Multiple subscripts
@cindex Subscripts, multiple
@cindex Combining subscripts
@cindex Inner-style subscript combination
@cindex Outer-style subscript combination

You can use any of the different types of coordinate specifications
(scalar, range, array) for any of the coordinates.  If more than one
multiple-element coordinate is present, then the multiple-element
coordinates can be combined in two different ways: as a generalized
inner product (inner-style, selected by keyword @code{/INNER}) or a
generalized outer product (outer-style, selected by keyword
@code{/OUTER}).

If neither of these keywords is specified, then @code{/OUTER} is assumed
if none of the subscripts has more than one dimension, and @code{/INNER}
otherwise.

In the outer style, all combinations of array elements (one from each
multiple-element coordinate) are serviced and the dimensional structure
of the coordinate arrays is copied to the result.  For instance, if
@code{x} is an array of four by four elements, then
@code{x([1,2,3],[0,3])} is an array of three by two elements, and the
elements are (in increasing order of their index) @code{x(1,0)},
@code{x(2,0)}, @code{x(3,0)}, @code{x(1,3)}, @code{x(2,3)},
@code{x(3,3)}.  In this particular example, the same result would have
been obtained through @code{x(1:3,[0,3])}.

Redirection and summation as in range subscripts (@ref{Range
Subscripts}) may be applied to outer-style array subscripts.
Redirection specifies how to rearrange the sets of dimensions of the
subscripts, not the dimensions of the result.  With redirection you can
change where the dimensions of a particular subscript end up relative to
the dimensions of the other subscripts, but the order of dimensions of
each subscript is preserved.  For example, if @code{c1} is a 2-by-3
array and @code{c2} a 4-element array, then @code{z(c1, c2)} is an array
with dimensions 2 by 3 by 4 (the 2 by 3 coming from @code{c1} and the 4
from @code{c2}), and @code{z(c1:>1, c2:>0)} an array with dimensions 4
by 2 by 3 (i.e., the dimensions of @code{c1} have been moved relative to
those of @code{c2}, but the dimensions of @code{c1} are in the same
relative order).

In the inner style (keyword @code{/INNER}), all multiple-element
coordinates must have the same number of elements and the next element
of all multiple-element coordinates is taken for each next output
element.  For example, with the previously defined @code{x},
@code{x([1,2],[3,4],/INNER)} is an array of two elements, equal to
@code{[x(1,3), x(2,4)]}.  The dimensional structure of the result is
equal to the dimensional structure of the first non-scalar subscript (a
range is considered equivalent to a one-dimensional array in this case).

Redirection and summation are not implemented for inner-style array
subscripts, because the dimensional structure of the result is not
related to the number of subscripts.

Combination subscripts can also be applied to file arrays (@ref{File
Arrays}) and to strings (@ref{Strings}).

It is an error to specify fewer coordinate arguments than there are
dimensions in the subscripted variable, except if you specify one
coordinate argument (@ref{Index Subscripts}) or if you specify one of
the keywords @code{/ZERO} and @code{/ALL}.  If you specify @code{/ZERO},
then all unspecified coordinates are assumed equal to zero.  For
instance, if @code{x} is an array with 3 by 2 by 5 by 3 elements, then
@code{x(2,1,/ZERO)} is equivalent to @code{x(2,1,0,0)}.  If you specify
@code{/ALL}, then all unspecified coordinates are assumed equal to
@code{*}.  For example, with the same @code{x} as before,
@code{x(2,1,/ALL)} is equivalent to @code{x(2,1,*,*)}.

@c ------------------------------------------------------------------
@node Fractional Subscripts, Expression Subscripts, Multiple Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Fractional Subscripts

@cindex Fractional subscripts
@cindex Subscripts, fractional

The @code{/SUBGRID} keyword in

@code{x(@var{subscripts}, /SUBGRID)}

forces linear interpolation in @code{x} at the specified coordinates.
Without this keyword, floating-point subscripts are converted to integer
type and the elements corresponding to those integer subscripts are then
extracted from the source variable.

This keyword can only be used with numerical arrays @code{x}, and only
numerical arrays and scalars are allowed as subscripts.  The result is
@code{doube} if @code{@var{x}} is @code{double}, and @code{float}
otherwise.  If @code{/SUBGRID} is specified, then @code{/INNER} is
implied.  For example, @code{x([1.2,2.3], [3.3,4.1], /SUBGRID)} is
equivalent to @code{[x(1.2, 3.3, /SUBGRID), x(2.3, 4.1, /SUBGRID)]}.

@c ------------------------------------------------------------------
@node Expression Subscripts,  , Fractional Subscripts, Subscripts
@comment  node-name,  next,  previous,  up
@subsubsection Expression Subscripts

@cindex Expression subscripts
@cindex Subscripted expressions

Arbitrary expressions can be subscripted; not just named variables.  For
instance, expressions such as @code{MEAN(x,1)(>1,>0)} and
@code{HIST(y)(7:13)} are perfectly allright.

@c ------------------------------------------------------------------
@node Function Call, Precedence, Operators, Expressions
@comment  node-name,  next,  previous,  up
@section Function Call

@cindex Function call
@cindex Function evaluation
@cindex Calling a function
@cindex Evaluating a function

A function is a piece of code that returns a value, depending on the
values the user specifies for the parameters of the function, if any.
LUX offers many built-in functions (@ref{Internal Routines}), and also
allows you to define and call your own functions, written in the LUX
language (@ref{Function Definition}).

A general function call consists of the name of the function, followed
by a pair of parentheses enclosing the arguments (if any), which are
separated by commas.  Some functions can be called without any
arguments, but the parentheses must be specified also in this case.

See @ref{Arguments} to learn about the various ways to specify arguments
to a function.

If the function name in a function call is not one of the names of a
built-in function or of an already defined user-defined function, then
LUX tries to find a file that contains a definition for the as yet
undefined function.  LUX looks for a file with the same name as the
function, in lower-case letters, and with the @file{_f.lux} suffix
added.  LUX looks for this file in the current directory, in the
directory, if any, that was specified using @code{ulib} (@ref{ulib}),
and in the directories which are listed, separated by colons (@kbd{:}),
in the environment variable @code{lux_path} (see @ref{Environment}).  If
such a file is found, then it is included at this point.  If the sought
function is still not defined after the file has been included, then an
error message is displayed.

A function is required to return a value (using the @code{return}
command -- @ref{return}).  If the end of a function is reached and no
value has been @code{return}ed, then an error is generated.

Some functions can be called with more arguments than it has parameters.
See @ref{Extended Parameter Lists} for details.

@c ------------------------------------------------------------------
@menu
* Arguments::                   Arguments to subroutines and functions
* Recursion::                   LUX allows recursion of routines
@end menu

@node Arguments, Recursion, Function Call, Function Call
@comment  node-name,  next,  previous,  up
@subsection Arguments to Functions and Subroutines

@cindex Arguments to functions and routines
@cindex Parameters of functions and routines
@cindex Functions, arguments
@cindex Routines, arguments
@cindex Subroutines, arguments

The @emph{parameters} to a function or a subroutine are the variables,
local to the routine, that the user can specify values for and that are
referred to inside the function or subroutine.  The @emph{arguments} are
the values that the user specifies for these parameters.

The arguments of a routine can be specified in various ways.  In
addition, you may leave some or all arguments to a subroutine or
function unspecified.

@menu
* Argument Specification::      How to specify arguments
* Empty Arguments::             How unspecified arguments are handled
@end menu

@c ------------------------------------------------------------------
@node Argument Specification, Empty Arguments, Arguments, Arguments
@comment  node-name,  next,  previous,  up
@subsubsection Argument Specification

@cindex Argument specification
@cindex Parameters, specifying values for
@cindex Functions, argument specification
@cindex Routines, argument specification
@cindex Subroutines, argument specification
@cindex Specification of arguments
@cindex Keyword arguments
@cindex Keyword assignment

The parameters of a subroutine or function have a definite order.  The
arguments of the routine can be specified in three ways:

@table @asis
@item By Position
Any expression can be used as an argument to a routine.  Each argument
is linked to a parameter of the routine in the order of specification.
I.e., the first argument is assigned to the first parameter, the second
argument to the second parameter, and so on.

@item By Keyword Assignment
Some (if any) of the parameters of a built-in routine have a keyword
associated with them.  You can specify a value for such a parameter by
assigning that value to the keyword associated with the parameter.  For
instance, if the third parameter of routine @code{myfunc()} has keyword
@code{data} associated with it, then @code{myfunc(data=5)} assigns the
value 5 to that third parameter.

All parameters of user-defined subroutines and functions automatically
act as keywords, too.  For example, if @code{userfunc()} is a
user-defined function with parameters @code{x} and @code{y}, then
@code{userfunc(y=3)} assigns the value @code{3} to parameter @code{y}.

@item By Keyword Switch
Some built-in routines have special keyword switches to which no value
can be assigned, but which either select or deselect a particular
feature of the routine.  Specify such a keyword switch by prepending the
name of the switch by @code{/} if you want to select the corresponding
feature, or by @code{/no} if you want to deselect the corresponding
feature.  For instance, @code{differ(x,3)} returns the third-order
forward difference of array @code{x}, and keyword switch @code{/central}
in @code{differ(x,3,/central)} modifies the forward difference to
a central difference.

The same notation can also be used for keywords that do accept values
(including all parameters of user-defined functions and subroutines).
For such a keyword, @code{/keyword} is equivalent to @code{keyword=1},
and @code{/nokeyword} is equivalent to @code{keyword=0}.
@end table

These three different ways of specifying parameters can be mixed.
Keyword switches and keyword assignments can be specified in any order
and anywhere between the other types of arguments.  Keyword switches are
ignored during the assignment of the other arguments to the routine's
parameters.  The position of the other types of arguments has no
influence on the assignment of arguments-by-position to parameters.  For
instance, the following function calls are all equivalent (assuming that
keyword @code{data} is associated with the third parameter):

@example
myfunc(x, y, z, /fast)
myfunc(data = z, x, /fast, y)
myfunc(/fast, x, y, z)
@end example

It is illegal to specify more than one value for a single parameter.
For instance, the function call @code{myfunc(x, y, z,
/fast, data = 5)} (with @code{myfunc} as described above) is illegal,
because two arguments are specified for the third parameter, namely
@code{z} and @code{5}.

@c ------------------------------------------------------------------
@node Empty Arguments,  , Argument Specification, Arguments
@comment  node-name,  next,  previous,  up
@subsubsection Empty Arguments

@cindex Empty arguments
@cindex Arguments, empty
@cindex Parameters, empty

You may specify no value for some or all of the arguments to a function
or subroutine.  What happens in that case depends on the routine or
function.  Some of the arguments to the routine may be required.  If you
do not specify a value for such an argument, then an error is generated.

For some of the arguments to a routine a default value may be specified
inside the routine.  In that case, if the user specifies no value for
that argument, then the default value is used instead as if the user
specified that value.

Default values can be assigned to arbitrary variables (including
parameters of user-defined subroutines and functions) using either the
@code{default} subroutine (@ref{default}) or the @code{defined} function
(@ref{defined}).  For instance,
@example
  default,x,2
  if not(defined(x)) then x = 2
@end example
both assign the value 2 to variable @code{x} if it was undefined before.
If @code{x} is a pointer (@ref{Pointers}) or a parameter to a
user-defined subroutine or function, then it is considered to be
undefined if it is ultimately linked to a value that is undefined.
Global variables (@ref{Global Variables}) are treated in the same way.

Inside a user-defined subroutine or function the parameters of the
routine must be distinguished from the other variables, because we must
be able to tell the difference between the case where the user did not
specify a value for the parameter and the case where the user did
specify a value but the value happens to be undefined.  The use of the
@code{defined} function as above would return 0 in both of these cases.

@code{DEFINED(x, /TARGET)} returns 1 if @code{x} is a pointer, and
if @code{x} is a parameter to a user-defined function or subroutine for
which the user has specified a value (even if that value happens to be
undefined).

Consider the following example:
@need 800
@example
  subr foo,x
    t,defined(x),defined(x,/argument)
    fie,x
  endsubr

  subr fie,a
    t,defined(a),defined(a,/argument)
  endsubr
@end example

If one executes @code{foo,5} then one gets @code{1, 1, 1, 1} as result,
because the parameters @code{x} of @code{foo} and @code{a} of @code{fie}
have the value @code{5}.  If one executes @code{foo,z} where @code{z} is
undefined, then one gets @code{0, 1, 0, 1}, because a value was defined
for the parameters, but that value is undefined.  If one executes
@code{foo} without any argument, then one gets @code{0, 0, 0, 0},
because the user did not specify a value for any of the parameters.

Note that zeros are returned by @code{fie} in this case even though an
argument to @code{fie} was specified in @code{foo}: the argument to
@code{fie} in @code{foo} itself did not have a user-specified value, and
this property is inherited by the parameter of @code{fie}.

@c ------------------------------------------------------------------
@node Recursion,  , Arguments, Function Call
@comment  node-name,  next,  previous,  up
@subsection Recursion

@cindex Recursion
@cindex Functions calling themselves
@cindex Routines calling themselves
@cindex Subroutines calling themselves

Recursion is the act of calling a routine (subroutine or function) as
part of its own execution.  Recursion is allowed for all routines in
LUX, whether they are built-in or user-defined.

The parameters of a user-defined routine are independent from instance
to instance: If more than one instance of a particular user-defined
routine is active at the same time, then a particular parameter in one
copy of the routine is independent of the version of the same parameter
in all other copies of the routine.  However, the values of the
parameters are lost when the routine is finished.

The strictly local variables of the routine are not covered by this
rule: only a single copy of such variables exists, which is shared
between all instances of the routine, and which retains its value even
after the routine is finished.

It is quite easy to define a function or subroutine that keeps calling
itself indefinitely.  LUX leaves checking for such infinite recursion up
to the user.

For example, here is a definition for a function that calculates the
factorial of a positive integer number @code{n} (i.e., the product of all
numbers between 1 and @code{n}, inclusive):

@example
func fac(n)
  if n eq 1 then return,n
  return,n*fac(n-1)
endfunc
@end example

If we call this function with argument @code{3}, then @code{foo(3)}
calls @code{foo(2)}, which calls @code{foo(1)}.  When @code{foo(1)} is
being evaluated, three instances of @code{foo()} are active at the same
time, each with their own independent copy of @code{n}.

In this particular example, the function is not waterproof against
infinite recursion.  If you call the function with a number smaller than
1, or with a number that is not an integer, then it will keep calling
itself indefinitely until all those different instances of @code{foo()}
fill up LUX's symbol tables.

@c ------------------------------------------------------------------
@node Precedence,  , Function Call, Expressions
@comment  node-name,  next,  previous,  up
@section Order of Precedence

When you enter an expression that contains more than one operator, then
it may not be clear which operation should be performed first.  For
example, in the expression @code{6 + 3 * 4} one might choose to perform
the addition first and the multiplication later, yielding @code{(6 + 3) *
4 = 9 * 4 = 36}, or one might choose to perform the multiplication
first and the addition later, yielding @code{6 + (3 * 4) = 6 + 12 = 18}.
To take care of situations like this, the operators are assigned an
@emph{order of precedence}: an indication of which operator goes first
in any situation.

The following list shows groups containing operators of equal
precedence, with the groups listed in order of decreasing precedence:

@enumerate
@item
@code{.} @code{()}
@item
@code{^}
@item
Unary minus
@item
@code{*} @code{/} @code{%} @code{mod} @code{smod} @code{#}
@item
@code{+} @code{-}
@item
@code{<} @code{>}
@item
@code{ge} @code{le} @code{gt} @code{lt} @code{eq} @code{ne}
@item
@code{and} @code{or} @code{xor} @code{&} @code{|}
@item
@code{andif} @code{orif}
@end enumerate

For example, multiplication (@code{*}) has a higher precedence than
addition (@code{+}), so in our example @code{6 + 3 * 4}, multiplication
goes first and addition second.  You can make the addition go first
after all by making the order explicit using grouping with parentheses
(which has the highest precedence): @code{(6 + 3) * 4} yields @code{36}.

All operators except power-taking (@code{^}) have @emph{left
associativity}: if they are combined with operators of equal precedence,
then the operations are evaluated from left to right.  For example, in
@code{3 * 4 / 5}, the multiplication and the division have the same
order of precedence and are both left associative, so the leftmost
operation, in this case the multiplication, goes first, yielding
@code{2} (remember that the example involves integers only).  With
enforced precedence for the division, through @code{3 * (4 / 5)}, we get
@code{0}.

The operators with the greatest precedence are grouping with
parentheses, and selecting a member from a list or structure (@code{.}).
@emph{Unary minus} refers to a minus sign applied to a single argument,
and it has high precedence.  For example, @code{- 3 + 4} yields
@code{1}, and not @code{-7}.  However, the precedence of power-taking is
higher than that of unary minus, so @code{-3^2} is equal to @code{-9}.
Power-taking has @emph{right associativity}, so @code{3 ^ 4 ^ 2} is
interpreted as @code{3 ^ (4 ^ 2) = 3 ^ 16}.

Using parentheses, one can explicitly indicate any desired precedence.

@c ------------------------------------------------------------------
@node Statements, Graphics, Expressions, Top
@comment  node-name,  next,  previous,  up
@chapter Statements

@cindex Statements

A computer program in the LUX language is a set of @emph{statements},
which are executed in the order in which they are encountered.
Statements execute commands and control the flow of execution.
Statements usually involve expressions and may contain other statements.

LUX offers many statements.  The assignment and insertion statements
allow storage of data in variables.  The @code{if}, @code{case}, and
@code{ncase} statements allow @emph{branching}, i.e., execution of
statements depending on one or more conditions.  The @code{for},
@code{repeat}, @code{WHILE-DO}, and @code{DO-WHILE} statements allow
@emph{loops}, i.e., repetition of statements.  A block statement allows
a set of statements to be treated as a single one.  The block routine
(@code{block}), subroutine (@code{subr}), and function (@code{func})
definition statements allow definition of routines written in the LUX
language.  Block routine and subroutine calls allow these user-defined
routines to be used.  The jump statements @code{break}, @code{continue},
@code{retall}, and @code{return} allow (restricted) forced exit from
loops and routines.  File inclusion statements (@code{@@} and
@code{@@@@}) allow the contents of a file to be read and executed.

In the formal description of the syntax of these statements, square
brackets @code{[]} enclose optional parts, and dots @dots{} indicate
that the preceding phrase may be repeated.

@c ------------------------------------------------------------------
@menu
* Assignment::                  Assignment statements
* IF Statement::                Select based on a condition
* CASE Statement::              Select based on a value
* NCASE Statement::             Select based on conditions
* FOR Statement::               Repeat a fixed number of times
* REPEAT Statement::            Repeat until a final condition is met
* WHILE-DO Statement::          Repeat while an initial condition is met
* DO-WHILE Statement::          Repeat while a final condition is met
* Block Statement::             Treat a group of statements as one
* Block Routine Definition::    Name a group of statements
* Block Routine Execution::     How to execute a named group of statements
* Subroutine Definition::       Define a subroutine
* Subroutine Call::             How to use a subroutine
* Extended Parameter Lists::    Arbitrary numbers of arguments
* Function Definition::         Define a function
* Jumps::                       Forced jumps to other statements
* File Inclusion::              Reading commands from a file
* Ignoring Input::              How to make LUX ignore input
* Line Breaks::                 How LUX treats line breaks
@end menu

@node Assignment, IF Statement, Statements, Statements
@comment  node-name,  next,  previous,  up
@section Assignment

@cindex Assignments

There are several ways to assign values to (parts of) a variable, as
listed below.

@c ------------------------------------------------------------------
@menu
* Straight Assignment::         Assignment to a whole variable
* Insertion::                   Assignment to some elements of a variable
* Operand-Assignment::          Modification of a variable
@end menu

@node Straight Assignment, Insertion, Assignment, Assignment
@comment  node-name,  next,  previous,  up
@subsection Straight Assignment

@cindex Simple assignment

In a straight assignment the whole data contents of a variable are
replaced, as follows:
@need 800
@example
@code{@var{var}} = @code{@var{expr}}
@end example

The variable receives as its value a copy of the value of the
expression, and assumes the data class and type of the expression.  The
expression is not changed in any way by this assignment.

@c ------------------------------------------------------------------
@node Insertion, Operand-Assignment, Straight Assignment, Assignment
@comment  node-name,  next,  previous,  up
@subsection Insertion

@cindex Inserting values

Insertions, assignments to parts of a variable, are done using the same
notation on the left-hand side of the equal sign as is used on the
right-hand side to extract those very same parts (@ref{Subscripts}),
except that currently no more than one subscript list (between
parentheses) or structure tag expression (after a period) can be
specified on the left-hand side of an assignment, and summation and
redirection flags are not allowed in range subscripts (@ref{Range
Subscripts}). 

Some examples are:

@example
x(*,i,7,/INNER) = y(3,2,*)
s.name = 'Jones'
s.3 = z
@end example

@menu
* Subscript Insertion::         Inserting through subscripts
* Structure Insertion::         Inserting through structure tags
@end menu

@c ------------------------------------------------------------------
@node Subscript Insertion, Structure Insertion, Insertion, Insertion
@comment  node-name,  next,  previous,  up
@subsubsection Insertion through Subscripts

@cindex Inserting using subscripts
@cindex Subscripts, inserting using

Insertion into arrays (@ref{Arrays}), strings (@ref{Strings}), file
arrays (@ref{File Arrays}), and associated variables (@ref{Associated
Variables}) goes according to the following format:

@code{@var{var}(@code{@var{subscripts}}) = @code{@var{expr}}}

where @code{@var{subscripts}} is a comma-separated list of one or more
subscripts (only one subscript is allowed for associated variables).
The subscripts (after expansion of lists and structures, @ref{Lists of
Subscripts}) may be scalars (@ref{Scalars}), ranges (@ref{Ranges}), or
numerical arrays (@ref{Arrays}), and in general there must be as many
subscripts as there are dimensions in @code{@var{var}}.

If @code{@var{expr}} has only one element, then this element is inserted
at every place indicated by the @code{@var{subscripts}}.  In that case
the conditions on the dimensions of @code{@var{expr}} that are listed
below do not apply.

You specify the part of @code{@var{var}} that receives values from
@code{@var{expr}} in one of the following ways:

@enumerate 1
@item
By specifying the coordinates of all elements in that part, using
ranges, scalars, or numerical arrays.  The different subscripts can be
combined in two different ways, which are indicated by keywords.

Keyword @code{/OUTER} specifies that the coordinates are combined as in
a generalized outer product: all possible combinations of the various
coordinates are serviced.  For example, in @code{x(1:2,[7,4,2]) =
@var{expr}}, @code{@var{expr}} must have dimensions 2 by 3, and the
elements of @code{@var{expr}} (in the order @code{(0,0), (1,0), (0,1),
(1,1), (0,2), (1,2)}) are inserted into @code{x} in the elements
@code{(1,7), (2,7), (1,4), (2,4), (1,2), (2,2)} respectively.

In this case each dimension of @code{@var{expr}} must be equal to the
number of elements in the corresponding non-scalar subscript to
@code{x}.

Keyword @code{/INNER} specifies that the coordinates are combined as in
a generalized inner product: each element of each multi-element
subscript is used only once.  For example, in
@code{x([1,2],[7,4],/INNER) = @var{expr}}, the @code{@var{expr}} must
have the same number of elements as each multi-element subscript to
@code{x}, and all multi-element subscripts to @code{x} must have the
same number of elements.  The elements of @code{@var{expr}} are inserted
in @code{x} in the elements @code{(1,7), (2,4)}, respectively.

By default, @code{/OUTER} is assumed if none of the subscripts has more
than one dimension, and @code{/INNER} otherwise.

In addition, the elements of a single subscript which is a numerical
@code{array} can be interpreted as if its elements were specified as
separate @code{scalar}s, by specifying the @code{/SEPARATE} keyword.

You may specify fewer subscripts than there are dimensions only if you
also specify one of the keywords @code{/ZERO} or @code{/ALL}.  Keyword
@code{/ZERO} indicates that all omitted remaining subscripts are to be
taken equal to zero.  Keyword @code{/ALL} indicates that all omitted
remaining subscripts are to be taken equal to @code{*}.  These keywords
can be combined with keyword @code{/SEPARATE}.

@item

By specifying the coordinates of the lowest corner of that part (if the
part is a single block in all of its dimensions).  If @code{@var{expr}}
has fewer dimensions than @code{@var{var}}, or if keyword @code{/ONEDIM}
is specified, then the insertion is done in one-dimensional fashion,
starting at the element of @code{@var{var}} that is indicated by the
subscripts.  For example, in @code{x(2,4,0) = @code{@var{expr}}} with
@code{@var{expr}} having fewer than three dimensions, the elements of
@code{@var{expr}} are inserted into consecutive elements of @code{x},
starting at the element of @code{x} that corresponds to coordinates
@code{(2,4,0)}.

If @code{@var{expr}} has the same number of dimensions as
@code{@var{var}} and if keyword @code{/ONEDIM} is not specified, then
the insertion is done taking the dimensional structure of
@code{@var{var}} into account.  For example, regard @code{x(2,4,0) =
@code{@var{expr}}} with @code{@var{expr}} with 3 dimensions.  Assuming
that @code{@var{expr}} has at least two elements in each dimension,
elements @code{(0,0,0), (1,0,0)} of @code{@var{expr}} are inserted in
elements @code{(2,4,0), (3,4,0)} of @code{x}.  Elements @code{(0,1,0),
(1,1,0)} go to @code{(2,5,0), (3,5,0)}, and elements @code{(0,0,1),
(1,0,1)} to @code{(2,4,1), (3,4,1)}.

@item
By specifying one index to @code{@var{var}}.  In this case
@code{@var{var}} and @code{@var{expr}} are treated as one-dimensional
arrays and the elements of @code{@var{expr}} are inserted in
@code{@var{var}} starting at the specified index.

@end enumerate

In any of the methods of insertion, it is illegal to try to insert data
beyond the boundaries of the target.

The intention is to expand this kind of insertion to allow multiple
levels of insertion target specifications (such as
@code{x(5,*)(22).ALPHA = y}), but this is not yet implemented.

See also: @ref{Data Classes}, @ref{Subscripts}

@c ------------------------------------------------------------------
@node Structure Insertion,  , Subscript Insertion, Insertion
@comment  node-name,  next,  previous,  up
@subsubsection Insertion into Structures and Similar Data Classes

@cindex Inserting into Structures
@cindex Inserting into Lists
@cindex Inserting into Ranges

You can insert into structures (@ref{Structures}), lists (@ref{Lists}),
and ranges (@ref{Ranges}) using subscripts, for example

@code{@var{var}(@var{number}) = @code{@var{expr}}}

where @code{@var{number}} is a single integer number which indicates the
index of the element in the list that is to be modified.  The first
element has index zero.  The index must lie within the valid range.

Insertion into structures can also go according to

@code{@var{var}.@var{keyword} = @code{@var{expr}}}

where @code{@var{keyword}} must be one of the keywords specified in the
structure.

The intention is to expand this kind of insertion to allow multiple
levels of insertion target specifications (such as @code{x.3(5).ALPHA =
y}), but this is not yet implemented.

@c ------------------------------------------------------------------
@node Operand-Assignment,  , Insertion, Assignment
@comment  node-name,  next,  previous,  up
@subsection Operand-Assignment

@cindex Operand assignment
@cindex Modification assignment

Assignment statements of the form
@example
 @code{@var{target}} = @code{@var{target}} @code{binary_operator} @code{@var{expr}}
@end example
can be written with the shorthand notation
@example
 @code{@var{target}} @code{binary_operator}= @code{@var{expr}}
@end example
where @code{binary_operator=} is one of @code{+=}, @code{-=}, @code{*=},
or @code{/=}.  The @code{@var{target}} may be subscripted, as in
@ref{Insertion}.

@c ------------------------------------------------------------------
@node IF Statement, CASE Statement, Assignment, Statements
@comment  node-name,  next,  previous,  up
@section IF Statement

@cindex IF statement

The @code{if} statement selects one of two statements for execution,
depending on a condition.

@example
IF @var{expr} THEN @var{statement1} [ ELSE @var{statement2} ]
@end example

The condition expression @code{@var{expr}} is evaluated.  Its value must
be a scalar.  If the value is non-zero, then statement
@code{@var{statement1}} is executed.  If the condition evaluates to
zero, and the optional @code{else} part was specified, then
@code{@var{statement2}} is executed.  If the condition evaluates to zero
but no @code{else} part was specified, then this statement does nothing
and execution passes on directly to the next statement.

@c ------------------------------------------------------------------
@node CASE Statement, NCASE Statement, IF Statement, Statements
@comment  node-name,  next,  previous,  up
@section CASE Statement

@cindex CASE statement
@cindex Statement selection by condition

The @code{case} statement selects one of a set of statements for
execution, depending on a set of conditions.

@example
CASE
  @var{expr1} : @var{statement1}
[ @var{expr2} : @var{statement2}
  @dots{} ]
[ ELSE @var{statement} ]
ENDCASE
@end example

The condition expressions @code{@var{expr1}}, @code{@var{expr2}}, and so
on are evaluated in turn until the first non-zero value (i.e., true
condition) is found.  Then, the corresponding statement
@code{@var{statement1}} or @code{@var{statement2}}, etcetera, is
executed.  If none of the conditions evaluates to a non-zero value, then
the @code{else} statement @code{@var{statement}} is executed, if an
@code{else} part was specified.  Otherwise, this @code{case} statement
does nothing and control passes directly to the next statement.

All evaluated conditions must have scalar values.

@c ------------------------------------------------------------------
@node NCASE Statement, FOR Statement, CASE Statement, Statements
@comment  node-name,  next,  previous,  up
@section NCASE Statement

@cindex NCASE statement
@cindex Statement selection by number

The @code{ncase} statement selects one of a set of statements for
execution, depending on a single control value.

@example
NCASE @var{expr}
  @var{statement1}
[ @var{statement2}
  @dots{} ]
[ ELSE @var{statement} ]
ENDCASE
@end example

The control expression @code{@var{expr}} is evaluated.  It must have a
scalar value, and the integer part of this value is then used as control
value.  If the control value is zero, one, etcetera, then the first,
second, etcetera, statement @code{@var{statement1}},
@code{@var{statement2}}, etcetera, is executed.  If there is no
statement corresponding to the control value, then the @code{else}
statement @code{@var{statement}} is executed, if an @code{else} part was
specified.  Otherwise, this @code{ncase} statement does nothing and
control passes directly to the next one.

@c ------------------------------------------------------------------
@node FOR Statement, REPEAT Statement, NCASE Statement, Statements
@comment  node-name,  next,  previous,  up
@section FOR Statement

@cindex FOR statement
@cindex Loop statement, fixed

The @code{for} statement repeats a statement a specific number of times.

@example
FOR @var{var} = @var{expr1}, @var{expr2} [, @var{expr3}] [ DO ]
   @var{statement}
@end example

Variable @code{@var{var}} is the loop variable.  It is assigned the
value of @code{@var{expr1}}.  Then the statement @code{@var{statement}}
is executed.  Then the loop variable is incremented by
@code{@var{expr3}}, if specified, or by one otherwise.  If the value of
the loop variable is now greater than that of @code{@var{expr2}}, then
the loop is finished and control passes to the next statement.
Otherwise, the loop is repeated.

For example,
@example
LUX>FOR i = 1,5 T,i*i
      1
      4
      9
     16
     25
LUX>
@end example

@c ------------------------------------------------------------------
@node REPEAT Statement, WHILE-DO Statement, FOR Statement, Statements
@comment  node-name,  next,  previous,  up
@section REPEAT Statement

@cindex REPEAT statement
@cindex Loop statement until condition at end

The @code{repeat} statement repeats a statement until a condition,
tested at the end of the loop, is met.

@example
REPEAT @var{statement} UNTIL @var{expr}
@end example

The statement @code{@var{statement}} is executed.  Then the condition
@code{@var{expr}} is evaluated.  If the condition is non-zero, then the loop
terminates.  Otherwise, the loop is repeated until the condition becomes
non-zero.  The statement @code{@var{statement}} is always executed at least
once, even if the condition @code{@var{expr}} is true to begin with.

@c ------------------------------------------------------------------
@node WHILE-DO Statement, DO-WHILE Statement, REPEAT Statement, Statements
@comment  node-name,  next,  previous,  up
@section WHILE-DO Statement

@cindex WHILE-DO statement
@cindex Loop statement while condition at start

The @code{WHILE-DO} statement repeats a statement while a condition,
tested at the start of the loop, is met.

@example
WHILE @var{expr} DO @code{statement}
@end example

The condition @code{@var{expr}} is evaluated.  If its value is zero
(i.e., the condition is false), then the @code{WHILE-DO} statement does
nothing and control flow passes on to the next statement.  If the
condition is non-zero (i.e., the condition is true), then the statement
@code{@var{statement}} is executed and the condition is re-evaluated,
iterating until the condition becomes true.

@c ------------------------------------------------------------------
@node DO-WHILE Statement, Block Statement, WHILE-DO Statement, Statements
@comment  node-name,  next,  previous,  up
@section DO-WHILE Statement

@cindex DO-WHILE statement
@cindex Loop statement while condition at end

The @code{DO-WHILE} statement repeats a statement while a condition,
tested at the end of the loop, is met.

@example
DO @var{statement} WHILE @var{expr}
@end example

The statement @code{@var{statement}} is executed.  Then the condition
@code{@var{expr}} is evaluated.  If the condition is zero (false), then
the loop terminates.  Otherwise, the loop is repeated until the
condition does become false.  The statement is always executed at least
once, even if the condition is initially false.

@c ------------------------------------------------------------------
@node Block Statement, Block Routine Definition, DO-WHILE Statement, Statements
@comment  node-name,  next,  previous,  up
@section Block Statement

@cindex Block statement
@cindex Statement group
@cindex Group of statements
@cindex BEGIN statement
@cindex END statement

A block statement disguises a set of statements as a single statement by
enclosing it in curly braces @code{@{ @}} or in a @code{BEGIN-END} pair.

@example
BEGIN @var{statement1} [ @var{statement2} @dots{} ] END
@{ @var{statement1} [ @var{statement2} @dots{} ] @}
@end example

Block statements are mainly used to circumvent the one-statement limit
to the loop statements (@ref{FOR Statement}, @ref{REPEAT Statement},
@ref{WHILE-DO Statement}, @ref{DO-WHILE Statement}).

For example,
@example
LUX>x = 0
LUX>FOR i = 1,4 @{ x = x + i  T,x @}
     1
     3
     6
    10
LUX>
@end example

@c ------------------------------------------------------------------
@node Block Routine Definition, Block Routine Execution, Block Statement, Statements
@comment  node-name,  next,  previous,  up
@section Block Routine Definition

@cindex Block routine definition
@cindex Routine, main level
@cindex Subroutine, main level
@cindex Definition of block routine

A block routine is a set of statements to which a name has been
assigned.

@example
BLOCK @var{name}
  @var{statement1}
[ @var{statement2}
  @dots{} ]
ENDBLOCK
@end example

The name of the block routine must start with a letter, and subsequent
characters of the name must be letters, digits, or the character
@kbd{_}.

Block routines can be defined at the main level of execution (i.e., at
the @samp{LUX>} prompt), or inside a user-defined function
(@ref{Function Definition}) or subroutine (@ref{Subroutine Definition}).
The variables used inside a block routine are local (@ref{Local
Variables}) to the main execution level or to the function or subroutine
in which the block routine is defined.  Block routines should only be
executed in the same context in which they were defined.  At present, a
block routine that is defined inside a function or subroutine still
appears in a @code{dump} (@ref{dump}) at the main level of excution, and
is not deleted when the function or subroutine in which it was defined
is.  This behavior needs to be streamlined.

See @ref{Block Routine Execution} for execution of such a block routine.

@c ------------------------------------------------------------------
@node Block Routine Execution, Subroutine Definition, Block Routine Definition, Statements
@comment  node-name,  next,  previous,  up
@section Block Routine Execution

@cindex Block routine execution
@cindex Execution of block routine
@cindex RUN statement

A block routine (@ref{Block Routine Definition}) is executed by the
@code{run} command.  

@example
RUN, @var{name}
RUN @var{name}
@end example

Either form executes the block routine with name @code{@var{name}}, just
as if the statements inside the block routine were typed by the user at
this point.

@c ------------------------------------------------------------------
@node Subroutine Definition, Subroutine Call, Block Routine Execution, Statements
@comment  node-name,  next,  previous,  up
@section Subroutine Definition

@cindex Subroutine definition
@cindex Routine definition
@cindex Definition of subroutine

A subroutine is a named "black box" that performs a specific task.  The
user interacts with the subroutine through the subroutine's parameters,
and possibly through global variables (@ref{Global Variables}).

LUX offers many built-in subroutines (@ref{Internal Routines}), and also
allows you to define your own in the LUX language, with a subroutine
definition statement.  All variables that are used inside such a
definition are local to the routine (@ref{Local Variables}), except for
those variables whose names start with one of the characters @kbd{! #
$}, which are global (@ref{Global Variables}).

@example
SUBR @var{name} [ , @var{par1}, @var{par2}, @dots{} ]
  @var{statement1}
[ @var{statement2}
  @dots{} ]
ENDSUBR
@end example

This defines a subroutine called @code{@var{name}}, with parameters
@code{@var{par1}}, @code{@var{par2}}, etcetera.  The subroutine consists
of the statements @code{@var{statement1}}, @code{@var{statement2}},
etcetera, which use the parameters to determine what needs to be done.

A special method is available for allowing arbitrary numbers of
variables.  It is selected by adding a triple period (@code{...}) as the
last parameter of the subroutine, and then if any arguments fall beyond
the last regular one, then the last regular parameter is changed into a
@code{cplist} variable and its previous value and all subsequent ones
are entered into the list in the order in which they are specified.  An
argument list that ends with @code{...} is referred to as an
@emph{extended parameter list}.

See also: @ref{Subroutine Call}, @ref{Extended Parameter Lists}

@c ------------------------------------------------------------------
@node Subroutine Call, Extended Parameter Lists, Subroutine Definition, Statements
@comment  node-name,  next,  previous,  up
@section Subroutine Call

@cindex Subroutine call
@cindex Calling a subroutine
@cindex Executing a subroutine

A subroutine is a named "black box" that performs a specific task,
depending on the values that are specified for the subroutine's
parameters, if any, and possibly on the values of some global variables
(@ref{Global Variables}).

@example
name [, arg1, arg2 @dots{} ]
@end example
calls the subroutine that has name @code{name}, with the listed
arguments, separated by commas.  A subroutine call need not have any
arguments.  See @ref{Arguments} to learn more about the various ways in
which arguments can be specified for subroutines.

LUX offers many internal subroutines (@ref{Internal Routines}), and
also allows the user to define subroutines written in the LUX language
(@ref{Subroutine Definition}).

Because internal subroutines, user-defined subroutines, and subroutine
pointer variables (@ref{Pointers}) all have their own name spaces,
symbols of these three kinds can exist at the same time even if they all
have the same name.  For instance, in addition to the internal
subroutine called @code{limits} (@ref{limits}), one can also have a
subroutine pointer named @code{limits} and a user-defined subroutine
named @code{limits}, all at the same time (remember that upper case and
lower case letters are equivalent in this situation).

Which of these three possibilities is to be executed is determined at
compile time, as described below.  The first match (at the time that the
statement is compiled) is taken.

@enumerate
@item
If the subroutine symbol is a pointer (@ref{Pointers}) to an internal
or (possibly not yet compiled) user-defined subroutine, then that
subroutine is taken.
@item
If a user-defined subroutine exists with the indicated name, then that
subroutine is taken.
@item
If an internal subroutine exists with the indicated name, then that
subroutine is taken.
@item
Otherwise, a user-defined subroutine with the indicated name is assumed
to become available, and that subroutine is taken.
@end enumerate

If during execution a user-defined subroutine turns out not to have been
compiled yet, then LUX tries to find a file that contains a definition
for that subroutine.  LUX looks for a file with the same name as the
subroutine, transformed to all lower-case letters, and with the
@file{.lux} suffix added.  LUX looks for this file in the directories
which are listed, separated by colons (@kbd{:}) in the environment
variable @code{LUX_PATH} (@ref{Environment}), and in the directory, if
any, that was specified using @code{ulib} (@ref{ulib}).  If such a file
is found, then it is included at this point.  If the sought subroutine
is still not defined after the file has been included, then an error
message is displayed.

The way of linking a subroutine symbol to a particular subroutine at
compile time allows various kinds of @emph{shadowing}, of hiding a
particular subroutine behind some other one.  E.g., you can hide the
internal definition for @code{limits} by defining your own version
(@ref{Subroutine Definition}), or by creating a pointer with that same
name that points at a subroutine of your choice, and you can hide a
user-defined subroutine named @code{mycode} by defining a pointer with
that same name that points at another subroutine.  The hidden
definitions are not deleted; they are merely hidden and can be restored
as first choice by deleting the overlaid definitions.

Subroutines can be called recursively.  See @ref{Recursion} for details.

Some subroutines can be called with more arguments than it has
parameters.  See @ref{Extended Parameter Lists} for details.

@c ------------------------------------------------------------------
@node Extended Parameter Lists, Function Definition, Subroutine Call, Statements
@comment  node-name,  next,  previous,  up
@section Extended Parameter Lists

If a subroutine or function was defined by the user with an extended
parameter list (@ref{Subroutine Definition}, @ref{Function Definition})
and if it is called with more arguments than there are explicit
parameters in the parameter list, then the last named parameter is
changed into a @code{cplist} variable and the excess arguments are
stored in it.  A @code{cplist} variable is a compact list of pointers to
variables, and (currently) occurs only in the context of an extended
parameter list to a user-defined subroutine or function.

@example
 SUBR FOO,x,...
   (statements)
 ENDSUBR
@end example

The above example shows the simplest extended parameter list.  If this
subroutine is called through @code{FOO,y} then, inside the subroutine,
@code{x} will receive whatever the value of @code{y} happens to be.
This is just like what would happen if the subroutine were defined
without the @code{...}.

However, if the subroutine is called through @code{FOO, x, y}, then
there are more arguments than explicit parameters, and then the extended
parameter treatment will be used: inside the subroutine, @code{x} will
be a compact pointer list, equal to @code{@{&x, &y@}}.  In that case,
you can assign the value @code{5} to @code{y} inside the subroutine by
including a statement like @code{x(1) = 5}.

@c ------------------------------------------------------------------
@node Function Definition, Jumps, Extended Parameter Lists, Statements
@comment  node-name,  next,  previous,  up
@section Function Definition

@cindex Function definition
@cindex Definition of a function

A function is a named "black box" that returns a value.  The user
interacts with the function through the function's parameters, and
possibly through global variables (@ref{Global Variables}).

LUX offers many built-in functions (@ref{Internal Routines}), and also
allows you to define your own in the LUX language, with a function
definition statement.

@example
FUNC @var{name} [ , @var{par1}, @var{par2}, @dots{} ]
  @var{statement1}
[ @var{statement2}
  @dots{} ]
ENDFUNC
@end example

This defines a function called @code{@var{name}}, with parameters
@code{@var{par1}}, @code{@var{par2}}, etcetera.  The function consists
of the statements @code{@var{statement1}}, @code{@var{statement2}},
etcetera, which use the parameters to determine what needs to be done.
A function must return a value, and to this end at least one
@code{return} statement must appear in each function definition.  A
@code{return} statement in a function definition looks like this:

@example
RETURN, @var{value}
@end example

The value @code{@var{value}} is what the function call returns.  See
@ref{Function Call} for the use of a function.

A special method is available for allowing arbitrary numbers of
variables.  It is selected by adding a triple period (@code{...}) as the
last parameter of the subroutine, and then if any arguments fall beyond
the last regular one, then the last regular parameter is changed into a
@code{cplist} variable and its previous value and all subsequent ones
are entered into the list in the order in which they are specified.

See @code{Extended Parameter Lists} for more details.

@c ------------------------------------------------------------------
@node Jumps, File Inclusion, Function Definition, Statements
@comment  node-name,  next,  previous,  up
@section Jumps

@cindex Jump statements

Control flow in a piece of LUX code generally goes from one statement to
the next, with various loop and branch statements offering repetition
and choice, and with user-defined subroutines, functions, and
blockroutines offering modular structure.  Control flow is easy to
follow in such modular programs.

Some programming languages allow unconditional, unrestricted jumps to
arbitrarily distant statements.  Programs that use such jumps are
sometimes referred to as "spaghetti" programs, as it tends to be hard to
analyze such a program and to know what it will do.

LUX does not offer unrestricted jumps, since one can cast any algorithm
in a form without such jumps.  However, LUX does offer a small number of
restricted jump statements which can be useful to exit from loop
statements and other modular structures.

@c ------------------------------------------------------------------
@menu
* BREAK Statement::             Exit from the current loop
* CONTINUE Statement::          Jump to the start of the current loop
* RETURN Statement::            Return from a function or subroutine
* RETALL Statement::            Return to the main execution level
* EXIT/QUIT Statement::         Quit LUX
@end menu

@node BREAK Statement, CONTINUE Statement, Jumps, Jumps
@comment  node-name,  next,  previous,  up
@subsection BREAK Statement

@cindex BREAK statement
@cindex Jump to end of loop

The @code{break} statement jumps to the end of the current enclosing
loop statement and terminates that loop.  For example, the loop in the
statement
@example
LUX>FOR i = 1, 5 @{
mor>T,i
mor>IF i GT 3 THEN BREAK
mor>T,i*(i + 1) @}
     1
     2
     2
     6
     3
    12
     4
LUX>
@end example
is cut short when @code{i} exceeds the value 3.

@c ------------------------------------------------------------------
@node CONTINUE Statement, RETURN Statement, BREAK Statement, Jumps
@comment  node-name,  next,  previous,  up
@subsection CONTINUE Statement

@cindex CONTINUE statement
@cindex Jump to start of loop

The @code{continue} statement jumps to the end of the current enclosing
loop statement and starts the next iteration, unless the loop condition
indicates termination.  For example, in the statement
@example
LUX>FOR i = 1, 5 @{
mor>T,i
mor>IF i GT 3 THEN CONTINUE
mor>T,'*' @}
     1
*
     2
*
     3
*
     4
     5
LUX>
@end example

the part after the @code{continue} statement does not get executed when
the value of @code{i} exceeds 3.

@c ------------------------------------------------------------------
@node RETURN Statement, RETALL Statement, CONTINUE Statement, Jumps
@comment  node-name,  next,  previous,  up
@subsection RETURN Statement

The @code{return} statement forces termination of a user-defined
function or subroutine, and returns control to the statement following
the call to the subroutine or function.

A subroutine need not have a @code{return} statement; The subroutine is
terminated automatically when the end of the subroutine's statements is
reached.  A @code{return} statement in a subroutine consists of just the
word @code{return}.  A function must always have a @code{return}
statement, since the return value of the function is indicated by a
@code{return} statement (@ref{Function Definition}).  Both functions and
subroutines may contain more than one @code{return} statement.

@c ------------------------------------------------------------------
@node RETALL Statement, EXIT/QUIT Statement, RETURN Statement, Jumps
@comment  node-name,  next,  previous,  up
@subsection RETALL Statement

@cindex RETALL statement
@cindex Return to main level
@cindex Main level, return to

The @code{retall} statement terminates the all current statements and
returns control to the user at the main level (i.e., at the LUX prompt).
The statement consists of just the word @code{retall}.

@c ------------------------------------------------------------------
@node EXIT/QUIT Statement,  , RETALL Statement, Jumps
@comment  node-name,  next,  previous,  up
@subsection EXIT and QUIT Statements

@cindex EXIT statement
@cindex QUIT statement

The @code{exit} and @code{quit} statements terminate the LUX session.

See also: @ref{Start & Stop}

@c ------------------------------------------------------------------
@node File Inclusion, Ignoring Input, Jumps, Statements
@comment  node-name,  next,  previous,  up
@section Command File Inclusion

@cindex File inclusion
@cindex Including a file as LUX input
@cindex Reading LUX input from a file
@cindex LUX input from a file
@cindex @@ statement
@cindex @@@@ statement

If you have a file with a number of LUX statements in it, then you can
execute those statements as if you typed them at the keyboard by
including the file as follows:
@example
@@@var{file}
@end example

If the filename @code{@var{file}} has no extension (i.e., no period in it),
then @file{.lux} is added to it.  If the file with the extension is not
found, then the file without the extension is tried.

A special form of file inclusion is selected by typing two at-signs
@kbd{@@} instead of one:
@example
@@@@@var{file}
@end example

This restricted file inclusion works just like ordinary file inclusion,
except that any subroutine, function, and blockroutine definitions that
are present in the file are not performed.  If the concerned routine was
already defined, then this previous definition is retained.  If the
concerned routine does not yet exist, then the name of the routine, the
file, and the position of the definition in the file are remembered.  If
the routine is called later on, then its definition is read from the
file and performed at that time.  This restricted file inclusion
prevents unnecessary repeated definition of a routine.  If you do want
to change the definition of an already defined routine, then use
ordinary file inclusion.

@c ------------------------------------------------------------------
@node Ignoring Input, Line Breaks, File Inclusion, Statements
@comment  node-name,  next,  previous,  up
@section Ignoring Input

@cindex Comments
@cindex Ignoring input
@cindex IGNORE statement
@cindex RESUME statement

There are two ways in which you can have LUX ignore text.  If you wish
for LUX to ignore part of a line, then prepend a semicolon (;) to the
part you want to be ignored.  LUX considers a semicolon (outside of a
literal string -- @ref{Strings}) and everything that follows it through
the end of the line a comment.  Such comments are totally ignored: LUX
acts as if they are not there.

If you want LUX to ignore many subsequent lines, then use the
@code{ignore} statement as the first statement on a line just before the
ones you want ignored, and use the @code{resume} statement as the first
statement on a line just after the ones you want ignored.  All lines
between matching @code{ignore} - @code{resume} statements are totally
ignored.

@code{ignore} and @code{resume} are the only statements in LUX that are
sensitive to position: they only work if they are the first statement on
the line.  In any other position they are not recognized as statements,
and will, if still used as such, generate errors.  This relatively
peculiar behavior is necessary because you might sometimes want to use
the words "ignore" or "resume" in a literal string or in a comment, and
if LUX is truly ignoring text up to the next matching @code{resume} then
it cannot figure out if the next @code{resume} it encounters is intended
as a regular @code{resume} statement or rather is part of a literal
string or a comment.  One alternative is to check code between
@code{ignore}s and matching @code{resume}s anyway, so it is clear if a
found @code{resume} is a statement or not, but then to ignore the
skipped code by not executing it.  However, then the ignored code would
have to be flawless LUX code or else LUX would get confused anyway.
With the current implementation, ignored lines are like comments.

@code{ignore} and @code{resume} are not strictly reserved keywords
(@ref{Reserved Keywords}) and may be used as names for variables or
keywords -- as long as they are not the first word on a line.

See also: @ref{Error Messages}, @ref{Reserved Keywords}, @ref{Syntax}

@c ------------------------------------------------------------------
@node Line Breaks,  , Ignoring Input, Statements
@comment  node-name,  next,  previous,  up
@section Line Breaks

@cindex Line breaks
@cindex Breaking lines
@cindex Newlines

When LUX reads input from a file, then it can read ahead as much as it
wants to until it can figure out the meaning of something on the line.
Therefore, LUX ignores line breaks (where you start a new line) unless
the line break changes the value or meaning to LUX of something on the
command line.  Also, newlines are important to the @code{ignore} and
@code{resume} commands (@ref{Ignoring Input}).  Newlines are not allowed
in the middle of a name, such as those of variables (@ref{Variables}),
functions (@ref{Function Definition}, subroutines (@ref{Subroutine
Definition}, and argument keywords (@ref{Argument Specification}); in
the middle of a literal text string (between quotes (@code{'} or
@code{"}); @ref{Strings}) or a number (@ref{Scalars}); or in the middle
of a reserved keyword such as @code{if} or @code{repeat} (@ref{Reserved
Keywords}).  In all other places in LUX files, newlines are allowed.
So, in a LUX file, it is OK to have @code{T,SIN ( 5.3} on one line and
@code{)} on the next line to form a complete command.

When LUX reads input from the keyboard, then it assumes for the most
part that the user intended to finish one or more complete statements
when the user pressed the @kbd{RET} key.  Only in certain cases where a
statement always includes more statements does LUX conclude that the
user wants to give more input on following lines.  These cases are:
after the start of a @code{subr}, @code{func}, @code{block},
@code{begin}, @code{@{}, @code{if}, @code{case}, @code{ncase},
@code{for}, @code{repeat}, @code{do}, or @code{while} statement and the
corresponding end of the statement (@ref{Statements}).  For these
purposes, the start of the statement consists of the keyword listed
before, plus the name of the subroutine, function, or blockroutine (for
@code{subr}, @code{func}, or @code{block}, or the condition (for
@code{if}).  The "corresponding end" of the statement consists of the
very end of the statement, or of the keywords @code{until} or
@code{while} (for @code{repeat} and @code{do}).

At the keyboard, the @code{if} statement presents special problems,
because it may or may not contain an @code{else} clause.  If you specify
an @code{if} statement at the keyboard without an @code{else} on the
same line as the end of the @code{then} clause, then LUX assumes the
statement has no @code{else} clause.

You can explicitly indicate that a newline should be ignored by typing a
continuation character (a minus sign, @code{-}) as the very last
character on the line.  If a minus sign is found as the last character
on a command line (including inside a comment), then the minus sign is
removed, and the contents of the next line are appended to the previous
one before the whole thing is sent to the parser.  Such continuation
characters are not required in files, but are useful when copying and
pasting lines from a file to the command line.

Below are some examples of LUX statements that generate errors when
entered from the keyboard.  It is assumed that the @kbd{RET} key is
pressed at the end of each line.

@example
T,SIN(2.34
)

T,'alphabetical
stuff'

FUNC
MYFUN(x) RETURN,x+2 ENDFUNC

IF x LT 3 THEN T,'OK'
ELSE T,'Not OK'
@end example

In the first example, it is an error not to specify a closing
parenthesis on the same line as the opening one.  In the second example,
a closing quote was expected on the same line as the opening quote.  In
the third example, a function name should follow @code{func} on the same
line.  In the last example, the @code{else} should be on the same line
as the end of the @code{then} clause: now LUX will execute the @code{if}
statement without the @code{else} clause and then complain about the
unexpected @code{else} at the start of the next line.  Except for the
string example, which modifies the value of the string, all of these
examples would not cause problems if they were read from a file.

@c ------------------------------------------------------------------
@node Graphics, Debugging, Statements, Top
@comment  node-name,  next,  previous,  up
@chapter Graphics

@cindex Graphics

LUX has several classes of routines that produce graphical output on
your screen.  Some produce line graphs, and some display images.  All
routines allow specification of the coordinates where the graphics
should be displayed.

@c ------------------------------------------------------------------
@menu
* Screen Coordinates::          Coordinate systems for screen positions
* Colors::                      Colors
* Image Display::               Displaying images
* Plots and Graphs::            Displaying plots and graphs
* Widgets::                     Displaying and using widgets
@end menu

@node Screen Coordinates, Colors, Graphics, Graphics
@section Screen Coordinates

@cindex Screen coordinates
@cindex Coordinates, screen
@cindex Device-dependent coordinates
@cindex Device-independent coordinates
@cindex Plot coordinates
@cindex Relative plot coordinates
@cindex Image coordinates
@cindex Relative image coordinates
@cindex DEP coordinates
@cindex DEV coordinates
@cindex DVI coordinates
@cindex PLT coordinates
@cindex RPL coordinates
@cindex IMG coordinates
@cindex RIM coordinates
@cindex X11 coordinates

In plotting data or displaying images in a LUX window on your screen,
you can select from various coordinate systems.  These coordinate
systems are listed below.

@table @code
@item DEP
The magnitude-dependent coordinate system.  It corresponds to the
@code{dev} system if the coordinate is negative or if the magnitude of
the coordinate is greater than or equal to 1, and to the @code{dvi}
system if the magnitude is less than 1.
@item DVI
The device-independent coordinate system.  The origin is in the lower
left-hand corner of the screen, and the coordinates increase toward the
upper right-hand corner, which has coordinates @code{(1,1)}.
@item DEV
The device-dependent coordinate system.  The origin, with coordinates
@code{(0,0)}, is in the lower left-hand corner of the screen, and the
coordinates increase toward the upper right-hand corner.  The unit is
one pixel.
@item PLT
The plot coordinate system.  The coordinates increase from left to right
and from bottom to top.  The origin and scale correspond to that of the
last-drawn plot window (i.e., @code{plt} point @code{(!mxb,!myb)}
corresponds to @code{dvi} point @code{(!wxb,!wyb)}, and @code{plt} point
@code{(!mxt,!myt)} to @code{dvi} point @code{(!wxt,!wyt)}).
@item RPL
The relative plot-coordinate system.  The origin is in the lower
left-hand corner of the last drawn plot window, at @code{dvi} point
@code{(!wxb,!wyb)}, and the coordinates increase to @code{(1,1)} in the
upper right-hand corner of the last drawn plot, at @code{dvi} point
@code{(!wxt,!wyt)}).
@item IMG
The image coordinate system.  By default, the origin is at the lower
left-hand corner of the last displayed image (at @code{dev} coordinates
@code{(!tvix,!tviy)}, and the coordinates increase toward the upper
right-hand corner.  However, if @code{SET,/YREVERSEIMG} has been
executed, then image coordinates are measured using the native
@code{X11} coordinate orientation, with the image origin in the upper
left-hand corner and the coordinates increasing toward the lower
right-hand corner.  The unit is equal to @code{!tvscale} pixels.
@item RIM
The relative image-coordinate system.  By default, the origin is at the
lower left-hand corner of the last displayed image (at @code{dev}
coordinates @code{(!tvix,!tviy)}, and the coordinates increase toward
the upper right-hand corner, whose coordinates are @code{(1,1)}.
However, if @code{SET,/YREVERSEIMG} has been executed, then image
coordinates are measured using the native @code{X11} coordinate
orientation, with the image origin in the upper left-hand corner and the
coordinates increasing toward the lower right-hand corner.
@item X11
The native @code{X11} coordinate system, with its origin at the upper
left-hand corner of the window, the y coordinate increasing downward,
and with a unit of one pixel.
@end table

Several graphics routines allow you to specify coordinates as well as
the coordinate system in which these coordinates are expressed.  You
specify a particular coordinate system by including a keyword
corresponding to one of the coordinate system codes listed above, e.g.,
@code{/PLT} for the @code{plt} coordinate system.  Alternatively, you
can specify the coordinate system numerically through the @code{mode}
keyword @code{MODE=#coordsys.sys} where @code{sys} stands for the
three-letter abbreviation of the coordinate system name.

For example, you can display a box (symbol type @code{-4}) at
coordinates @code{(100,200)} in the @code{img} coordinate system through
command @code{XYMOV,100,200,-4,/IMG}, or
@code{XYMOV,100,200,-4,MODE=#coordsys.IMG}.  The latter form is more
convenient if you want to allow the user to select a coordinate system
through a parameter of a user-defined subroutine or function.

In older versions of LUX, image positions in routines such as @code{tv}
were specified in a coordinate system that had its origin in the upper
left-hand corner with the y coordinate increasing towards the bottom,
and the position specified for an image was the location of its upper
left-hand corner (the @code{X11} coordinate system).  @code{TV,x,0,0}
would display an image in the upper left-hand corner of the window.  In
the current version of LUX, image positions are specified in the
@code{dev} coordinate system, and the specified position is the one of
the lower left-hand corner of the image, so @code{TV,x,0,0} displays an
image in the lower left-hand corner of the window.  For backwards
compatibility, one can still request the older-style image coordinate
specification (i.e., the @code{X11} coordinate system) as default, by
executing @code{SET,/ULIMCOORDS}, and the older-style image orientation
(with the image origin in the upper left-hand corner of the image) by
executing @code{SET,/YREVERSEIMG}.

See also: @ref{!mxb}, @ref{!mxt}, @ref{!myb}, @ref{!myt}, @ref{set},
@ref{!tvix}, @ref{!tviy}, @ref{!tvscale}, @ref{!wxb}, @ref{!wxt},
@ref{!wyb}, @ref{!wyt}, @ref{#coordsys}

@c ------------------------------------------------------------------
@node Colors, Image Display, Screen Coordinates, Graphics
@comment  node-name,  next,  previous,  up
@section Colors

@cindex Colors

In the X window display system used by LUX, a finite number of different
colors can be displayed at any one time.  Depending on your computer
system and the default settings for your window manager, you may be
using any one of the six display methods ("visual classes") offered by
X.  Most users probably have an 8-bit PseudoColor display by default,
which can show 256 distinct colors at any given time, and the
characteristics of this display method are explained below.

The colors available for display at a given time can be thought of as
occupying a finite number of color cells with one color to a cell,
forming a color map.  The finite number (usually 256) of color cells
available in the default color map must be shared between all X window
applications (such as LUX) running at the time.

The human eye can distinguish about one hundred to two hundred shades of
gray, so if LUX has much fewer than 100 color cells available to it,
then images that it displayed would look noticeably artificial.  To
prevent the most egregious of such cases, LUX sets a lower limit of 64
color cells for image display.  LUX also needs some color cells for
incidental colors, such as window background colors, widget button
colors, and line drawing colors.  Also, it is polite not to grab all
remaining color cells, or else other programs that are started after LUX
may complain or fail.  If not enough color cells remain, then LUX
requests a private color map.

If the user explicitly requests a private color map through
@code{XOPEN,/PRIVATE_COLORMAP}, or if less than 96 color cells remain
available in the default color map, then LUX goes for a private color
map, and otherwise for the default color map.  In either case, LUX grabs
all but a few of the remaining color cells for use in displaying images.
The grabbed color cells are referred to as the @emph{color ramp},
because they are initialized with a linear greyscale ramp.  The number
of color cells that are left for incidental colors and for other
applications is equal to one third of the number of color cells in the
color ramp, with a minimum of 2 and a maximum of 32.  Incidental colors
are allocated from the remaining cells only when the need arises.  If
LUX requests a new incidental color but no more color cells are
available, then it issues a warning and substitutes an already allocated
color instead.

Generally, there is a limit to the number of color maps that can be
active at the same time on a given screen.  If too many color maps are
being used by all of the current applications, then only some of them
will show up correctly (including the one that the pointer -- graphical
cursor -- is in).  For example, if you run LUX on a system where only a
single color map can be active at any given time, and if LUX is using a
private color map, then the terminal window (in which you type LUX
commands) and LUX windows and widgets cannot all be shown with the
correct colors at the same time.  If you move the pointer into a LUX
window, then all LUX windows will be shown with the correct colors, and
if you move the pointer outside of all LUX windows, then the terminal
window and screen background will be shown with the correct colors.

See also: @ref{xopen}

@c ------------------------------------------------------------------
@menu
* Color Ramp::                  For image display
* Incidental Colors::           For line drawings and such
@end menu

@node Color Ramp, Incidental Colors, Colors, Colors
@comment  node-name,  next,  previous,  up
@subsection Color Ramp

For the PseudoColor visual, the color ramp is a set of color cells
reserved for display of images.  By default, the color ramp is filled
with a greyscale, so that displayed images are greyscale images.  The
user can change the display colors using the @code{tvlct} command, which
modifies the whole color ramp based on the red, green, and blue values
specified in the @code{tvlct} command, using linear interpolation.

See also: @ref{Colors}, @ref{Image Display}, @ref{tvlct}

@c ------------------------------------------------------------------
@node Incidental Colors,  , Color Ramp, Colors
@comment  node-name,  next,  previous,  up
@subsection Incidental Colors

Specific incidental colors can be requested through the @code{setfg}
(for the foreground color) and @code{setbg} (background color) commands
and their aliases.  The foreground color is used also for line drawings
(e.g., @ref{plot}) and calligraphy (e.g., @ref{callig}).  The color can
be identified in two ways: through a color name, or through a set of
three numbers.

@code{SETFG,'color-name'} sets the foreground color to that specified by
the @code{color-name} -- if that name is recognized.  Color names can be
either proper names (such as @code{blue} or @code{black}) or various
kinds of color space coordinate "names".  In general, colors can be
identified by three independent numbers, and there are many different
color coordinate systems in use.  You specify a color string in a
particular recognized color coordinate system by constructing a name
that consists of the color coordinate system (case-insensitive) name
followed by a colon @code{:} followed by the three corresponding
coordinates separated by forward slashes @code{/}.

The following two color coordinate systems specify colors in a
device-dependent manner:
@table @asis
@item RGB
@code{'rgb:<red>/<green>/<blue>'} with @code{<red>},
@code{<green>}, and @code{<blue>} three integer numbers consisting of up
to four hexadecimal digits (case insensitive).  The number @code{FFFF}
indicates maximum intensity in that color, and @code{0000} indicates
total absence of that color.  If fewer than four hexadecimal digits are
specified, then hexadecimal zeros are affixed.  In other words, the
following two specifications are equivalent: @code{'rgb:ff/002/3a'} and
@code{'rgb:ff00/0020/3a00'}.
@item RGBI
@code{'rgbi:<red>/<green>/<blue>'} is similar to
@code{'rgb:<red>/<green>/<blue>'} except that the numbers are now
floating point and between 0.0 and 1.0 (with an optional sign and
an optional exponent introduced by @code{e} or @code{e}).
@end table

The following six color coordinate systems specify colors in a
device-independent manner:

@table @asis
@item CIEXYZ
@code{'CIEXYZ:<X>/<Y>/<Z>'}
@item CIEuvY
@code{'CIEuvY:<u>/<v>/<Y>'}
@item CIExyY
@code{'CIExyY:<x>/<y>/<Y>'}
@item CIELab
@code{'CIELab:<L>/<a>/<b>'}
@item CIELuv
@code{'CIELuv:<L>/<u>/<v>'}
@item TekHVC
@code{'TekHVC:<H>/<V>/<C>'}
@end table

The numbers in all of these specifications are floating point, with
optional sign and exponent.

@code{SETFG,[r,g,b]} sets the foreground color to the color defined by
the RGBI values @code{r} (for red), @code{g} (for green), and @code{b}
(for blue).  All three numbers should be floating-point between 0.0
(absent) and 1.0 (maximum).  The specification @code{SETFG,[r,g,b]}
corresponds to @code{SETFG,'rgbi:r/g/b'}.

See also: @ref{setfg}, @ref{setbg}, @ref{plot}, @ref{callig}

@c ------------------------------------------------------------------
@node Image Display, Plots and Graphs, Colors, Graphics
@comment  node-name,  next,  previous,  up
@section Image Display

@cindex Image display
@cindex Displaying images

The standard image display routine is @code{tv}.  It displays the
contents of a two-dimensional numerical array at a user-specified
location in a user-specified window, after optional magnification and
scaled for maximum contrast.  Images are displayed with dimension 0 of
the data increasing to the right, and dimension 1 increasing upward.
Array element @code{(0,0)} is displayed in the lower left-hand corner of
the image.

By default, the position specified for an image is the location of the
lower left-hand corner of the image in @code{dev} coordinates (See
@ref{Screen Coordinates}).  In older versions of LUX, the upper
left-hand corner was used for this in the native X window coordinate
system.  For backward compatibility, this feature is still available if
you execute @code{SET,/ULIMCOORDS} beforehand.

In the X window display system used by LUX, a finite number of different
colors can be displayed at any one time.  Depending on your computer
system and the default settings for your window manager, you may be
using any one of the six display methods ("visual classes") offered by
X.  Most users probably have an 8-bit PseudoColor display by default,
which can show 256 distinct colors at any given time, and the
characteristics of this display method are explained below.

The colors available for display at a given time can be thought of as
occupying a finite number of color cells with one color to a cell,
forming a color map.  The finite number (usually 256) of color cells
available in the default color map must be shared between all X window
applications (such as LUX) running at the time.  If LUX finds that not
enough color cells remain in the default color map, then it requests its
own private color map (@ref{Colors}).

When you display an image in a LUX window using the @code{tv} routine,
then three transformations are performed to translate an image value
into a color: First the data value is scaled linearly to a @code{byte}
index into the available color range, using the @code{scale} function.
The lowest image value is scaled to @code{!scalemin} and the highest one
to @code{!scalemax}.  These two variables are set to 0 and 255,
respectively, when color cells are first allocated, but they may be
changed by the user.

Next, the color range values are translated into indices into the color
map.  LUX has no control over exactly which color map elements are
allocated to it, and in what order, so the color map indices of the
color cells allocated to LUX need not form a contiguous or ordered set,
and need not be the same from LUX session to LUX session even if the
same number of color cells are allocated by LUX in those different
sessions.  Color cell indices between 0 (inclusive) and the number of
color cells (exclusive) that was allocated by LUX are guaranteed to
correspond to colors allocated by LUX, but there is no such guarantee
for any particular color map index.

Finally, the color map indices are translated into particular colors
through the color table.  By default, LUX's color table ranges regularly
from black (color cell index 0) to white (highest color cell index).
You can specify an alternative color map with the @code{tvlct} routine.

If you wish to suppress the first or first two of these transformations,
then use the @code{tvmap} or @code{tvraw} routines instead of @code{tv}.
@code{tvmap} assumes that the @code{byte} image contains LUX color cell
indices, and @code{tvraw} assumes the @code{byte} image contains color
map indices.

See also: @ref{!scalemax}, @ref{!scalemin}, @ref{set},
@ref{tv}, @ref{tvlct}, @ref{tvmap}, @ref{tvraw}, @ref{xopen}

@c ------------------------------------------------------------------
@node Plots and Graphs, Widgets, Image Display, Graphics
@comment  node-name,  next,  previous,  up
@section Plots and Graphs

@cindex Plots
@cindex Graphs

The standard plot generating routines are @code{plot} and @code{oplot}.
The former starts a brand new plot, whereas the latter adds a curve to
an existing plot.

See also: @ref{oplot}, @ref{plot}

@c ------------------------------------------------------------------
@node Widgets,  , Plots and Graphs, Graphics
@comment  node-name,  next,  previous,  up
@section Widgets

NOTE: These are just being implemented, so the following descriptions is
likely incomplete!

Standard exchange of information (input or output) with LUX goes through
the terminal window (basic) or through LUX windows (if the @code{X11}
package has been included).  In addition, basic menus are available in
the @code{X11} package.

Widgets allow a greater variety of input/output methods, including
buttons and more advanced pull-down menus.  LUX widgets are (currently)
implemented using Motif.  You can only use widgets in LUX if the
@code{motif} and @code{X11} packages have been included in the LUX
compilation, and if the Motif widgets are installed on your system.

The Motif widgets themselves are not part of LUX, just like X11 is not
part of LUX.  LUX merely offers ways of manipulating the Motif widgets
-- if they are present on your system.  For information about the
availability or installation of Motif, consult your system manager.

If you want to use your own widgets, then first you have to build the
widgets (i.e., specify what goes in them and where, and what is supposed
to happen if the user does something to one of their elements), and then
you have to manage the widgets (i.e., wait for the user to do something
to the widgets, and then act accordingly).

@c ------------------------------------------------------------------
@menu
* Building Widgets::
* Managing Widgets::
@end menu

@node Building Widgets, Managing Widgets, Widgets, Widgets
@comment  node-name,  next,  previous,  up
@subsection Building Widgets

In LUX, widgets are identified by @emph{widget identification numbers}
or @emph{widget IDs}, which are small positive integer numbers.  Widgets
are part of a hierarchy with one or more top-level widgets, and zero or
more other widgets that are dependent parts of widgets higher up in the
hierarchy.  For convenience, widget associations are referred to as if
dependent widgets are the offspring of widgets that contain them.

Widget dependency is such that if a particular widget is destroyed
(removed), then all of its children are removed, too.  Top-level widgets
stand out because they have no ancestors.

The following top-level widgets are currently available:
@code{xmmessage}, @code{xmprompt}, @code{xmtoplevel_board}, and
@code{xmtoplevel_form}.  The last two can contain children.

In a bulletin board widget, child widgets can be placed at absolute
positions, using @ref{xmposition}.  In a form widget, child widget
placement is constrained by specifying widget attachments through
@ref{xmattach}.  In both types of widgets, convenient placement can also
be achieved by including child widgets in row or column widgets, using
@ref{xmrows} or @ref{xmcolumns}.

See also: @ref{xmmessage}, @ref{xmprompt}, @ref{xmtoplevel_board}, and
@ref{xmtoplevel_form}.

@c ------------------------------------------------------------------
@menu
* Button Widgets::
@end menu

@node Button Widgets,  , Building Widgets, Building Widgets
@comment  node-name,  next,  previous,  up
@subsubsection Button Widgets

The following routines create various kinds of button-like widgets:
@code{xmbutton}, @code{xmlabel}, @code{xmpixmapbutton},
@code{xmradiobox}.

The @code{xmsensitive} subroutine sets buttons to sensitive or
insensitive.  Sensitive buttons react to being pressed, insensitive
buttons do not.

See also: @ref{xmbutton}, @ref{xmlabel}, @ref{xmpixmapbutton},
@ref{xmradiobox}, @ref{xmsensitive}

@c ------------------------------------------------------------------
@node Managing Widgets,  , Building Widgets, Widgets
@comment  node-name,  next,  previous,  up
@subsection Managing Widgets

You manage widgets by running the @code{xtloop} command.  Any events
(button presses, menu selection, etcetera) that occur in your widgets
are stored in an event queue -- whether or not the widgets are being
managed at the time.  When @code{xtloop} is running, then the events in
the queue that came from your widgets are serviced in the order in which
they were received.

See also: @ref{xtloop}

@c ------------------------------------------------------------------
@node Debugging, Calculator Mode, Graphics, Top
@comment  node-name,  next,  previous,  up
@chapter Debugging

@cindex Debugging

LUX can offer you a helping hand in trying to find out where the
mistakes are in your programs.  The process of finding and removing
errors is called debugging, because in the very early days of computers
computer program failure was sometimes due to the presence of insects
(commonly referred to as "bugs") in the computer.

For figuring out where something went wrong, LUX offers several kinds of
help, as listed below.

@menu
* Error Messages::              What you see if something goes wrong
* Variable Inspection::         How to check the values of variables
* System Inspection::           How to check the condition of LUX's innards
* Tracing::                     How to trace execution of your commands
* Stepping::                    How to step through execution
* Help Routines::               How to find information about routines
* Diagnostic Output::           How to record input/output to a file
@end menu

@c ------------------------------------------------------------------
@node Error Messages, Variable Inspection, Debugging, Debugging
@comment  node-name,  next,  previous,  up
@section Error Messages

@cindex Error messages
@cindex Parser errors
@cindex Syntax errors

If something goes wrong during compilation (parsing) or execution of
your statements, then LUX tries to indicate in detail where and why
things went wrong, through error messages.

@menu
* Parser Errors::               Parser errors
* Execution Errors::            Execution errors
@end menu

@c ------------------------------------------------------------------
@node Parser Errors, Execution Errors, Error Messages, Error Messages
@comment  node-name,  next,  previous,  up
@subsection Parser Errors

If something goes wrong during compilation of your statements because
you typed something that LUX does not understand, then by default LUX
tries to indicate in detail what it is confused about and where it found
the confusing code, by displaying a parser message.  For example, if you
type the command @code{FOR DO}, then LUX complains, because @code{do} is
a reserved keyword so it cannot be the name of an identifier, and yet
LUX expects an identifier after @code{for}.  The complete message is:
@example
parse error, expecting `COMMON_IDENTIFIER' in line 1: "for do"
(main): 1: Error just before ""
Illegal statement
@end example
This message explains what kind of input LUX was expecting (see below),
what line (and, if necessary, what file) the offending code is in, the
offending code itself, perhaps some additional information about which
bit exactly caused confusion, and finally a verdict about the error
("Illegal statement", in this case).

The next example shows the error message generated by the command
@code{X=SIN(3} (i.e., with the closing parenthesis missing):
@example
parse error, expecting `error' or `','' or `')'' in line 3: "x=sin(3"
(main): 3: Error just before end of line
Unbalanced ()
@end example

The kinds of things that a parse error message can list as being
expected include single characters, such as the comma or closing
parenthesis in the previous example (don't mind the confusing quotes
around them), particular kinds of expressions such as
@code{common_identifier} (any valid name for a variable that starts with
a letter) or @code{special_identifier} (any valid name for a global
variable that starts with one character from @code{$ ! #}), or the
curious item @code{error}, which you can ignore.

@c ------------------------------------------------------------------
@node Execution Errors,  , Parser Errors, Error Messages
@comment  node-name,  next,  previous,  up
@subsection Execution Errors

If something goes wrong during execution of your statements, then LUX
tries to indicate in detail what went wrong and where, by displaying an
error message.  The error message lists the file or routine that the
error occurred in, the line number within that file or (user-defined)
routine, the offending piece of LUX code, a message specifying what
error occurred, and successively wider contexts of the error, all the
way up to the complete statement.

For example, if you type @code{T,SQRT('alpha')} then you'll generate an
error message because LUX cannot take the square root of a string.  The
error message is
@example
(main),  2| 'alpha': Argument is of an illegal class
  2| SQRT('alpha')
----------^
  2| SQRT('alpha')
  2| T,SQRT('alpha') 
@end example
This message indicates that the error occurred at the main execution
level (outside of any file or user-defined routine) in line number 2,
that the offending piece of code was the string @code{'alpha'}, and that
it is of an illegal class for this operation.  The remaining lines show
the position of the piece of offending code in successively wider
contexts, up to the complete statement.

@c ------------------------------------------------------------------
@node Variable Inspection, System Inspection, Error Messages, Debugging
@comment  node-name,  next,  previous,  up
@section Inspection of Variables

@cindex Variable inspection
@cindex Inspecting variables

You can inspect the value or type of any variable at any time.  For
variables that have a value, you can display that value with the
@code{type} (or @code{print}) command (see @ref{type}).

For any variable, you can inspect the current definition of the variable
with the @code{dump} command (@ref{dump}).

Some words cannot be used as names for variables; see @ref{Reserved
Keywords} for more information.

@c ------------------------------------------------------------------
@node System Inspection, Tracing, Variable Inspection, Debugging
@comment  node-name,  next,  previous,  up
@section Inspection of the System

@cindex System inspection
@cindex Inspecting the system
@cindex Status of the system

If you think something may be wrong with the internal workings of LUX,
then you can check the status of the whole system using the
@code{showstats} command (@ref{showstats}) or the @code{?} command.
Both commands yield the same kind of results, but the former is
performed during execution as a regular statement, whereas the latter is
performed directly after it is recognized, i.e., during parsing.

@c ------------------------------------------------------------------
@node Tracing, Stepping, System Inspection, Debugging
@comment  node-name,  next,  previous,  up
@section Tracing of Program Progress

@cindex Tracing execution
@cindex Program flow, tracing

You can have LUX print out what statements it is executing while it is
executing them by using the @code{trace} command (@ref{trace}).

@c ------------------------------------------------------------------
@node Stepping, Help Routines, Tracing, Debugging
@comment  node-name,  next,  previous,  up
@section Stepping Through a Program

@cindex Stepping through statements

You can go through the execution of your program step by step, using the
@code{step} command (@ref{step}).

@c ------------------------------------------------------------------
@node Help Routines, Diagnostic Output, Stepping, Debugging
@comment  node-name,  next,  previous,  up
@section Help Routines

@cindex Help routines

To refresh your memory about the arguments that a routine or function
takes, use the @code{help} command (@ref{help}).  It works on routines
and functions that are built into LUX and also on routines and functions
written by the user in the LUX language.

To figure out which routines and functions are built into your version
of LUX, use the @code{show_subr} and @code{show_func} commands
(@ref{show_subr}, @ref{show_func}).

@c ------------------------------------------------------------------
@node Diagnostic Output,  , Help Routines, Debugging
@comment  node-name,  next,  previous,  up
@section Diagnostic Output

@cindex Diagnostic output
@cindex Recording LUX output

If your computer platform supports it, then LUX offers the
@code{diagnostic} and @code{record} routines which have LUX record its
output to a file.

See also: @ref{diagnostic}, @ref{record}

@c ------------------------------------------------------------------
@node Calculator Mode, Routine Groups, Debugging, Top
@comment  node-name,  next,  previous,  up
@chapter Calculator Mode

@cindex Calculator mode

LUX mimics a regular calculator if you enter calculator mode using the
@code{calculator} command.  You can only enter this mode from the main
execution level (i.e., not from inside a subroutine or function).  This
mode is indicated by the @code{clc>} prompt, and you can leave it again
by issuing a @code{return} command.

In calculator mode, you modify the value of variable @code{$} by issuing
calculator commands.  The value must be a numerical scalar or array, or
a string.  After each command has been completed, the current value of
@code{$} is displayed.  Each command is ended by a newline and consists
of a LUX expression or simple assignment implicitly or explicitly
containing @code{$} as an operand.  This variable is an implicit operand
in the following cases: binary operations where the first operand is
missing, simple assignments where the left-hand side is missing, and
simple assignments that consist of just the name of a single-argument
function (which is applied to the value of @code{$}).

If a command consists of just a single name, then it is taken to be the
name of a single-argument function that is to be applied to the current
value.  If you wish to assign the value of a variable, then prepend an
equal sign.

See also: @ref{calculator}

@c ------------------------------------------------------------------
@node Routine Groups, Installing LUX, Calculator Mode, Top
@comment  node-name,  next,  previous,  up
@chapter Routine Groups

@cindex Routine groups
@cindex Function groups
@cindex Groups of routines

LUX may have many built-in subroutines and functions (@ref{Internal
Routines}) and global variables (@ref{Global Variables}) that are
associated with any particular concept, such as "plotting" or
"smoothing".  This section treats such groups of routines.

@c ------------------------------------------------------------------
@menu
* Array Manipulation::          How to manipulate arrays
* Astronomy and Calendars::     Finding dates and positions of planets
* Binary Operators::            Standard operations
* Color::                       Routines dealing with color
* Complex Routines::            Routines dealing with complex numbers
* Data Compression::            How to compress data
* Data Conversion::             How to convert data to a different type
* Data Creation::               How to create data
* Debug Routines::              How to find mistakes in your code
* Events::                      How to capture mouse and keyboard events
* Information::                 How to obtain information about various things
* Data Input/Output::           Getting data in or out of LUX
* Math Routines::               Various mathematical routines
* Menus::                       How to use LUX menus
* Plots::                       How to create plots
* Postscript::                  How to send graphics to a Postscript file
* Running::                     How to run or affect LUX
* Stack::                       How to use the user stack of variables
* String Routines::             Routines dealing with text
* System::                      System information
* Topology::                    Routines dealing with topology
* Windows::                     Routines dealing with graphical screen output
* Multi-Dim Routines::          Routines that treat arbitrary dimensions
@end menu

@node Array Manipulation, Astronomy and Calendars, Routine Groups, Routine Groups
@comment  node-name,  next,  previous,  up
@section Array Creation and Manipulation

@cindex Array manipulation routines
@cindex Manipulation, array

This is a list of routines that manipulate arrays.

@table @asis
@item @ref{compress}
To reduce the size of an array by combining data.
@item @ref{concat}
To combine elements and/or arrays into arrays.
@item @ref{crosscorr}
To calculate the cross-correlation function of two arrays.
@item @ref{despike}
To remove spikes from an image.
@item @ref{dimen}
To find the dimensions of the array.
@item @ref{endian}
To switch the array contents between little-endian and big-endian.
@item @ref{expand}
To increase the size of an array using interpolation.
@item @ref{indgen}
To put consecutive numbers in an array.
@item @ref{insert}
To insert one array into another.
@item @ref{isarray}
To determine if a variable is an array.
@item @ref{readarr}
To read arbitrary numbers of values from the keyboard into an array.
@item @ref{redim}
To change the dimensions of an array without changing the data.
@item @ref{replace}
To replace specific values in the array.
@item @ref{reverse}
To reverse the values in an array.
@item @ref{runcum}
To calculate a running sum with a fixed window.
@item @ref{runprod}
To calculate a running product.
@item @ref{runsum}
To calculate a running sum.
@item @ref{shift}
To shift the values in an array.
@item @ref{swaphalf}
To swap the values in an array, suitable for use with spectral transforms.
@item @ref{Square Brackets}
To combine elements and/or arrays into arrays.
@end table

@c ------------------------------------------------------------------
@menu
* Array Creation::              How to create arrays
* Array Data Compression::      How to compress arrays
@end menu

@node Array Creation, Array Data Compression, Array Manipulation, Array Manipulation
@comment  node-name,  next,  previous,  up
@subsection Array Creation

@cindex Array creation routines
@cindex Creation, array

These routines create arrays of various kinds.

@c ------------------------------------------------------------------
@menu
* Default Arrays::              Arrays with default values
* File Array Creation::         Arrays that address disk files
* Random Arrays::               Arrays of random numbers
@end menu

@node Default Arrays, File Array Creation, Array Creation, Array Creation
@comment  node-name,  next,  previous,  up
@subsubsection Arrays Created with Default Contents

Most of these routines create arrays (@ref{Arrays}) with all elements
equal to zero.  (Before LUX 3.2.184, such routines created arrays with
uninitialized -- garbage -- contents.  That was a little faster but also
less clean.)

@table @asis
@item @ref{array}
To create an array of arbitrary type.
@item @ref{bytarr}
To create a @code{byte} array.
@item @ref{cdblarr}
To create a @code{cdouble} array.
@item @ref{cfltarr}
To create a @code{cfloat} array.
@item @ref{dblarr}
To create a @code{double} array.
@item @ref{distarr}
To create an array filled with distances from a selected location.
@item @ref{fltarr}
To create a @code{float} array.
@item @ref{intarr}
To create a @code{word} array.
@item @ref{lonarr}
To create a @code{long} array.
@item @ref{int64arr}
To create a @code{int64} array.
@item @ref{readarr}
To create an array from values entered at the keyboard.
@item @ref{strarr}
To create a @code{string} array.
@end table

@c ------------------------------------------------------------------
@node File Array Creation, Random Arrays, Default Arrays, Array Creation
@comment  node-name,  next,  previous,  up
@subsubsection File Array Creation

@cindex File array creation routines
@cindex Creation, file array

These routines create file arrays (@ref{File Arrays}) which assign the
structure of an array to a disk file.

@table @asis
@item @ref{bytfarr}
To create a @code{byte} file array.
@item @ref{cdblfarr}
To create a @code{cdouble} file array.
@item @ref{cfltfarr}
To create a @code{cfloat} file array.
@item @ref{dblfarr}
To create a @code{double} file array.
@item @ref{fltfarr}
To create a @code{float} file array.
@item @ref{fzarr}
To create a file array suitable for an FZ file.
@item @ref{intfarr}
To create a @code{word} file array.
@item @ref{lonfarr}
To create a @code{long} file array.
@item @ref{int64farr}
To create a @code{int64} file array.
@end table

@c ------------------------------------------------------------------
@node Random Arrays,  , File Array Creation, Array Creation
@comment  node-name,  next,  previous,  up
@subsubsection Arrays with Pseudo-Random Numbers

@cindex Random numbers
@cindex Pseudo-random numbers
@cindex Numbers, random

LUX offers various functions that return @emph{pseudo-random} numbers.
These numbers are determined by a fixed deterministic algorithm, so the
numbers are not random in the sense that nobody can know which number
will be generated next.  A main advantage of using a deterministic
algorithm is that of reproducibility: If you restart the algorithm with
the same starting conditions, then it produces the same sequence of
numbers.

Of course, to be useful, the pseudo-random numbers generated by the
algorithm must share a sufficient number of properties with truly random
numbers.  For instance, the number of pseudo-random numbers in any given
interval of values must be statistically indistinguishable from those in
a truly random sequence, and the correlation between any two
pseudo-random numbers at a fixed distance of each other in the
pseudo-random sequence should be statistically zero.

The method used by LUX to generate pseudo-random numbers (other than
random bits) is the MT19937 ``Mersenne Twister'' generator of Makoto
Matsumoto and Takuji Nishimura, which has a period of 2^19937 - 1 and
passes most statistical tests.  LUX generates random bits using a
primitive polynomial modulo 2.

The pseudo-random number functions LUX offers are:

@example
RANDOMB( [SEED = @var{seed},] @var{dimensions})
RANDOMD( [SEED = @var{seed},] @var{distribution}, @var{dimensions})
RANDOME( @var{scale}, @var{dimensions})
RANDOMU( [SEED = @var{seed}, PERIOD = @var{period},] @var{dimensions})
RANDOMN( [SEED = @var{seed},] @var{dimensions})
RANDOM( [SEED = @var{seed}, PERIOD = @var{period},] @var{dimensions}
        [, /UNIFORM, /NORMAL, /SAMPLE, /SHUFFLE, /BITS])
@end example

The @code{randomb} function returns random bits.  The @code{randomu}
function returns uniformly distributed integer or floating-point
numbers.  The @code{randomn} function returns numbers normally
distributed with zero average and unit variance.  The @code{randomd}
function returns integer numbers distributed according to a
user-specified distribution.  The @code{randome} function returns
numbers exponentially distributed across the whole range of
representable numbers.  The @code{random} function selects a
distribution by keyword.  @code{randomu} is an alias of
@code{RANDOM,/UNIFORM}, and @code{randomn} is an alias of
@code{RANDOM,/NORMAL}.

See also: @ref{random}, @ref{randomb}, @ref{randomd}, @ref{randome},
@ref{randomn}, @ref{randomn}

Bibliography:

@itemize @minus
@item
D.E. Knuth: "Seminumerical Algorithms", 2nd Edition, Addison-Wesley,
Reading, MA (1981). 
@item
Stephen K. Park and  Keith W. Miller: "Random Number Generators: Good
Ones Are Hard To Find", Communications of the ACM, volume 31,
pp@. 1192--1201 (1988).
@item
W.H. Press, S.A. Teukolsky, W.T. Vetterling, B.P. Flannery: "Numerical
Recipes in C", 2nd edition, Cambridge University Press: chapter 7 (1992)
@item
R.C. Tausworthe: "Random Numbers Generated by Linear Recurrence Modulo
Two", Mathematics of Computation, volume 19, p@. 201 (1965)
@item
E.J. Watson: "Primitive Polynomials (Mod 2)", Mathematics of
Computation, volume 16, p@. 368 (1962)
@item
Makoto Matsumoto and Takuji Nishimura: "Mersenne Twister: A
623-dimensionally equidistributed uniform pseudorandom number
generator", ACM Transactions on Modeling and Computer Simulation,
Vol. 8, No. 1 (Jan. 1998), Pages 3–30
@end itemize

@c ------------------------------------------------------------------
@node Array Data Compression,  , Array Creation, Array Manipulation
@comment  node-name,  next,  previous,  up
@subsection Array Data Compression

@cindex Array compression routines

These routines deal with data compression of arrays (@ref{Arrays}),
i.e., with reducing the amount of memory taken up by an array without
losing any of the information contained in the array.  Data in a
compressed array can only be accessed after it has been decompressed.

@table @asis
@item @ref{crunch}
To reduce the size of an array using lossless data compression.
@item @ref{crunchrun}
Data compression with run-length encoding.
@item @ref{decrunch}
To restore a data-compressed array to its original state.
@end table

@c ------------------------------------------------------------------
@node Astronomy and Calendars, Binary Operators, Array Manipulation, Routine Groups
@comment  node-name,  next,  previous,  up
@section Astronomy and Calendars

@cindex Astronomical routines
@cindex Calendar routines
@cindex Gregorian calendar
@cindex Julian caledar
@cindex Islamic calendar
@cindex Julian date
@cindex Mayan calendar

These routines do astronomical or calendrical calculations.

@table @asis
@item @ref{astron}
To calculate the position and position-dependent characteristics of the
Sun and the planets Mercury through Neptune.
@item @ref{calendar}
To convert between various calendars.
@item @ref{date_from_tai}
To convert TAI seconds to a time string.
@item @ref{easterdate}
To calculate the date of Easter.
@item @ref{readorbits}
To read auxilliary orbital data.
@item @ref{showorbits}
To display auxilliary orbital data.
@item @ref{solar_b}
To calculate the solar B angle as seen from the Earth.
@item @ref{solar_l}
To calculate the Carrington longitude at the solar prime meridian as
seen from the Earth. 
@item @ref{solar_p}
To calculate the solar P angle as seen from the Earth.
@item @ref{solar_r}
To calculate the apparent angular solar radius as seen from the Earth.
@item @ref{sun_b}
To calculate the solar B angle as seen from the Earth.
@item @ref{sun_d}
To calculate the solar D angle as seen from the Earth.
@item @ref{sun_p}
To calculate the solar P angle as seen from the Earth.
@item @ref{sun_r}
To calculate the solar radius as seen from the Earth.
@item @ref{tai_from_date}
To transform a date to TAI seconds.
@end table

See also: @ref{calendar}

@c ------------------------------------------------------------------
@menu
* Astronomical Coordinate Calculations::
* Astronomical Time Scales::
@end menu

@node Astronomical Coordinate Calculations, Astronomical Time Scales, Astronomy and Calendars, Astronomy and Calendars
@comment  node-name,  next,  previous,  up
@subsection Astronomical Coordinate Calculations

The frame bias matrix @code{@var{rb}} transforms vectors from Geocentric
Celestial Reference System to the J2000.0 mean equator and equinox by
applying frame bias.  It does not depend on the date.

The precession matrix @code{@var{rp}} transforms vectors from the J2000.0
mean equator and equinox to the mean equator and equinox of the date
by applying precession.

The bias-precession matrix @code{@var{rbp}} transforms vectors from
Geocentric Celestial Reference System to the mean equator and equinox
of the date by applying frame bias and then precession.
@code{@var{rbp} = @var{rp} # @var{rb}}

The bias-precession-nutation matrix @code{@var{rbpn}}...

The Celestial Intermediate Pole coordinates @code{@var{x}},
@code{@var{y}} are components of the Celestial Intermediate Pole unit
vector in the Geocentric Celestial Reference System.

The Celestial Intermediate Origin locator @code{@var{s}} positions the
Celestial Intermediate Origin on the equator of the Celestial
Intermediate Pole.

Given celestial coordinates @code{@var{crs}} (in the Geocentric
Celestial Reference System), the
celestial-to-intermediate-frame-of-date matrix @code{@var{rc2i}}, the
polar motion matrix @code{@var{rpom}}, and Earth Rotation Angle
@code{@var{era}}, the terrestrial coordinates @code{@var{trs}} (in the
International Terrestrial Reference System) are found through

@code{@var{trs} = @var{rpom} # R_3(@var{era}) # @var{rc2i} # @var{crs}}

The celestial-to-terrestrial matrix @code{@var{rc2t}} translates
coordinate from the Geocentric Celestial Reference System to the
International Terrestrial Reference System:

@code{@var{trs} = @var{rc2t} # @var{crs}}

@code{@var{rc2t} = @var{rpom} # R_3(@var{era}) # @var{rc2i}}

Given celestial coordinates @code{@var{crs}} (in the Geocentric
Celestial Reference System), the celestial-to-true matrix
@code{@var{rbpn}}, the polar motion matrix @code{@var{rpom}}, and
Greenwich apparent Sidereal Time @code{@var{gst}}, the terrestrial
coordinates @code{@var{trs}} (in the International Terrestrial
Reference System) are found through

@code{@var{trs} = @var{rpom} # R_3(@var{gst}) # @var{rbpn} # @var{crs}}

The celestial-to-terrestrial matrix @code{@var{rc2t}} translates
coordinate from the Geocentric Celestial Reference System to the
International Terrestrial Reference System:

@code{@var{trs} = @var{rc2t} # @var{crs}}

@code{@var{rc2t} = @var{rpom} # R_3(@var{gst}) # @var{rbpn}}

@c ------------------------------------------------------------------
@node Astronomical Time Scales,  , Astronomical Coordinate Calculations, Astronomy and Calendars
@comment  node-name,  next,  previous,  up
@subsection Astronomical Time Scales

Various time scales used in astronomy are related as follows:

@table @asis
@item TAI
physically realized
@item offset; observed, nominally +32.184 seconds
@item TT
terrestrial time
@item rate adjustment (L_G)
part of the definition of TT
@item TCG
time scale for the Geocentric Coordinate Reference System (GCRS)
@item semi-periodic terms
These terms depend on the masses and positions of the bodies in the
Solar System.  There is an annual term of approximately 1.66 ms, plus
planetary terms of up to about 20 μs, plus lunar and diurnal terms of
up to about 2 μs.  Included in @code{dtdb}.
@item rate adjustment (L_C)
function of solar-system ephemeris
@item TCB
time scale for BCRS
@item rate adjustment (-L_B)
part of the definition of TDB
@item TDB
TCB scaled to track TT.  Depends on solar-system ephemeris.  The
relationship is currently fixed, but might need to be adjusted in the
future to the order of 1 ns per century.
@item semi-periodic terms
Included in @code{dtdb}.
@item TT
terrestrial time
@end table

@c ------------------------------------------------------------------
@node Binary Operators, Color, Astronomy and Calendars, Routine Groups
@comment  node-name,  next,  previous,  up
@section Binary Operators

A list of (alphabetical) binary operators (@ref{Operators}) follows
below.

Arithmetical:

@table @asis
@item @ref{mod}
To perform modulo-arithmetic.
@item @ref{smod}
To perform signed modulo-arithmetic.
@end table

Logical:

@table @asis
@item @ref{and}
Logical AND.
@item @ref{andif}
Logical AND with conditional evaluation.
@item @ref{or}
Logical OR.
@item @ref{orif}
Logical OR with conditional evaluation.
@item @ref{xor}
Logical exclusive-OR.
@end table

Relational:

@table @asis
@item @ref{eq}
Equal to.
@item @ref{ge}
Greater than or equal to.
@item @ref{gt}
Greater than.
@item @ref{le}
Less than or equal to.
@item @ref{lt}
Less than.
@item @ref{ne}
Not equal to.
@end table

@c ------------------------------------------------------------------
@node Color, Complex Routines, Binary Operators, Routine Groups
@comment  node-name,  next,  previous,  up
@section Color

@cindex Color routines

The following routines deal with colors.

@table @asis
@item @ref{colorcomponents}
Get RGB values corresponding to colors.
@item @ref{colorpixel}
Get the pixel value corresponding to a color.
@item @ref{colorstogrey}
Get greyscale values corresponding to colors.
@item @ref{pencolor}
To set the pen color.
@item @ref{pixelsto8bit}
To convert pixel values to 8-bit values and a colormap.
@item @ref{scale}
To map image values to @code{byte} pixel values.
@item @ref{scalerange}
To map image values to @code{byte} pixel values.
@item @ref{setbackground}
To set the background color of a window.
@item @ref{setbg}
To set the background color of a window.
@item @ref{setfg}
To set the foreground color of a window.
@item @ref{setforeground}
To set the foreground color of a window.
@item @ref{show_visuals}
To see a list of visuals for the current monitor.
@item @ref{threecolors}
To install or uninstall the "three colors" colormap.
@item @ref{tv3}
To display images using the "three colors" colormap.
@item @ref{tvlct}
To load or set a color table.
@item @ref{tvplane}
@end table

@c ------------------------------------------------------------------
@node Complex Routines, Data Compression, Color, Routine Groups
@comment  node-name,  next,  previous,  up
@section Routines for Complex Numbers

Many of the functions in LUX know how to deal with real as well as
complex numbers.  The following routines deal specifically with complex
numbers.

@table @asis
@item @ref{cdouble}
To convert number-by-number to @code{cdouble} type.
@item @ref{cfloat}
To convert number-by-number to @code{cfloat} type.
@item @ref{cdblarr}
To create a @code{cdouble} array.
@item @ref{cdblfarr}
To create a @code{cdouble} file array.
@item @ref{cdmap}
To reinterpret data as @code{cdouble} values.
@item @ref{cfltarr}
To create a @code{cfloat} array.
@item @ref{cfltfarr}
To create a @code{cfloat} file array.
@item @ref{complex}
To convert to complex numbers.
@item @ref{conjugate}
To return the complex conjugate.
@item @ref{imaginary}
To return the imaginary part of complex numbers.
@item @ref{real}
To return the real part of complex numbers.
@end table

@c ------------------------------------------------------------------
@node Data Compression, Data Conversion, Complex Routines, Routine Groups
@comment  node-name,  next,  previous,  up
@section Data Compression

@cindex Data compression routines

The following routines deal with data compression: the reduction of the
amount of memory taken up by data, without losing any of the
information.

@c ------------------------------------------------------------------
@menu
* Data-Compressed I/O::         Input/output of compressed data
@end menu

@node Data-Compressed I/O,  , Data Compression, Data Compression
@comment  node-name,  next,  previous,  up
@subsection Data-Compressed Disk File I/O

@cindex Data-compressed disk file I/O
@cindex Disk file I/O, compressed
@cindex Compression, disk file I/O
@cindex JPEG compression
@cindex GIF compression
@cindex Rice compression

These routines store data in disk files after first data-compressing it,
or retrieves and restores such data from disk files.

@table @asis
@item @ref{fcrunwrite}
To store data in a disk file after lossless compression with run-length
encoding. 
@item @ref{fcrw}
To store data in a disk file after lossless compression with run-length
encoding. 
@item @ref{fcw}
To store data in a disk file after lossless (Rice) compression.
@item @ref{fcwrite}
To store data in a disk file after lossless (Rice) compression.
@item @ref{jpegread}
To read JPEG-compressed data from a disk file.
@item @ref{jpegwrite}
To store data in a disk file after (lossy) JPEG compression.
@item @ref{read_jpeg}
To read JPEG-compressed data from a disk file.
@item @ref{write_jpeg}
To store data in a disk file after (lossy) JPEG compression.
@end table

@c ------------------------------------------------------------------
@node Data Conversion, Data Creation, Data Compression, Routine Groups
@comment  node-name,  next,  previous,  up
@section Data Conversion

@cindex Data conversion
@cindex Conversion of data types

These routines convert data from one type to another.

@table @asis
@item @ref{endian}
To convert data from little-endian to big-endian representation or the
other way around.
@item @ref{pointer}
To convert to a pointer.
@item @ref{redim}
To change the dimensions of an array without modifying or rearranging
the data.
@item @ref{swab}
To swap adjacent bytes in pairs.
@item @ref{swapb}
To swap adjacent bytes in pairs.
@end table

@c ------------------------------------------------------------------
@menu
* Data Mapping::                How to map data to different types
* String Conversion::           How to convert to or from text strings
* Number Conversion::           How to convert numbers to different types
@end menu

@node Data Mapping, String Conversion, Data Conversion, Data Conversion
@comment  node-name,  next,  previous,  up
@subsection Data Mapping

@cindex Data mapping
@cindex Mapping to different data types

These routines convert to another data type (@ref{Numerical Data Types})
on a byte-by-byte basis; i.e., the contents in memory are unchanged, but
are interpreted as being of a different data type.

@table @asis
@item @ref{bmap}
To convert to @code{byte}.
@item @ref{cdmap}
To convert to @code{cdouble}.
@item @ref{cfmap}
To convert to @code{cfloat}.
@item @ref{dmap}
To convert to @code{double}.
@item @ref{fmap}
To convert to @code{float}.
@item @ref{int64map}
To convert to @code{int64}.
@item @ref{lmap}
To convert to @code{long}.
@item @ref{smap}
To convert to @code{string}.
@item @ref{wmap}
To convert to @code{word}.
@end table

@c ------------------------------------------------------------------
@node String Conversion, Number Conversion, Data Mapping, Data Conversion
@comment  node-name,  next,  previous,  up
@subsection String Conversion

@cindex String conversion
@cindex Conversion of strings
@cindex Text conversion
@cindex Conversion of texts

These routines convert values to a @code{string} result.

@table @asis
@item @ref{atol}
To convert a string to a number.
@item @ref{date_from_tai}
To convert from TAI seconds to a date string.
@item @ref{freads}
To read values from a string.
@item @ref{fstring}
To convert data values to a string.
@item @ref{ist}
To convert a number to a string.
@item @ref{istring}
To convert a number to a string.
@item @ref{lowcase}
To convert the letters in a string to lower case.
@item @ref{lower}
To convert the letters in a string to lower case.
@item @ref{sprintf}
To convert data into a string.
@item @ref{str}
To convert a number to a string.
@item @ref{string}
To convert a number to a string.
@item @ref{strtol}
To convert from a string to a number.
@item @ref{upcase}
To convert the letters in a string to upper case.
@item @ref{upper}
To convert the letters in a string to upper case.
@end table

@c ------------------------------------------------------------------
@node Number Conversion,  , String Conversion, Data Conversion
@comment  node-name,  next,  previous,  up
@subsection Number Conversion

@cindex Number conversion
@cindex Conversion of numbers

These routines convert to another data type on a number-by-number
basis.  If a "wider" data type is converted to a "narrower" one, then
the data value is truncated, except where noted.

@table @asis
@item @ref{byte}
To convert to @code{byte}.
@item @ref{cdouble}
To convert to @code{cdouble}.
@item @ref{cfloat}
To convert to @code{cfloat}.
@item @ref{complex}
To convert to a complex data type.
@item @ref{doub}
To convert to @code{double}.
@item @ref{double}
To convert to @code{double}.
@item @ref{fix}
To convert to @code{long}.
@item @ref{float}
To convert to @code{float}.
@item @ref{floor}
To convert to @code{long}, by substituting the next-lower integer value
to a fractional value if necessary.
@item @ref{int}
To convert to @code{word}.
@item @ref{int64}
To convert to @code{int64}.
@item @ref{long}
To convert to @code{long}.
@item @ref{rfix}
To convert to @code{long}, by substituting the nearest integer value if
necessary.
@item @ref{word}
To convert to @code{word}.
@end table

@c ------------------------------------------------------------------
@node Data Creation, Debug Routines, Data Conversion, Routine Groups
@comment  node-name,  next,  previous,  up
@section Data Creation

@cindex Data creation
@cindex Creating data variables

These routines create data values or variables.

@table @asis
@item @ref{assoc}
To create an associated variable.
@item @ref{readarr}
To read values from the keyboard into a new array.
@end table

@menu
* Array Creation::                 How to create arrays
@end menu

@c ------------------------------------------------------------------
@node Debug Routines, Events, Data Creation, Routine Groups
@comment  node-name,  next,  previous,  up
@section Debug Routines

@cindex Debugging routines

These routines assist in debugging your programs (or in debugging the
LUX program itself).  Some of these routines are very preliminary and
may not be supported in future versions of LUX.

@table @asis
@item @ref{atomize}
Provides an extensive breakdown of the structure and contenst of a variable.
@item @ref{breakpoint}
Sets, resets, or lists breakpoints.
@item @ref{checklist}
For debugging of LUX.
@item @ref{diagnostic}
Opens a file to receive diagnostic output.
@item @ref{echo}
Selects echoing of code to be compiled.
@item @ref{error}
Generates an error message.
@item @ref{help}
On-line help on aspects of the LUX language.
@item @ref{newallocs}
Reports on recent memory allocation.
@item @ref{noop}
No operation (debugging entry point).
@item @ref{peek}
Raw memory inspection.
@item @ref{record}
For recording user input and LUX output.
@item @ref{show_temps}
Lists temporary variables - for debugging LUX.
@item @ref{step}
For executing LUX code step by step.
@item @ref{trace}
For displaying information about executed code and its results.
@item @ref{watch}
To watch the contents of variables while @code{trace}ing or @code{step}ping.
@item @ref{where}
For seeking memory addresses in variables - for debugging LUX.
@end table

@c ------------------------------------------------------------------
@node Events, Information, Debug Routines, Routine Groups
@comment  node-name,  next,  previous,  up
@section Events

@cindex Event routines
@cindex X-window events

These routines deal with events generated by the X-window system.

@table @asis
@item @ref{checkmenu}
To check if the user selected a menu entry.
@item @ref{checkwindow}
To check if the user selected a position in a window.
@item @ref{eventname}
To find the name corresponding to an event code.
@item @ref{wait_for_menu}
To wait until the user selects a menu entry.
@item @ref{xevent}
To get information about the events currently in the event queue.
@item @ref{xflush}
To force execution of all pending X commands.
@item @ref{xloop}
To start the window event manager.
@item @ref{xplace}
To wait for the user to select a position in a window.
@item @ref{xpurge}
To force execution of all pending X commands and clear the event queue.
@item @ref{xquery}
To get information about the current pointer location.
@item @ref{xregister}
To register event types and sources to capture.
@end table

@c ------------------------------------------------------------------
@node Information, Data Input/Output, Events, Routine Groups
@comment  node-name,  next,  previous,  up
@section Info

@cindex Information routines

These routines provide information about variables, functions,
subroutines, and sundry things.

@table @asis
@item @ref{classname}
Returns the name corresponding to a data class code.
@item @ref{d}
Returns information about an expression.
@item @ref{defined}
To ascertain if a particular variable has a defined value.
@item @ref{dimen}
Returns a dimension of an array.
@item @ref{dump}
Returns information about an expression.
@item @ref{dump_lun}
Returns information about all used logical units.
@item @ref{dump_stack}
Displays the current contents of the variables stack.
@item @ref{eventname}
Returns the name corresponding to an event code.
@item @ref{fileptr}
Returns (or sets) a file pointer.
@item @ref{filesize}
Returns the size of a file.
@item @ref{filetype}
Returns a code for the type of a file.
@item @ref{filetypename}
Returns a text string corresponding to a file type code.
@item @ref{fzinspect}
Returns info about an FZ file.
@item @ref{help}
Returns on-line information about parts of the LUX language.
@item @ref{isarray}
To determine if a variable is an array.
@item @ref{isnan}
To determine if a number is a "Not-a-Number".
@item @ref{isscalar}
To determine if a variable is a scalar.
@item @ref{isstring}
To determine if a variable is a string.
@item @ref{list}
To display the current definition of a user-defined subroutine or
function.
@item @ref{num_dim}
Returns the number of dimensions.
@item @ref{num_elem}
Returns the number of elements.
@item @ref{s}
Shows all matching variables.
@item @ref{show}
Shows all matching variables.
@item @ref{showorbits}
Displays currently loaded orbits.
@item @ref{showstats}
Displays information about the system resources.
@item @ref{show_func}
Shows all matching built-in functions.
@item @ref{show_subr}
Shows all matching built-in subroutines.
@item @ref{strlen}
Returns the length of a string.
@item @ref{symclass}
Returns the data class number.
@item @ref{symdtype}
Returns the data type number.
@item @ref{symmem}
Returns the total of the memory allocated for certain LUX symbols.
@item @ref{symnum}
Returns the symbol number of the argument.
@item @ref{tape_status}
Displays the status of a tape drive.
@item @ref{typename}
Returns the name associated with a data type number.
@item @ref{varname}
Returns the name of the variable in a string.
@end table

@c ------------------------------------------------------------------
@node Data Input/Output, Math Routines, Information, Routine Groups
@comment  node-name,  next,  previous,  up
@section Data Input/Output

These routines deal with input or output of data to screen, disk file,
tape, or from the keyboard.

@cindex Data I/O routines
@cindex Input, data routines
@cindex Ouput, data routines
@cindex I/O routines

@c ------------------------------------------------------------------
@menu
* Disk I/O::                    Input/output with disk files
* User I/O::                    Input/output with the user
* Tape I/O::                    Input/output with tape files
@end menu

@node Disk I/O, User I/O, Data Input/Output, Data Input/Output
@comment  node-name,  next,  previous,  up
@subsection Disk I/O

@cindex Disk file I/O routines
@cindex File, disk I/O routines

These routines deal with the storing of data to a disk file or restoring
of data from a disk file.

@table @asis
@item @ref{assoc}
Defines an associated variable.
@item @ref{dump_lun}
Shows the files associated with all used logical units.
@item @ref{fileptr}
Shows or sets a file pointer.
@item @ref{filesize}
Returns the size of a file.
@item @ref{filetofz}
Transforms an unformatted file to the FZ format.
@item @ref{format_set}
Shows or sets a format for ASCII output.
@item @ref{fzinspect}
Returns information on a disk file.
@item @ref{rewindf}
Sets a file pointer to the beginning of the file.
@end table

@c ------------------------------------------------------------------
@menu
* Opening/Closing Files::       How to open or close a file
* Uncompressed Disk Output::    Uncompressed output to a disk file
* Uncompressed Disk Input::     Uncompressed input from a disk file
@end menu

@node Opening/Closing Files, Uncompressed Disk Output, Disk I/O, Disk I/O
@comment  node-name,  next,  previous,  up
@subsubsection Opening and Closing of Disk Files

@cindex Opening disk files
@cindex Closing disk files
@cindex Disk files, opening/closing

These routines open or close a disk file for reading and/or writing.

@table @asis
@item @ref{close}
Closes a disk file.
@item @ref{openr}
Opens a disk file for reading only.
@item @ref{openu}
Opens a disk file for updating (reading and writing).
@item @ref{openw}
Opens a disk file for writing only.
@end table

@c ------------------------------------------------------------------
@node Uncompressed Disk Output, Uncompressed Disk Input, Opening/Closing Files, Disk I/O
@comment  node-name,  next,  previous,  up
@subsubsection Uncompressed Output to a Disk File

@cindex Uncompressed disk file output routines
@cindex Disk files, uncompressed output routines
@cindex Output, uncompressed to disk files

These routines write to a disk file without data compression.

@table @asis
@item @ref{astore}
To store simple variables in a disk file with information about their names.
@item @ref{f0w}
To write into a disk file (FZ format)
@item @ref{f0write}
To write into a disk file (FZ format).
@item @ref{fprintf}
To write into a disk file (ASCII format).
@item @ref{fzw}
To write into a disk file (FZ format).
@item @ref{fzwrite}
To write into a disk file (FZ format).
@item @ref{printf}
To write into a disk file (ASCII format).
@item @ref{store}
To write into a disk file (FZ format).
@item @ref{writeu}
To write into a disk file (unformatted).
@end table

@c ------------------------------------------------------------------
@node Uncompressed Disk Input,  , Uncompressed Disk Output, Disk I/O
@comment  node-name,  next,  previous,  up
@subsubsection Input from Uncompressed Disk Files

@cindex Uncompressed disk file input routines
@cindex Disk file, uncompressed input routines
@cindex Input, uncompressed from disk files

These routines read uncompressed data from a disk file.

@table @asis
@item @ref{arestore}
To restore simple variables from a disk file (ASTORE format).
@item @ref{f0h}
To retrieve a file header (FZ format).
@item @ref{f0head}
To retrieve a file header (FZ format)
@item @ref{f0r}
To read from a disk file (FZ format).
@item @ref{f0read}
To read from a disk file (FZ format).
@item @ref{freadf}
To read from a disk file (ASCII format).
@item @ref{freads}
To read from a string (ASCII format).
@item @ref{fzh}
To retrieve a file header (FZ format).
@item @ref{fzhead}
To retrieve a file header (FZ format).
@item @ref{fzr}
To read from a disk file (FZ format).
@item @ref{fzread}
To read from a disk file (FZ format).
@item @ref{readf}
To read from a disk file (ASCII format).
@item @ref{readu}
To read from a disk file (unformatted).
@item @ref{restore}
To read from a disk file (FZ format).
@end table

@c ------------------------------------------------------------------
@node User I/O, Tape I/O, Disk I/O, Data Input/Output
@comment  node-name,  next,  previous,  up
@subsection User I/O

@cindex Screen I/O routines
@cindex Keyboard I/O routines
@cindex Input routines from the keyboard
@cindex Output routines to screen

These routines deal with the interaction between the user and the program.

@table @asis
@item @ref{format_set}
To display or set a format for ASCII output.
@item @ref{fprint}
To write to the screen.
@item @ref{fread}
To read from the keyboard.
@item @ref{print}
To write to the screen.
@item @ref{read}
To read from the keyboard.
@item @ref{readarr}
To read an arbitrary number of values from the keyboard into a new array.
@item @ref{t}
To write to the screen.
@item @ref{ty}
To write to the screen.
@item @ref{type}
To write to the screen.
@end table

@c ------------------------------------------------------------------
@node Tape I/O,  , User I/O, Data Input/Output
@comment  node-name,  next,  previous,  up
@subsection Tape I/O

@cindex Tape I/O routines
@cindex Input routines from tape
@cindex Output routines to tape

These routines deal with input from or output to a tape device.

@table @asis
@item @ref{rewind}
To rewind a tape.
@item @ref{skipf}
To skip files on a tape.
@item @ref{skipr}
To skip records on a tape.
@item @ref{tapebufin}
To read from a tape.
@item @ref{tapebufout}
To write to a tape.
@item @ref{tape_status}
To determine the status of a tape device.
@item @ref{taprd}
To read from a tape.
@item @ref{tapwrt}
To write to a tape.
@item @ref{unload}
To unload a tape from a tape device.
@item @ref{wait_for_tape}
Currently unused.
@item @ref{weof}
To write an end-of-file marker on the tape.
@end table

@c ------------------------------------------------------------------
@node Math Routines, Menus, Data Input/Output, Routine Groups
@comment  node-name,  next,  previous,  up
@section Math Routines

@cindex Mathematical functions
@cindex Mathematical routines

These return values of mathematical functions or otherwise perform
mathematical tasks.

@table @asis
@item @ref{abs}
The absolute value or magnitude.
@item @ref{cbrt}
The cube root.
@item @ref{crosscorr}
The cross-correlation.
@item @ref{distr}
To distribute data to particular elements of an array.
@item @ref{dsum}
To sum in @code{double} type.
@item @ref{fsum}
To sum in @code{float} type.
@item @ref{getmin9}
To determine the minimum from a fit to 3-by-3 elements.
@item @ref{gridmatch}
To determine displacements between two images.
@item @ref{hist}
To get a histogram.
@item @ref{histr}
To get a normalized histogram.
@item @ref{max}
The maximum.
@item @ref{maxfilter}
A running maximum (with a fixed window size).
@item @ref{mean}
The average.
@item @ref{medfilter}
A running median (with a fixed window size).
@item @ref{min}
The minimum.
@item @ref{minfilter}
A running minimum (with a fixed window size).
@item @ref{not}
The logical opposite (zero versus non-zero).
@item @ref{one}
To one
@item @ref{poly}
A polynomial.
@item @ref{psum}
A sum weighted with specified powers of the coordinates.
@item @ref{regrid}
To interpolate unto a different coordinate grid.
@item @ref{regrid3}
To interpolate unto a different coordinate grid.
@item @ref{root3}
To calculate roots of third-degree polynomials.
@item @ref{runcum}
A running sum (with a fixed window size).
@item @ref{runsum}
A running sum (cumulative).
@item @ref{scale}
Linear scaling to @code{byte} type.
@item @ref{sdev}
Standard deviation.
@item @ref{sqrt}
Square root.
@item @ref{stretch}
To distort according to displacement data.
@item @ref{subshift}
To shift over a fractional number of pixels.
@item @ref{subshiftc}
To shift over a fractional number of pixels.
@item @ref{total}
To sum.
@item @ref{voigt}
The Voigt function.
@item @ref{zero}
To zero.
@item @ref{zinv}
Inverse (one-over) protected against division by zero.
@end table

@c ------------------------------------------------------------------
@menu
* Bessel Functions::            Various Bessel functions
* Complex Functions::           Functions that accept complex values
* Exponential/Logarithmic Functions::  Various exponents and logarithms
* Spectral Functions::          Spectral transforms
* Filters::                     Routines that modify values
* Fitting::                     Routines that fit curves to data
* Hyperbolic Functions::        Various hyperbolic functions
* Interpolation::               Routines that interpolate
* Matrix Math::                 Routines that deal with matrices
* Seek::                        Routines that find values
* Smoothing::                   Routines that smooth
* Sorting::                     Routines that sort values
* Statistical Functions::       Various statistical distributions
* Trigonometry::                Trigonometric functions
@end menu

@node Bessel Functions, Complex Functions, Math Routines, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Bessel Functions

@cindex Bessel functions

These functions return values of various Bessel functions.

@table @asis
@item @ref{bessel_i0}
@item @ref{bessel_i1}
@item @ref{bessel_j0}
@item @ref{bessel_j1}
@item @ref{bessel_jn}
@item @ref{bessel_k0}
@item @ref{bessel_k1}
@item @ref{bessel_kn}
@item @ref{bessel_y0}
@item @ref{bessel_y1}
@item @ref{bessel_yn}
@item @ref{bi0}
@item @ref{bi1}
@item @ref{bj0}
@item @ref{bj1}
@item @ref{bjn}
@item @ref{bk0}
@item @ref{bk1}
@item @ref{bkn}
@item @ref{by0}
@item @ref{by1}
@item @ref{byn}
@end table

@c ------------------------------------------------------------------
@node Complex Functions, Exponential/Logarithmic Functions, Bessel Functions, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Complex Functions

@cindex Complex Functions

These mathematical functions accept complex values in at least one of
their arguments.

@table @asis
@item @ref{abs}
The absolute value.
@item @ref{acos}
The arc cosine.
@item @ref{alog}
The natural logarithm.
@item @ref{arg}
The complex argument.
@item @ref{asin}
The arc sine.
@item @ref{atan}
The arc tangent.
@item @ref{bmap}
Byte-by-byte conversion to @code{byte}.
@item @ref{byte}
Value-by-value conversion to @code{byte}.
@item @ref{cdblarr}
Create a @code{cdouble} array.
@item @ref{cdblfarr}
Create a @code{cdouble} file map.
@item @ref{cdmap}
Map to @code{cfloat}.
@item @ref{cdouble}
Value-by-value conversion to @code{cdouble}.
@item @ref{cfloat}
Value-by-value conversion to @code{cfloat}.
@item @ref{ceil}
Next greater integer.
@item @ref{cfltarr}
Create a @code{cfloat} array.
@item @ref{cfltfarr}
Create a @code{cfloat} file map.
@item @ref{cfloat}
Convert to @code{cfloat}.
@item @ref{fix}
Convert to @code{long}.
@item @ref{float}
Convert to @code{float}.
@item @ref{floor}
Next lesser integer.
@item @ref{int}
Convert to @code{word}.
@item @ref{long}
Convert to @code{long}.
@item @ref{word}
Convert to @code{word}.
@end table

@c ------------------------------------------------------------------
@node Exponential/Logarithmic Functions, Spectral Functions, Complex Functions, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Exponential and Logarithmic Functions

@cindex Exponential functions
@cindex Logarithmic functions

These return various exponential and logarithmic function values.

@table @asis
@item @ref{alog}
Natural logarithm.
@item @ref{alog10}
Decimal logarithm.
@item @ref{exp}
Exponentiation.
@item @ref{expm1}
Exponentiation minus one.
@item @ref{log}
Natural logarithm.
@item @ref{log10}
Decimal logarithm.
@item @ref{log1p}
Natural logarithm of one plus the argument.
@end table

@c ------------------------------------------------------------------
@node Spectral Functions, Filters, Exponential/Logarithmic Functions, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Spectral Transform Functions

@cindex Spectral transform functions
@cindex Power functions
@cindex Sine transforms
@cindex Cosine transforms
@cindex Discrete spectral transforms
@cindex Fourier transforms
@cindex Hilbert transforms

These return values associated with spectral transforms, or perform
functions useful in conjunction with those.

@table @asis
@item @ref{fft}
Returns the real-valued Fourier transform.
@item @ref{hilbert}
Returns the forward or backward Hilbert transform.
@item @ref{power}
Returns the power spectrum.
@item @ref{sc}
Returns the sine and cosine transforms.
@item @ref{scb}
Returns the inverse sine and cosine transforms.
@item @ref{swaphalf}
Swaps "left" and "right" parts of an array in all of its dimensions.
@end table

@c ------------------------------------------------------------------
@node Filters, Fitting, Spectral Functions, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Mathematical Filters

@cindex Mathematical filters
@cindex Smoothing routines
@cindex Maximum, routines dealing with
@cindex Minimum, routines dealing with

These are various filters that can be applied to the data.

@table @asis
@item @ref{detrend}
Removes a polynomial fit.
@item @ref{differ}
Difference.
@item @ref{local_max}
Local maximum values.
@item @ref{local_maxloc}
Local maximum locations.
@item @ref{local_min}
Local minimum values.
@item @ref{local_minloc}
Local minimum locations.
@item @ref{maxfilter}
Running maximum (with fixed window size).
@item @ref{medfilter}
Running median (with fixed window size).
@item @ref{minfilter}
Running minimum (with fixed window size).
@item @ref{ordfilter}
Running ordinal (with fixed window size).
@item @ref{trend}
Polynomial fit.
@end table

@c ------------------------------------------------------------------
@node Fitting, Hyperbolic Functions, Filters, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Fitting Functions

@cindex Fitting functions
@cindex Function fitting

These fit various functions to your data.

@table @asis
@item @ref{detrend}
Removes a polynomial fit.
@item @ref{fit}
Fits to a sum of gaussians, a power function, or a user-specified function.
@item @ref{pit}
Returns the coefficients of a polynomial fit.
@item @ref{trend}
Returns a polynomial fit.
@end table

@c ------------------------------------------------------------------
@node Hyperbolic Functions, Interpolation, Fitting, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Hyperbolic Functions

@cindex Hyperbolic functions

These are various hyperbolic functions.

@table @asis
@item @ref{cosh}
Hyperbolic cosine.
@item @ref{sinh}
Hyperbolic sine.
@item @ref{tanh}
Hyperbolic tangent.
@end table

@c ------------------------------------------------------------------
@node Interpolation, Matrix Math, Hyperbolic Functions, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Interpolation

@cindex Interpolating functions

These functions perform interpolations of various kinds.

@table @asis
@item @ref{bisect}
Finds bisector positions using cubic spline interpolation.
@item @ref{cspline}
Interpolation using cubic splines.
@item @ref{expand}
Interpolation of images using bilinear or nearest-neighbor smoothing.
@item @ref{polate}
Linear interpolation.
@item @ref{regrid}
2D Interpolation unto a different coordinate grid using the
nearest-neighbor approximation.
@item @ref{regrid3}
2D Interpolation unto a different coordinate grid using bicubic
interpolation. 
@item @ref{stretch}
To distort according to displacement data using bicubic interpolation(?).
@item @ref{table}
Linear interpolation.
@item @ref{tense}
Interpolation using splines under tension.
@item @ref{tense_curve}
Interpolation using splines under tension.
@item @ref{tense_loop}
Interpolation using splines under tension.
@end table

@c ------------------------------------------------------------------
@node Matrix Math, Seek, Interpolation, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Matrix Math

@cindex Matrix mathematics

These routines perform various functions on matrices.

@table @asis
@item @ref{decomp}
LU decomposition of a matrix.
@item @ref{dsolve}
Solves a matrix equation using LU decomposition.
@item @ref{mproduct}
Multiplies two matrices.
@end table

@c ------------------------------------------------------------------
@node Seek, Smoothing, Matrix Math, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Seek

@cindex Seeking routines

These functions perform various tasks related to seeking particular
values.

@table @asis
@item @ref{find}
Find the first occurrence of or exceedance of a particular value.
@item @ref{find_max}
Find the values of local maxima.
@item @ref{find_maxloc}
Find the locations of local maxima.
@item @ref{find_min}
Find the values of local minima.
@item @ref{find_minloc}
Find the locations of local minima.
@item @ref{inpolygon}
Determine which points are inside a specified polygon.
@item @ref{local_max}
Return the locally maximum value.
@item @ref{local_maxloc}
Return the locations of local maxima.
@item @ref{local_min}
Return the values of local minima.
@item @ref{local_minloc}
Return the locations of local minima.
@item @ref{match}
Identify values that are in a particular data set.
@item @ref{maxloc}
Return the locations of global maxima.
@item @ref{minloc}
Return the locations of global minima.
@item @ref{multisieve}
Return the positions of specific target values in a data set.
@item @ref{sieve}
Find the positions where a specific condition is met.
@end table

@c ------------------------------------------------------------------
@node Smoothing, Sorting, Seek, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Smoothing

@cindex Smoothing functions

These functions perform various kinds of smoothing.

@table @asis
@item @ref{bsmooth}
Binary smoothing.
@item @ref{dsmooth}
Directional smoothing.
@item @ref{esmooth}
Exponential smoothing.
@item @ref{gsmooth}
Gaussian smoothing.
@item @ref{ksmooth}
Smoothing with a user-defined kernel.
@item @ref{lsmooth}
Directional spreading.
@item @ref{smooth}
Box-car smoothing.
@end table

@c ------------------------------------------------------------------
@node Sorting, Statistical Functions, Smoothing, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Sorting

@cindex Sorting routines

These routines perform various sorting tasks.

@table @asis
@item @ref{index}
Determine the ascending order.
@item @ref{sort}
Sort into ascending order.
@item @ref{tolookup}
Sort in multiple dimensions.
@end table

@c ------------------------------------------------------------------
@node Statistical Functions, Trigonometry, Sorting, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Statistical Functions

@cindex Statistical routines
@cindex Statistical distributions
@cindex Distributions, statistical

These functions are related to various probability distributions that
are useful in statistics, or calculate statistical properties.

@table @asis
@item @ref{beta}
The beta function.
@item @ref{chi2}
The chi-square function.
@item @ref{crosscorr}
The cross-correlation.
@item @ref{erf}
The error function.
@item @ref{erfc}
The complementary error function.
@item @ref{fratio}
The F variance ratio.
@item @ref{gamma}
The gamma function.
@item @ref{ibeta}
The incomplete beta function.
@item @ref{igamma}
The incomplete gamma function.
@item @ref{max}
The maximum value.
@item @ref{mean}
The mean value.
@item @ref{median}
The median value.
@item @ref{min}
The minimum value.
@item @ref{ncchi2}
The non-central chi-square function.
@item @ref{sdev}
The standard deviation.
@item @ref{student}
The Student's t-distribution function.
@item @ref{total}
The total.
@item @ref{variance}
The variance.
@end table

@c ------------------------------------------------------------------
@node Trigonometry,  , Statistical Functions, Math Routines
@comment  node-name,  next,  previous,  up
@subsection Trigonometry

@cindex Trigonometric functions

These are various trigonometrical functions.

@table @asis
@item @ref{acos}
The arc cosine.
@item @ref{asin}
The arc sine.
@item @ref{atan}
The arc tangent (ambiguous to 180 degrees).
@item @ref{atan2}
The arc tangent (ambiguous to 360 degrees).
@item @ref{cos}
The cosine.
@item @ref{sin}
The sine.
@item @ref{tan}
The tangent.
@end table
 
@c ------------------------------------------------------------------
@node Menus, Plots, Math Routines, Routine Groups
@comment  node-name,  next,  previous,  up
@section Menus

@cindex Menus
@cindex X-window menus

These routines deal with X-window menus.

@table @asis
@item @ref{checkmenu}
Check if the user selected a menu item.
@item @ref{menu}
Create a menu.
@item @ref{menuhide}
Hide a menu.
@item @ref{menuitem}
Change a menu item.
@item @ref{menupop}
Raise (pop up) a menu.
@item @ref{menuread}
Read a value throug a menu item.
@item @ref{menuzap}
Destroy a menu.
@item @ref{wait_for_menu}
Wait for the user to select a menu item.
@end table

@c ------------------------------------------------------------------
@node Plots, Postscript, Menus, Routine Groups
@comment  node-name,  next,  previous,  up
@section Plots

@cindex Line plot routines
@cindex Plot routines, line

These routines are involved in making (line) plots.

@table @asis
@item @ref{c}
Calligraphy.
@item @ref{callig}
Calligraphy.
@item @ref{contour}
Produce a contour plot.
@item @ref{coordtrf}
Transform between various plot and window-related coordinate systems.
@item @ref{erase}
Erase the screen.
@item @ref{limits}
Set or show limits on the plot coordinate ranges.
@item @ref{oplot}
Add another plot to an existing one.
@item @ref{pdev}
Set the plot device.
@item @ref{pen}
Set the pen width.
@item @ref{plot}
Produce a plot.
@item @ref{xymov}
Draw a line.
@end table

The following routines are involved in creating 3D plots (currently
under development).

@table @asis
@item @ref{fit3dcube}
Scale a 3D plot so it fits the screen.
@item @ref{plot3d}
Produce a 3D plot.
@item @ref{project}
Project a 3D plot data point into screen coordinates.
@item @ref{projection}
Set the 3D projection parameters.
@end table

@c ------------------------------------------------------------------
@node Postscript, Running, Plots, Routine Groups
@comment  node-name,  next,  previous,  up
@section Postscript

@cindex Postscript routines
@cindex Output, Postscript

These routines are involved in constructing Postscript files containing
plots and/or images.

@table @asis
@item @ref{postimage}
Write an image to a postscript file.
@item @ref{postraw}
Write a string directly into a postscript file.
@item @ref{postrel}
Finish and close a postscript file.
@item @ref{postrelease}
Finish and close a postscript file.
@end table

@c ------------------------------------------------------------------
@node Running, Stack, Postscript, Routine Groups
@comment  node-name,  next,  previous,  up
@section Running

@cindex Running LUX, routines dealing with

These routines deal with running LUX, and with variables independent
from their data contents.

@table @asis
@item @ref{batch}
Specify running in batch mode.
@item @ref{calculator}
Entering calculator mode.
@item @ref{compile}
Compile a string into a block routine.
@item @ref{default}
Specify a default value for a variable.
@item @ref{delete}
Delete a variable's data contents.
@item @ref{error}
Generate an error with a user-defined message.
@item @ref{eval}
Evaluate a string as LUX code.
@item @ref{execute}
Execute a string as LUX code.
@item @ref{exit}
Exit the LUX program.
@item @ref{ignore}
Ignore - do not execute - subsequent LUX code until a matching RESUME.
@item @ref{noecho}
Do not echo code to be compiled.
@item @ref{noop}
No operation (for debugging purposes).
@item @ref{quit}
Quit the LUX program.
@item @ref{restart}
Restart the LUX program.
@item @ref{resume}
Cancel the matching earlier IGNORE.
@item @ref{return}
Return from a user-defined subroutine or function.
@item @ref{set}
Set various aspects of the LUX session.
@item @ref{switch}
Switch the identity of two variables.
@item @ref{symbol}
Returns the symbol with the indicated name.
@item @ref{temporary}
Returns a temporary copy of the argument.
@item @ref{ulib}
Set the user's library (will be phased out).
@item @ref{wait}
Wait a particular number of seconds.
@item @ref{zap}
Completely remove a variable.
@end table

@c ------------------------------------------------------------------
@node Stack, String Routines, Running, Routine Groups
@comment  node-name,  next,  previous,  up
@section Stack

@cindex Stack routines

These routines deal with the stack of variables.

@table @asis
@item @ref{dump_stack}
Show the contents of the stack.
@item @ref{pop}
Pop values from the stack.
@item @ref{push}
Push values on the stack.
@end table

@code{PUSH,a,b} pushes @code{a} and @code{b} onto the stack in that
order, so that @code{b} ends up on top of the stack.  The contents of
the stack are listed in reverse order of pushing (i.e., the last pushed
one is listed first) by @code{dump_stack}.  The @code{pop} routine pops
values from the stack.  Arguments to @code{pop} that are named variables
receive successive values from the stack, so that after @code{PUSH,a,b},
@code{POP,c,d} restores the pushed value of @code{a} into @code{c}, and
the pushed value of @code{b} into @code{d}.  Arguments that are unnamed
must reduce to a number, and that number of values are then popped from
the stack into their original named source variables.  So, after
@code{PUSH,a,b}, @code{POP,2} restores @code{a} and @code{b} from the
stack.  If you want to restore the number of elements that is contained
in a named variable @code{n}, then use @code{POP,NUM=n}.  An argument to
keyword @code{num} is always treated first.

You can mix named variables and unnamed values in the argument list of
@code{pop}.  Named variables are treated in blocks, unnamed values are
treated one by one.  For example, @code{POP,a,b,3,c,d,e} restores first
to @code{b}, then to @code{a}, then three elements to their original
sources, then to @code{e}, then to @code{d}, and finally to @code{c}.

@c ------------------------------------------------------------------
@node String Routines, System, Stack, Routine Groups
@comment  node-name,  next,  previous,  up
@section String Routines

@cindex String routines

These routines deal with or yield @code{string}s (@ref{Strings}).

@table @asis
@item @ref{atol}
Reads a number from a string.
@item @ref{eval}
Evaluate a string as LUX code.
@item @ref{execute}
Execute a string as LUX code.
@item @ref{format_set}
Set or show the format for ASCII output.
@item @ref{fstring}
Construct a string from data values.
@item @ref{insert}
Insert a string into a string array(?).
@item @ref{isstring}
Determine if an expression is a string expression.
@item @ref{ist}
Convert a number to a string.
@item @ref{istring}
Convert a number to a string.
@item @ref{lowcase}
Convert the letters in a string to lower case.
@item @ref{lower}
Convert the letters in a string to lower case.
@item @ref{skipc}
Return part of a string, skipping specified characters.
@item @ref{smap}
Convert any data type to a string byte by byte.
@item @ref{str}
Convert a number to a string.
@item @ref{strarr}
Create a string array.
@item @ref{strcount}
Count the occurrences of a substring in a string.
@item @ref{string}
Convert a number to a string.
@item @ref{strlen}
Return the length of a string.
@item @ref{strloc}
Return the part of a string that starts with a specified substring.
@item @ref{strpos}
Return the position of a substring in a string.
@item @ref{strr}
Replace a substring.
@item @ref{strreplace}
Replace a substring.
@item @ref{strskp}
Returns the part of a string that follows a specified substring.
@item @ref{strsub}
Returns part of a string.
@item @ref{strtrim}
Returns a string with trailing blanks, tabs, and control characters
removed. 
@item @ref{upcase}
Converts letters in a string to upper case.
@item @ref{upper}
Converts letters in a string to upper case.
@end table

@c ------------------------------------------------------------------
@node System, Topology, String Routines, Routine Groups
@comment  node-name,  next,  previous,  up
@section System

@cindex System routines

These routines interact with the system outside LUX.

@table @asis
@item @ref{chdir}
Change the current directory.
@item @ref{info}
Returns information about LUX.
@item @ref{memory}
Returns information about memory use.
@item @ref{setenv}
Sets an environment variable.
@item @ref{showstats}
Show extensive information about the use of LUX's workspace.
@item @ref{spawn}
Send a command to the system.
@end table

@c ------------------------------------------------------------------
@node Topology, Windows, System, Routine Groups
@comment  node-name,  next,  previous,  up
@section Topology

@cindex Topology routines

These routines return information about the topology of the data.

@table @asis
@item @ref{area}
Label distinct areas in an image.
@item @ref{area2}
Label distinct areas in an image.
@item @ref{areaconnect}
Determine connections between areas in two images.
@item @ref{basin}
Determine distinct areas based on the principle of a watershed.
@item @ref{cluster}
Determine clusters of data points.
@item @ref{orientation}
Determine local orientation in a data set.
@item @ref{segment}
Segmentate an image based on local data curvature.
@end table

@c ------------------------------------------------------------------
@node Windows, Multi-Dim Routines, Topology, Routine Groups
@comment  node-name,  next,  previous,  up
@section Windows

@cindex X-window routines
@cindex Window routines, X

These routines deal with X-windows.

@table @asis
@item @ref{checkwindow}
Check if the user selected a position in a window.
@item @ref{coordtrf}
Converts coordinates between various plot and window coordinate systems.
@item @ref{erase}
Erase a window.
@item @ref{pen}
Set pen thickness.
@item @ref{pdev}
Select a plot device.
@item @ref{setbackground}
Set the background color of a window.
@item @ref{setbg}
Set the background color of a window.
@item @ref{setfg}
Set the foreground color of a window.
@item @ref{setforeground}
Set the foreground color of a window.
@item @ref{tv}
Show an image.
@item @ref{tvlab}
Write a label in a window.
@item @ref{tvlct}
Load a color table.
@item @ref{tvmap}
Show an image.
@item @ref{tvraw}
Show an image.
@item @ref{window}
Select a window.
@item @ref{xanimate}
Show a 3D data set as a 2D movie.
@item @ref{xclose}
Close the connection to the X server.
@item @ref{xcopy}
Copy image parts.
@item @ref{xcursor}
Select a pointer style.
@item @ref{xdelete}
Delete a window.
@item @ref{xevent}
Shows information on events currently in the event queue.
@item @ref{xflush}
Execute all pending X commands.
@item @ref{xfont}
Selects a font for use in a window.
@item @ref{xlabel}
Write a label in a window.
@item @ref{xlabelwidth}
Return the width of a label if it were written in a window.
@item @ref{xloop}
X window event manager.
@item @ref{xopen}
Open a connection to an X server and select either a private or a public
colormap.
@item @ref{xplace}
Wait for the user to select a position in a window.
@item @ref{xport}
Select or create a window.
@item @ref{xpurge}
Execute all pending X window commands and clear the event queue.
@item @ref{xquery}
Return info on the current position of the pointer.
@item @ref{xregister}
Select event types and sources for notification by the event manager.
@item @ref{xsetaction}
Select an action for combining a copied image part with the modified
image part.
@item @ref{xtv}
Display an image.
@item @ref{xtvread}
Read an image into an array.
@item @ref{xymov}
Draw a line in a window.
@end table

@c ------------------------------------------------------------------
@node Multi-Dim Routines,  , Windows, Routine Groups
@comment  node-name,  next,  previous,  up
@section Multi-Dimensional Routines

One of the strengths of LUX is that it often allows you to specify which
dimension or dimensions to apply a certain routine to, so that you do
not need to treat each part of the data separately.  Currently, the
following routines allow you to specify which dimension or dimensions
they should be applied to:

@ref{bisect}, @ref{bsmooth}, @ref{differ}, @ref{dimen}, @ref{dsum},
@ref{esmooth}, @ref{fft}, @ref{fsum}, @ref{gsmooth}, @ref{hilbert},
@ref{insert}, @ref{max}, @ref{maxfilter}, @ref{maxloc}, @ref{mean},
@ref{medfilter}, @ref{min}, @ref{minfilter}, @ref{minloc},
@ref{ordfilter}, @ref{power}, @ref{psum}, @ref{runcum}, @ref{runsum},
@ref{sdev}, @ref{shift}, @ref{smooth}, @ref{total}, @ref{variance}

@c ------------------------------------------------------------------
@node Installing LUX, Environment, Routine Groups, Top
@comment  node-name,  next,  previous,  up
@chapter Installing LUX

@cindex Installing LUX

You can obtain the LUX source code at @code{http://lux.quae.nl}.  The
distribution comes in one compressed tar file called
@file{lux-1.0.tar.gz} (if the version is 1.0).  To compile LUX, follow
the instructions given below (with @code{%} introducing a command line
to type in, do not type the @code{%} itself).

@enumerate
@item
Extract the sources from the distribution file:
@example
% tar xzf lux-1.0.tar.gz
@end example

A subdirectory @file{lux-1.0} is created and filled with all necessary
source files.

@item
Go into the source directory:

@example
% cd lux-1.0
@end example

@item
Configure for compilation on your system:

@example
% ./configure
@end example

Your system is investigated for various peculiarities, and various
necessary additional files are created, tailored to your system.  To
see all options of @code{configure}, do

@example
% ./configure --help
@end example

@item
Compile the source files in the local directory:

@example
% make
@end example

If all goes well, an executable @file{lux} is generated in the
@file{src} subdirectory.

@item
To run the tests provided with LUX, execute

@example
% make check
@end example

@item
If you want to make LUX available to all users on the system, then
type

@example
% make install
@end example

You may need administrative privileges for this, unless you specified
a @code{--prefix} on the @code{./configure} command that points to a
directory of your own; do @code{./configure --help} for details.

By default, the executable is installed as @code{/usr/local/bin/lux},
the documentation is installed as
@code{/usr/local/share/doc/lux.info*}.

You can read the documentation using

@example
% info lux
@end example

and also using the @code{help} command from inside LUX.

@end enumerate

@c ------------------------------------------------------------------
@node Environment, History, Installing LUX, Top
@comment  node-name,  next,  previous,  up
@chapter The LUX Environment

@cindex Environment variables
@cindex LUXDIR
@cindex LUX_PATH
@cindex LUXDRIVE
@cindex LUXFONTSDIR

LUX needs to know where certain auxilliary files and devices are located
on your computer system.  To that end, you need to specify some
environment variables in your computer's operating system.  LUX will
read those environment variables when it needs to find one of the files
or devices.

LUX may inspect the following environment variables:
@table @code
@item LUX_PATH
This variable should contain a list of names of the directories where
LUX is to search for user-defined LUX scripts (e.g., user definitions of
routines and functions) .  The directories must be separated by colons
(@code{:}).
@item LUXDIR
This variable should contain the name of the directory where the LUX help
file @file{lux.texi} is stored.
@item LUXFONTSDIR
This variable should contain the path where the LUX font files
(@file{font003.hex0} and similar other ones) can be found, if that
path is not @file{/usr/share/lux} or @file{/usr/local/share/lux}.
@item LUXDRIVE0, LUXDRIVE1, @dots{}
These variables should contain the names of external storage devices
such as tape drives.  The device linked to the name @code{LUXDRIVE0} is
accessed as tape drive 0 in LUX, and @code{LUXDRIVE1} links to tape
drive 1, etcetera.
@end table

The @code{make} command, when used in LUX's source directory, generates
a shell script @file{.luxenv} that contains definitions for these
environment variables.  The definition for @code{LUXDIR} in that script
is correct after you install the relevant LUX files through @code{make
install}.  The definitions for @code{LUX_PATH} and @code{LUXDRIVE0} in
that script are examples.

You are welcome to set the environment variables yourself.  How you
specify environment variables depends on your operating system, and
these variables may have a different name on different operating
systems.  On a UNIX-like system (Unix, Ultrix, Linux, Irix, Solaris,
etc.), you specify environment variables as shown in the following
examples:

Using tcsh, csh:
@example
setenv LUX_PATH         ".:~/lux/lib:~/lux/slib"
setenv LUXDRIVE0        "/dev/rmt/0n"
@end example

Using sh, ksh, or bash:
@example
LUX_PATH=".:~/lux/lib:~/lux/slib"
LUXDRIVE0="/dev/rmt/0n"
@end example

@c ------------------------------------------------------------------
@node History, Reference Manual, Environment, Top
@comment  node-name,  next,  previous,  up
@chapter LUX's History

@cindex History of LUX

LUX is a fork of ANA.  ANA was originally designed to process data
from the Solar Maximum Mission (SMM) satellite, which flew in the
early 1980s.  It was implemented for the VAX VMS operating system in
assembly code and a little bit of Fortran mostly by Richard Shine (of
the then Lockheed Palo Alto Research Laboratory, nowadays known as the
Lockheed Martin Solar & Astrophysics Laboratory) in Palo Alto,
California.

Around 1990, Richard Shine converted the assembly code to C code and
ported ANA to SGI's Irix operating system.  At that time, Louis Strous
at Utrecht University in the Netherlands took the Irix copy and ported
it to Dec Ultrix.  Shine and Strous have mostly independently improved
ANA since then, leading to divergent versions of ANA with a common
subset of capabilities.

In 1994, Strous rewrote ANA's parser and compiler, replacing the old
parser with a new one, using GNU's bison parser generator.  The new
parser and compiler allowed simple addition of new features to the
language, such as keywords arguments and subscripting of expressions.

Between 1994 and 1999, the Shine and Strous versions of ANA drifted
apart somewhat.  In early 1999, Strous produced a version (ANA 3) that
is supposedly backwardly compatible with both the older Shine and
Strous versions.  Since that time, the two versions have diverged
again.

In 2013, Strous renamed his version of ANA to LUX to avoid confusion.

@c ------------------------------------------------------------------
@node Reference Manual, gnu Free Documentation License, History, Top
@comment  node-name,  next,  previous,  up
@chapter Reference Manual

@cindex Reference Manual

This chapter lists all built-in subroutines, functions, status
functions, and global variables that are available in LUX.

If the text describing such an item starts with a bracketed word such as
@code{[X11]}, then the item depends on the one or more specialized
capabilities, such as additional software packages, that are not
available on all systems.  For a list of these packages, see
@ref{Packages}.

A code such as @code{[3.1.321]} at the very end of an entry indicates
the version number (@code{3.1}) and patch level number (@code{321}) at
which the routine described in the entry was last changed.  If your
version of LUX is older, then not all features described for this entry
may be supported by it.

@menu
* Packages::                    Routines/variables of varying availability
* Read-Only Globals::           Global variables that the user cannot modify
* Read-Write Global Vars::      Global variables that the user can modify
* Status Funcs::                Global variables that query the system
* Internal Routines::           Routines that are built in to LUX
@end menu

@c ------------------------------------------------------------------
@node Packages, Read-Only Globals, Reference Manual, Reference Manual
@comment  node-name,  next,  previous,  up
@section Packages

@cindex Packages of routines, functions, and global variables
@cindex Availability of routines, functions, and global variables

Not all computers are the same, and not all operating systems offer the
same capabilities and under the same names, though there is an extensive
set of standard capabilities with standard names.  Those subroutines,
functions, status functions, and global variables that require
capabilities that your computer system does not offer cannot be made
available in your version of LUX.  When you're installing LUX, then the
configuration script tests your system to see which key capabilities it
has and which ones it lacks, and routines and such are correspondingly
included or omitted from your version of LUX.

We say that those routines and such that depend on the availability of a
certain key capability are part of the same @emph{package}.  Some
routines may be part of more than one package.  Below, we list the
packages that are currently recognized.

See also: @ref{Installing LUX}

@c ------------------------------------------------------------------
@menu
* debug::
* develop::
* jpeg::
* motif::
* regex_h::
* sofa::
* tape::
* x11::
@end menu

@node debug, develop, Packages, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[DEBUG]}

The @code{[DEBUG]} package contains subroutines and functions that are
useful to program developers to debug the LUX program itself; i.e., to
discover why some aspect of LUX is not reacting as advertised.  These
routines are generally of no interest to the user of LUX.  This package
is included if the @code{--enable-debug} option is given to
@code{./configure}.  Besides including some routines and functions, this
selection also replaces certain internal routines that deal with
requests for and release of memory areas with versions that allow
program developers to check for mistakes in these matters.  These
replacement versions are @emph{much} slower than their non-debugging
versions.

@c ------------------------------------------------------------------
@node develop, jpeg, debug, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[DEVELOP]}

The @code{[DEVELOP]} package contains subroutines and functions that are
still in development.  These items may contain serious errors, may be
unfinished, and may yet be removed if they turn out not to be as useful
as the developers hoped!  Use them at your own risk.  You include this
package by specifying the @code{--enable-develop} option to
@code{./configure} when installing LUX.

See also: @ref{Installing LUX}

@c ------------------------------------------------------------------
@node jpeg, motif, develop, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[JPEG]}

The @code{[JPEG]} package contains subroutines that deal with files that
are JPEG-compressed.  It is included automatically if the appropriate
JPEG library is detected on your computer system, unless you specify
option @code{--without-jpeg} with @code{./configure}.

See also: @ref{Installing LUX}
@c ------------------------------------------------------------------
@node motif, regex_h, jpeg, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[MOTIF]}

The @code{[MOTIF]} package contains those subroutines and functions that
deal with widgets.  Currently, LUX uses the @code{Motif} library to
generate widgets, because of its widespread use and availability.
However, this library is not part of LUX itself, but must be obtained
separately from a commercial company.  If a viable non-commercial
alternative becomes widely available, and if the authors find the time,
then they may switch to such an alternative.

The @code{[MOTIF]} package is contained in the @code{[X11]} package.
The @code{[MOTIF]} package is included automatically it is detected on
your computer system, and if also the @code{[X11]} package is included,
unless you specify the @code{--without-motif} option to
@code{./configure}.

See also: @ref{Installing LUX}, @ref{x11}

@c ------------------------------------------------------------------
@node regex_h, sofa, motif, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[REGEX_H]}

The @code{[REGEX_H]} package contains routines that match strings to
regular expressions.  It is included automatically if that capability is
detected on your system.

@c ------------------------------------------------------------------
@node sofa, tape, regex_h, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[SOFA]}

The @code{[SOFA]} package contains LUX bindings for routines from the
SOFA (``Standards of Fundamental Astronomy'') software library.

@c ------------------------------------------------------------------
@node tape, x11, sofa, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[TAPE]}

The @code{[TAPE]} package contains routines that interact with magnetic
tape drives.  It is included automatically if that capability is
detected on your system.

@c ------------------------------------------------------------------
@node x11,  , tape, Packages
@comment  node-name,  next,  previous,  up
@subsection @code{[X11]}

The @code{[X11]} package contains all subroutines and functions that
produce graphical output on the screen.  LUX uses the freely available
and free X11 library to produce graphical output.  It is included
automatically if the X11 library is detected on your computer system,
unless you specify @code{--without-x} as an option to
@code{./configure}.  If the @code{[X11]} package is not included, then
you can still generate graphical output, but only output to files.

See also: @ref{Installing LUX}

@c ------------------------------------------------------------------
@node Read-Only Globals, Read-Write Global Vars, Packages, Reference Manual
@section Read-Only Global Variables

@cindex Read-only global variables
@cindex Global variables, read-only
@cindex Variables, global read-only

The following variables offer certain physical and mathematical
constants, and also some constants specific to LUX.  These
variables are read-only: They may be used in expressions, but cannot be
changed.  These variables are also global: They are recognized
everywhere, including inside subroutines and functions.

@c --------------------------------------
@menu
* #0::                          Zero
* #1::                          One
* #2pi::                        Two pi
* #42::                         The answer to Life, Universe, and Everything
* #c::                          Speed of light (cgs)
* #class::                      LUX classes structure
* #col::                        Number of columns on the terminal
* #coordsys::                   LUX coordinate systems structure
* #deg::                        Degrees to radians
* #d.r::                        Degrees to radians
* #e::                          Base of natural logarithm
* #ec::                         Electron charge (cgs)
* #event::                      LUX events structure
* #filetype::                   Data file types
* #g::                          Gravitational constant (cgs)
* #h::                          Planck constant (cgs)
* #hb::                         Planck constant divided by pi (cgs)
* #i::                          Imaginary unit
* #infty::                      Infinity
* #k::                          Boltzmann constant (cgs)
* #m::                          Electron mass (cgs)
* #max_args::                   Maximum number of arguments
* #max_byte::                   Greatest value possible in a BYTE
* #max_dims::                   Maximum allowed number of array dimensions
* #max_double::                 Greatest value possible in a DOUBLE
* #max_float::                  Greatest value possible in a FLOAT
* #max_int64::
* #max_long::                   Greatest value possible in a LONG
* #max_pixmap::                 Greatest pixmap number
* #max_window::                 Greatest window number
* #max_word::                   Greatest value possible in an INT
* #min_double::                 Smallest nonzero value possible in a DOUBLE
* #min_float::                  Smallest nonzero value possible in a FLOAT
* #min_int64::
* #min_long::                   Most negative value possible in a LONG
* #min_word::                   Most negative value possible in an INT
* #minus1::                     Minus one
* #msbfirst::                   Byte order
* #pi::                         Pi
* #p3d::                        Projection matrix
* #r::                          Gas constant (cgs)
* #r.d::                        Radians to degrees
* #rad::                        Radians to degrees
* #row::                        Number of lines on the terminal
* #stack::                      User stack
* #type::                       LUX data types
* #typesize::                   Sizes of data types
* #zero::                       System zero (don't use)
@end menu

@node #0, #1, Read-Only Globals, Read-Only Globals
@subsection #0

Has value @code{LONG 0}.

See also:  @ref{#zero}

@c --------------------------------------
@node #1, #2pi, #0, Read-Only Globals
@subsection #1

Has value @code{LONG 1}.

@c --------------------------------------
@node #2pi, #42, #1, Read-Only Globals
@subsection #2pi

Has the @code{double} value of twice pi.

See also:  @ref{#pi}

@c --------------------------------------
@node #42, #c, #2pi, Read-Only Globals
@subsection #42

Has value @code{LONG 42}.  This is "the answer to the question of life,
the Universe, and everything," according to Douglas Adams'
@emph{Hitch-Hiker's Guide to the Universe}.

@c --------------------------------------
@node #c, #class, #42, Read-Only Globals
@subsection #c

Has the @code{float} value of the speed of light in vacuum, in cgs units.

@c --------------------------------------
@node #class, #col, #c, Read-Only Globals
@subsection #class

Is an enumeration constant (a read-only @code{list}, see @ref{Lists})
containing the numerical values of the various classes of LUX variables.
Members: @code{scalar}, @code{string}, @code{range}, @code{array},
@code{transfer}, @code{assoc}, @code{func_ptr}, @code{scal_ptr},
@code{subsc_ptr}, @code{filemap}, @code{clist}, @code{list},
@code{keyword}, @code{list_ptr}, @code{cplist}, @code{subroutine},
@code{function}, @code{blockroutine}, @code{evb}, @code{fixed_number},
@code{undefined}.

See also: @ref{Data Classes}, @ref{#type}

@c --------------------------------------
@node #col, #coordsys, #class, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #col

Contains the number of columns on your terminal as derived by querying
the system.  This value is also the default of @code{!col}.

See also: @ref{!col}, @ref{#row}

@c --------------------------------------
@node #coordsys, #deg, #col, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #coordsys

Is an enumeration constant (a read-only @code{list}, see @ref{Lists})
that contains constants to indicate the various coordinate systems
available in LUX windows.  Members: @code{dep}, @code{dev}, @code{dvi},
@code{img}, @code{plt}, @code{rim}, @code{rpl}, @code{x11}.

See also: @ref{Screen Coordinates}

@c --------------------------------------
@node #deg, #d.r, #coordsys, Read-Only Globals
@subsection #deg

Is the @code{float} ratio between a degree and a radian.

Reverse:  @ref{#rad}

@c --------------------------------------
@node #d.r, #e, #deg, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #d.r

Is a synonym of scalar @code{#deg}.  It is one of only two variable
names that may contain a period.  You are encouraged to use @code{#deg}
instead, because @code{#d.r} may be retracted in the future.

See also: @ref{#deg}, @ref{#rad}
@c --------------------------------------
@node #e, #ec, #d.r, Read-Only Globals
@subsection #e

Has the @code{float} value of @code{EXP(1)}.

See also: @ref{exp}, @ref{log}

@c --------------------------------------
@node #ec, #event, #e, Read-Only Globals
@subsection #ec

Has the @code{float} value of the electric charge of an electron, in cgs
units.

@c --------------------------------------
@node #event, #filetype, #ec, Read-Only Globals
@subsection #event

An enumeration constant (a read-only @code{list}, see @ref{Lists})
containing the numerical values of the various event types that feature
in @code{xregister} and @code{xloop}.  Members: @code{keypress},
@code{buttonpress}, @code{buttonrelease}, @code{pointermotion},
@code{enterwindow}, @code{leavewindow}, @code{window}, @code{menu}.

See also: @ref{xloop}, @ref{xregister}

@c --------------------------------------
@node #filetype, #g, #event, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #filetype

An enumeration constant (read-only @code{list}, see @ref{Lists})
containing the numerical values associated with various data file types.
Members: @code{fz}, @code{astore}, @code{idlsave}, @code{gif},
@code{tiff}, @code{jpeg}, @code{fits}.

See also: @ref{filetype}, @ref{filetypename}

@c --------------------------------------
@node #g, #h, #filetype, Read-Only Globals
@subsection #g

Has the @code{float} value of the constant of gravity, in cgs units.

@c --------------------------------------
@node #h, #hb, #g, Read-Only Globals
@subsection #h

Has the @code{float} value of the constant of Planck, in cgs units.

See also: @ref{#hb}

@c --------------------------------------
@node #hb, #i, #h, Read-Only Globals
@subsection #hb

Has the @code{float} value of the constant of Planck, divided by two
times pi, in cgs units (i.e., h-bar).

See also: @ref{#h}

@c --------------------------------------
@node #i, #infty, #hb, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #i

Is the @code{cfloat} value of the imaginary unit.  @code{#i^2} is equal
to @code{-1}.

@c --------------------------------------
@node #infty, #k, #i, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #infty

On computers that comply with the IEEE 754-1985 standard for binary
representation of floating-point numbers, floating-point divisions of
positive numbers by zero yield @code{Inf} (positive infinity).  On such
computers, this value is returned by @code{#infty}.  On computers that
do not allow floating-point division by zero, @code{#infty} returns the
greatest representable @code{float} number, @code{#max_float}.

See also: @ref{#max_float}.
@c --------------------------------------
@node #k, #m, #infty, Read-Only Globals
@subsection #k

Has the @code{float} value of the constant of Boltzmann, in cgs units.

@c --------------------------------------
@node #m, #max_args, #k, Read-Only Globals
@subsection #m

Has the @code{float} value of the mass of an electron, in cgs units.

@c --------------------------------------
@node #max_args, #max_byte, #m, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_args

The greatest number of arguments that is allowed for a built-in
subroutine or function.

@c --------------------------------------
@node #max_byte, #max_dims, #max_args, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_byte

The largest value representable in a variable of type @code{byte}.

See also: @ref{#max_double}, @ref{#max_int64}, @ref{#max_float},
@ref{#max_long}, @ref{#max_word}, @ref{Numerical Data Types}

@c --------------------------------------
@node #max_dims, #max_double, #max_byte, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_dims

The maximum number of dimensions that is allowed for arrays and file
arrays.

See also: @ref{Arrays}, @ref{File Arrays}

@c --------------------------------------
@node #max_double, #max_float, #max_dims, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_double

The largest absolute value representable in a variable of type
@code{double}, and in the real and imaginary parts of a variable of type
@code{cdouble}.

See also: @ref{#max_byte}, @ref{#max_float}, @ref{#max_int64},
@ref{#max_long}, @ref{#max_word}, @ref{#min_double}, @ref{Numerical
Data Types}

@c --------------------------------------
@node #max_float, #max_int64, #max_double, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_float

The largest absolute value representable in a variable of type
@code{float}, and in the real and imaginary parts of a variable of type
@code{cfloat}.

See also: @ref{#max_byte}, @ref{#max_double}, @ref{#max_int64},
@ref{#max_long}, @ref{#max_word}, @ref{#min_float}, @ref{Numerical
Data Types}

@c --------------------------------------
@node #max_int64, #max_long, #max_float, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_int64

The largest value representable in a variable of type @code{int64}.

See also: @ref{#max_double}, @ref{#max_byte}, @ref{#max_float},
@ref{#max_long}, @ref{#max_word}, @ref{Numerical Data Types}

@c --------------------------------------
@node #max_long, #max_pixmap, #max_int64, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_long

The largest value representable in a variable of type @code{long}.

See also: @ref{#max_byte}, @ref{#max_double}, @ref{#max_float},
@ref{#max_int64}, @ref{#max_word}, @ref{#min_long}, @ref{Numerical
Data Types}

@c --------------------------------------
@node #max_pixmap, #max_window, #max_long, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_pixmap

The greatest (positive integer) allowed pixmap number.

See also: @ref{xport}, @ref{#max_window}

@c --------------------------------------
@node #max_window, #max_word, #max_pixmap, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_window

The greatest (positive integer) allowed window number.

See also: @ref{xport}, @ref{#max_pixmap}

@c --------------------------------------
@node #max_word, #min_double, #max_window, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #max_word

The largest value representable in a variable of type @code{word}.

See also: @ref{#max_byte}, @ref{#max_double}, @ref{#max_float},
@ref{#max_int64}, @ref{#max_long}, @ref{#min_word}, @ref{Numerical
Data Types}

@c --------------------------------------
@node #min_double, #min_float, #max_word, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #min_double

The smallest non-zero absolute value representable in a variable of type
@code{double}, and in the real and imaginary parts of a variable of type
@code{cdouble}.

See also: @ref{#max_double}, @ref{#min_float}, @ref{#min_int64},
@ref{#min_long}, @ref{#min_word}, @ref{Numerical Data Types}

@c --------------------------------------
@node #min_float, #min_int64, #min_double, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #min_float

The smallest non-zero absolute value representable in a variable of type
@code{float}, and in the real and imaginary parts of a variable of type
@code{cfloat}.

See also: @ref{#max_float}, @ref{#min_double}, @ref{#min_int64},
@ref{#min_long}, @ref{#min_word}, @ref{Numerical Data Types}

@c --------------------------------------
@node #min_int64, #min_long, #min_float, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #min_int64

The most negative value representable in a variable of type
@code{int64}.

See also: @ref{#max_int64}, @ref{#min_double}, @ref{#min_float},
@ref{#min_long}, @ref{#min_word}, @ref{Numerical Data Types}

@c --------------------------------------
@node #min_long, #min_word, #min_int64, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #min_long

The most negative value representable in a variable of type
@code{long}.

See also: @ref{#max_long}, @ref{#min_double}, @ref{#min_float},
@ref{#min_int64}, @ref{#min_word}, @ref{Numerical Data Types}

@c --------------------------------------
@node #min_word, #minus1, #min_long, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #min_word

The most negative value representable in a variable of type @code{word}.

See also: @ref{#max_word}, @ref{#min_double}, @ref{#min_float},
@ref{#min_int64}, @ref{#min_long}, @ref{Numerical Data Types}

@c --------------------------------------
@node #minus1, #msbfirst, #min_word, Read-Only Globals
@subsection #minus1

Has value @code{LONG -1}.

@c --------------------------------------
@node #msbfirst, #pi, #minus1, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #msbfirst

If equal to @code{1}, then the computer stores multi-byte data values
with the most significant byte first (i.e., is bigendian).  If equal to
@code{0}, then the computer stores such values with the least
significant byte first (i.e., is littleendian).

See also: @ref{Byte Order}, @ref{endian}

@c --------------------------------------
@node #pi, #p3d, #msbfirst, Read-Only Globals
@subsection #pi

Has the @code{double} value of pi, the ratio between the circumference
and the radius of a circle.

See also: @ref{#2pi}

@c --------------------------------------
@node #p3d, #r, #pi, Read-Only Globals
@subsection #p3d

@code{[@ref{develop} package]} A four-by-four @code{float} matrix that specifies a
combination of rotations, scalings, and translations for
three-dimensional transformations.

See also: @ref{plot3d}, @ref{project}

@c --------------------------------------
@node #r, #r.d, #p3d, Read-Only Globals
@subsection #r

Has the @code{float} value of the universal gas constant, in cgs units.

@c --------------------------------------
@node #r.d, #rad, #r, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #r.d

Is a synonym of scalar @code{#rad}.  It is one of only two variable
names that may contain a period.  You are encouraged to use @code{#rad}
instead, because @code{#r.d} may be retracted in the future.

See also: @ref{#deg}, @ref{#rad}
@c --------------------------------------
@node #rad, #row, #r.d, Read-Only Globals
@subsection #rad

Is the @code{float} ratio between a radian and a degree.

Reverse: @ref{#deg}
@c --------------------------------------
@node #row, #stack, #rad, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #row

Contains the number of rows (lines) on your terminal, as derived by
querying the system.  This value is also the default for @code{!row}.

See also: @ref{#col}, @ref{!row}

@c --------------------------------------
@node #stack, #type, #row, Read-Only Globals
@subsection #stack

Is a @code{list} variable (@ref{Lists}) addressing the user stack.
E.g., the top element is addressed as @code{#stack(0)}.

See also: @ref{pop}, @ref{push}
@c --------------------------------------
@node #type, #typesize, #stack, Read-Only Globals
@subsection #type

Is an enumeration constant (a read-only @code{list}, see @ref{Lists})
containing the numerical values of the data types of the various LUX
variables.  Members: @code{byte}, @code{word}, @code{long},
@code{int64}, @code{float}, @code{double}, @code{string},
@code{undefined}.

See also: @ref{#class}, @ref{Numerical Data Types}
@c --------------------------------------
@node #typesize, #zero, #type, Read-Only Globals
@comment  node-name,  next,  previous,  up
@subsection #typesize

An array that contains the sizes (in bytes) of data values for the
various data types.  The size (in bytes) of one element of data type
@code{xxx} is returned by @code{#typesize(TYPE.xxx)}.

See also: @ref{#type}

@c --------------------------------------
@node #zero,  , #typesize, Read-Only Globals
@subsection #zero

This variable has the value @code{LONG 0}, but is for internal use only.
The user must not use @code{#zero}.  Instead, use @code{#0} or @code{0}.

See also: @ref{#0}

@c ----------------------------------------------------------------------
@node Read-Write Global Vars, Status Funcs, Read-Only Globals, Reference Manual
@section Read-Write Global Variables

@cindex Read-write global variables
@cindex Global variabes, read-write
@cindex Variables, global read-write

The following variables either select certain options for specific
subroutines and functions, or contain information returned by specific
subroutines or functions.  They can be read and modified.  They are also
global: They are recognized everywhere, including inside subroutines and
functions.

@c ---------------------------------------
@menu
* !autocon::                    Automatic contour level selection
* !badmatch::                   Number of bad matched in GRIDMATCH
* !bb_update::                  Update plot bounding box
* !bc::
* !button::                     Pointer button state
* !bxb::                        Bounding box lower x
* !bxt::                        Bounding box upper x
* !byb::                        Bounding box lower y
* !byt::                        Bounding box upper y
* !col::                        Number of columns on the terminal
* !contour_border::
* !contour_box::                Draw a small box at origin of contour plot
* !contour_dash_lev::
* !contour_mode::
* !contour_nlev::               Number of counter levels
* !contour_style::
* !contour_ticks::
* !contour_tick_fac::
* !contour_tick_pen::
* !cratio::                     Plot symbol aspect ratio
* !crunch_bits::                Number of bits in last CRUNCH
* !crunch_bpp::                 Number of bits per element in last CRUNCH
* !crunch_slice::               CRUNCH tweak parameter
* !dashsize::                   Relative size of plot dashes
* !dlabx::                      Plot x axis divisions
* !dlaby::                      Plot y axis divisions
* !dot::
* !dots::
* !erase::                      Automatic window erase on PLOT
* !errno::                      Last system error number
* !error_extra::
* !eventsource::                Source window of event
* !eventtype::                  Type of event
* !fftdp::                      Double precision FFTs
* !font::                       Default font number
* !format_c::                   Output format for complex numbers
* !format_f::                   Output format for floating-point numbers
* !format_i::                   Output format for integer numbers
* !format_s::                   Output format for strings
* !fsize::                      Default font size 
* !fstepx::                     Free data increment per major x tick mark
* !fstepy::                     Free data increment per major y tick mark
* !fstepz::                     Free data increment per major z tick mark
* !fz::                         Free lower y plot bound
* !fzx::                        Free lower x plot bound
* !fzz::                        Free lower z plot bound
* !height::                     Last window height
* !histmin::                    Last histogram minimum ordinate
* !histmax::                    Last histogram maximum ordinate
* !iblank::
* !iorder::                     TV coordinate swap order
* !itmax::
* !ix::                         Last selected DEV x coordinate in window
* !ixhigh::
* !iy::                         Last selected DEV y coordinate in window
* !iyhigh::
* !kb::
* !keycode::                    Code of pressed physical key
* !keystate::                   State of modifier keys
* !keysym::                     Character code of pressed key
* !labx::                       Labels on plot x axis
* !laby::                       Labels on plot y axis
* !landscape::                  Landscape mode for PostScript file
* !lastmax::                    Last maximum value
* !lastmaxloc::                 Last maximum location
* !lastmean::                   Last mean value
* !lastmin::                    Last minimum value
* !lastminloc::                 Last minimum location
* !lastsdev::                   Last standard deviation
* !last_menu::                  Last selected menu entry
* !maxhistsize::                Histogram upper size limit
* !maxregridsize::              REGRID upper size limit
* !menu_item::                  Last selected menu item
* !meritc::                     Last merit value of displacement determination
* !motif::                      MOTIF available
* !mxb::                        Last plot x lower data value
* !mxt::                        Last plot x upper data value
* !myb::                        Last plot y lower data value
* !myt::                        Last plot y upper data value
* !mzb::                        Last plot z lower data value
* !mzt::                        Last plot z upper data value
* !narg::                       Arguments to current user-defined routine
* !noeventflush::               Do not flush events at start of XLOOP
* !pdev::                       Plot device
* !pen::                        Plot pen width
* !pltyp::                      Plot style (linear/logarithmic)
* !plxerrb::                    Plot x error bar height
* !plyerrb::                    Plot y error bar width
* !ps_file::                    PostScript output file
* !range_warn_flag::
* !read_count::
* !redim_warn_flag::
* !root_x::                     Last root window x
* !root_y::                     Last root window y
* !row::                        Number of lines on the terminal
* !rx::                         Round plot x axis range
* !ry::                         Round plot y axis range
* !scalemax::                   Image scale maximum
* !scalemin::                   Image scale minimum
* !screen_height::              Screen height
* !screen_width::               Screen width
* !sort_flag::                  Select SORT algorithm
* !startx::                     Data value of first major x tick mark
* !starty::                     Data value of first major y tick mark
* !stepx::                      Data increment per major x tick mark
* !stepy::                      Data increment per major y tick mark
* !stretchmark::
* !stretch_clip::
* !symratio::                   Plot symbol aspect ratio
* !symsize::                    Relative symbol size
* !tapemessages::
* !tickx::                      Plot x tick mark size
* !tickxr::                     Plot x secondary tick mark relative size
* !ticky::                      Plot y tick mark size
* !tickyr::                     Plot y secondary tick mark relative size
* !tvix::                       Left edge coordinate of last image
* !tvixb::                      Right edge coordinate of last image
* !tviy::                       Bottom edge coordinate of last image
* !tviyb::                      Top edge coordinate of last image
* !tvscale::                    Current magnification factor
* !tvsmt::                      Select SMOOTH algorithm
* !vdev::                       Video device
* !width::                      Current window width
* !window::                     Current window number
* !wxb::                        Plot window DEV lower x
* !wxt::                        Plot window DEV upper x
* !wyb::                        Plot window DEV lower y
* !wyt::                        Plot window DEV upper y
* !wzb::                        Plot window DEV lower z
* !wzt::                        Plot window DEV upper z
* !xb::
* !xc::                         Calligraphy current x
* !xerrors::
* !xf::                         Last selected x coordinate in window
* !xmenu::
* !xroot::                      Last selected x coordinate in root window
* !xt::
* !xtime::
* !yb::
* !yc::                         Calligraphy current y
* !yf::                         Last selected y coordinate in window
* !ymenu::
* !yroot::                      Last selected y coordinate in root window
* !yt::
* !yydebug::                    Select parser debugging
* !zoomframe::                  Current ZOOM frame
* !zoomhigh::                   Upper limit of ZOOM contrast
* !zoomlow::                    Lower limit of ZOOM contrast
* !zoommag::                    Last used magnification factor in ZOOM
* !zoomx::                      Last used center x coordinate in ZOOM
* !zoomy::                      Last used center y coordinate in ZOOM
@end menu

@c ---------------------------------------
@node !autocon, !badmatch, Read-Write Global Vars, Read-Write Global Vars
@subsection !autocon

A @code{long} variable that determines how countour levels are
determined by the routine @code{contour}.  If it is non-zero, then
contour levels are determined automatically from the data being
contoured.  If it is zero, then the contour levels in @code{$CONTOURS}
are used.  The default value is 1.

See also: @ref{contour}
@c ---------------------------------------
@node !badmatch, !bb_update, !autocon, Read-Write Global Vars
@subsection !badmatch

This @code{long} variable indicates the number of grid points for which
no proper match could be found in routine @code{gridmatch}.

See also: @ref{gridmatch}

@c ---------------------------------------
@node !bb_update, !bc, !badmatch, Read-Write Global Vars
@subsection !bb_update

This @code{long} variable indicates, when non-zero, that the bounding
box is updated by graphical output.

See also: @ref{!bxb}, @ref{!bxt}, @ref{!byb}, @ref{!byt},
@ref{postimage}, @ref{xymov}

@c ---------------------------------------
@node !bc, !button, !bb_update, Read-Write Global Vars
@subsection !bc

This @code{long} variable holds the number of bytes read in the last
tape read or write.

See also: @ref{taprd}, @ref{tapwrt}

@c ---------------------------------------
@node !button, !bxb, !bc, Read-Write Global Vars
@subsection !button

This @code{long} variable holds the code of the last pressed mouse
button.

See also: @ref{checkwindow}, @ref{xplace}

@c ---------------------------------------
@node !bxb, !bxt, !button, Read-Write Global Vars
@subsection !bxb

This @code{float} variable holds the smallest x coordinate in the current
bounding box.

See also: @ref{!bb_update}, @ref{!bxt}, @ref{!byb}, @ref{!byt}

@c ---------------------------------------
@node !bxt, !byb, !bxb, Read-Write Global Vars
@subsection !bxt

This @code{float} variable holds the largest x coordinate in the current
bounding box. 

See also: @ref{!bb_update}, @ref{!bxb}, @ref{!byb}, @ref{!byt}

@c ---------------------------------------
@node !byb, !byt, !bxt, Read-Write Global Vars
@subsection !byb

This @code{float} variable holds the smallest y coordinate in the current
bounding box. 

See also: @ref{!bb_update}, @ref{!bxb}, @ref{!bxt}, @ref{!byt}

@c ---------------------------------------
@node !byt, !col, !byb, Read-Write Global Vars
@subsection !byt

This @code{float} variable holds the largest y coordinate in the current
bounding box.

See also: @ref{!bb_update}, @ref{!bxb}, @ref{!bxt}, @ref{!byb}

@c ---------------------------------------
@node !col, !contour_border, !byt, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !col

Contains the number of columns on the terminal.  The value of this
variable is used for page-formatted output to the screen (such as that
generated by the @code{help} and @code{info} commands).  It is equal to
@code{#col} by default, but can be changed by the user.

See also: @ref{#col}, @ref{help}, @ref{info}, @ref{!row}

@c ---------------------------------------
@node !contour_border, !contour_box, !col, Read-Write Global Vars
@subsection !contour_border

This @code{long} variable specifies the size of the border of a contour
plot, and defaults to 1.

See also: @ref{contour}

@c ---------------------------------------
@node !contour_box, !contour_dash_lev, !contour_border, Read-Write Global Vars
@subsection !contour_box

If this @code{long} variable is non-zero, then a small box is drawn at the
origin of the contour plot.  It defaults to 1.

See also: @ref{contour}

@c ---------------------------------------
@node !contour_dash_lev, !contour_mode, !contour_box, Read-Write Global Vars
@subsection !contour_dash_lev

Contour levels below this @code{float} value are drawn dashed, and those
above this level are drawn solid.  The default value is 0.0.

See also: @ref{contour}

@c ---------------------------------------
@node !contour_mode, !contour_nlev, !contour_dash_lev, Read-Write Global Vars
@subsection !contour_mode

See also: @ref{contour}

@c ---------------------------------------
@node !contour_nlev, !contour_style, !contour_mode, Read-Write Global Vars
@subsection !contour_nlev

This @code{long} variable holds the number of levels used to make a
contour plot.  It defaults to 5.

See also: @ref{contour}

@c ---------------------------------------
@node !contour_style, !contour_ticks, !contour_nlev, Read-Write Global Vars
@subsection !contour_style

See also: @ref{contour}

@c ---------------------------------------
@node !contour_ticks, !contour_tick_fac, !contour_style, Read-Write Global Vars
@subsection !contour_ticks

See also: @ref{contour}

@c ---------------------------------------
@node !contour_tick_fac, !contour_tick_pen, !contour_ticks, Read-Write Global Vars
@subsection !contour_tick_fac

See also: @ref{contour}

@c ---------------------------------------
@node !contour_tick_pen, !cratio, !contour_tick_fac, Read-Write Global Vars
@subsection !contour_tick_pen

See also: @ref{contour}

@c ---------------------------------------
@node !cratio, !crunch_bits, !contour_tick_pen, Read-Write Global Vars
@subsection !cratio

This @code{float} variable holds the y-to-x ratio factor to apply to
plotted symbols, if compensation is needed because of a non-square
window.  It defaults to 1.

See also: @ref{callig}, @ref{plot}

@c ---------------------------------------
@node !crunch_bits, !crunch_bpp, !cratio, Read-Write Global Vars
@subsection !crunch_bits

This @code{long} variable holds the number of bits that the last
@code{crunch}-compressed array needed.

See also: @ref{crunch}, @ref{fcwrite}

@c ---------------------------------------
@node !crunch_bpp, !crunch_slice, !crunch_bits, Read-Write Global Vars
@subsection !crunch_bpp

This @code{float} variable holds the number of bits per pixel (number)
that the last @code{crunch}-compressed array needed.

See also: @ref{crunch}, @ref{fcwrite}

@c ---------------------------------------
@node !crunch_slice, !dashsize, !crunch_bpp, Read-Write Global Vars
@subsection !crunch_slice

This variable specifies the @code{long} number of bits of each array
element that is copied to the @code{crunch}-compressed file without
change.  The remaining bits are compressed.  The compression ratio
reaches a minimum for a specific value of @code{!crunch_slice}.  This
value should generally lie about 2 above the entropy of the data array.

See also: @ref{crunch}, @ref{fcwrite}

@c ---------------------------------------
@node !dashsize, !dlabx, !crunch_slice, Read-Write Global Vars
@subsection !dashsize

This @code{long} variable determines the size of the dashes in dashed
lines, and defaults to 1.

See also: @ref{plot}, @ref{xymov}

@c ---------------------------------------
@node !dlabx, !dlaby, !dashsize, Read-Write Global Vars
@subsection !dlabx

The @code{long} number of divisions per label on the X axis, which
defaults to 2.

See also: @ref{!dlaby}, @ref{plot}

@c ---------------------------------------
@node !dlaby, !dot, !dlabx, Read-Write Global Vars
@subsection !dlaby

The @code{long} number of divisions per label on the Y axis, which
defaults to 2.

See also:  @ref{!dlabx}, @ref{plot}

@c ---------------------------------------
@node !dot, !dots, !dlaby, Read-Write Global Vars
@subsection !dot

If this @code{long} variable is non-zero, then a central dot is drawn in
extended plot symbols.  It defaults to 1.

See also: @ref{plot}, @ref{xymov}

@c ---------------------------------------
@node !dots, !erase, !dot, Read-Write Global Vars
@subsection !dots

See also: @ref{plot}

@c ---------------------------------------
@node !erase, !errno, !dots, Read-Write Global Vars
@subsection !erase

If this @code{long} variable is non-zero, then the current plot device is
cleared before each @code{plot} command.

See also: @ref{erase}, @ref{!pdev}, @ref{plot}

@c ---------------------------------------
@node !errno, !error_extra, !erase, Read-Write Global Vars
@subsection !errno

The last error code encountered during tape I/O using @code{tapwrt} or
@code{taprd}.

See also: @ref{taprd}, @ref{tapwrt}

@c ---------------------------------------
@node !error_extra, !eventsource, !errno, Read-Write Global Vars
@subsection !error_extra


@c ---------------------------------------
@node !eventsource, !eventtype, !error_extra, Read-Write Global Vars
@subsection !eventsource

This @code{long} variable holds the source of the last event caught by
@code{xloop}.  It is equal to the number of the source window or menu
plus @code{#event.WINDOW} (256) if the event occurred inside a LUX
window, or plus @code{#event.MENU} (512) if the event occurred inside an
LUX menu.

See also: @ref{#event}, @ref{!eventtype}, @ref{xloop}, @ref{xregister}

@c ---------------------------------------
@node !eventtype, !fftdp, !eventsource, Read-Write Global Vars
@subsection !eventtype

This @code{long} variable holds the type of the last event caught by
@code{xloop}, according to @code{#event}.

See also: @ref{#event}, @ref{!eventsource}, @ref{xloop}, @ref{xregister}

@c ---------------------------------------
@node !fftdp, !font, !eventtype, Read-Write Global Vars
@subsection !fftdp

If this @code{long} variable is non-zero, then all Fourier transforms are
performed in double precision (@code{double}), otherwise in single
precision (@code{float}).

See also: @ref{sc}, @ref{scb}

@c ---------------------------------------
@node !font, !format_c, !fftdp, Read-Write Global Vars
@subsection !font

The @code{long} default font number for labels in plots.  Available
fonts are: 1, 2, 3 -- roman sans serif; 5 -- bold roman sans serif; 6 --
bold roman serif; 7 -- greek serif; 8 -- italic roman serif; 9 --
special symbols; 10 -- special symbols; 17 -- bold roman serif; 18 --
italic bold roman serif.

See also: @ref{callig}, @ref{plot}

@c ---------------------------------------
@node !format_c, !format_f, !font, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !format_c

This @code{string} variable specifies the default output format for
complex numbers (@code{cfloat}, @code{cdouble}).

See also: @ref{!format_f}, @ref{!format_i}, @ref{!format_s},
@ref{In-Line Print Formats}, @ref{print}

@c ---------------------------------------
@node !format_f, !format_i, !format_c, Read-Write Global Vars
@subsection !format_f

This @code{string} variable specifies the default output format for
floating point numbers (@code{float}, @code{double}).

See also: @ref{!format_c}, @ref{!format_i}, @ref{!format_s},
@ref{In-Line Print Formats}, @ref{print}

@c ---------------------------------------
@node !format_i, !format_s, !format_f, Read-Write Global Vars
@subsection !format_i

This @code{string} variable specifies the default output format for
integer numbers (@code{byte}, @code{word}, @code{long}).

See also: @ref{!format_c}, @ref{!format_f}, @ref{!format_s},
@ref{In-Line Print Formats}, @ref{print}

@c ---------------------------------------
@node !format_s, !fsize, !format_i, Read-Write Global Vars
@subsection !format_s

This @code{string} variable specifies the default output format for
strings (@code{string}).

See also: @ref{!format_c}, @ref{!format_f}, @ref{!format_i},
@ref{In-Line Print Formats}, @ref{print}

@c ---------------------------------------
@node !fsize, !fstepx, !format_s, Read-Write Global Vars
@subsection !fsize

This @code{float} variable controls the size of drawn labels.  It
defaults to 1.

See also: @ref{callig}, @ref{plot}

@c ---------------------------------------
@node !fstepx, !fstepy, !fsize, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !fstepx

The major x axis division interval, in data units.  If this value is 0,
then the interval is determined automatically.

See also: @ref{plot}, @ref{!fstepy}, @ref{!fstepz}
@c ---------------------------------------
@node !fstepy, !fstepz, !fstepx, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !fstepy

The major y axis division interval, in data units.  If this value is 0,
then the interval is determined automatically.

See also: @ref{plot}, @ref{!fstepx}, @ref{!fstepz}
@c ---------------------------------------
@node !fstepz, !fz, !fstepy, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !fstepz

The major z axis division interval, in data units.  If this value is 0,
then the interval is determined automatically.

See also: @ref{plot}, @ref{!fstepx}, @ref{!fstepy}
@c ---------------------------------------
@node !fz, !fzx, !fstepz, Read-Write Global Vars
@subsection !fz

If this @code{long} variable is non-zero, then the lower limit on the Y
coordinate on the axis of a plot may be larger than zero.

See also: @ref{!fzx}, @ref{plot}

@c ---------------------------------------
@node !fzx, !fzz, !fz, Read-Write Global Vars
@subsection !fzx

If this @code{long} variable is non-zero, then the lower limit on the X
coordinate on the axis of a plot may be larger than zero.

See also: @ref{!fz}, @ref{!fzz}, @ref{plot}

@c ---------------------------------------
@node !fzz, !height, !fzx, Read-Write Global Vars
@subsection !fzz

If this @code{long} variable is non-zero, then the lower limit on the Z
coordinate on the axis of a 3D plot may be larger than zero.

See also: @ref{!fz}, @ref{!fzz}, @ref{plot3d}

@c ---------------------------------------
@node !height, !histmin, !fzz, Read-Write Global Vars
@subsection !height

This @code{long} variable holds the height in pixels of the current
window.

See also: @ref{!width}, @ref{!window}, @ref{xport}

@c ---------------------------------------
@node !histmin, !histmax, !height, Read-Write Global Vars
@subsection !histmin

This @code{float} variable holds the minimum data value included in the
last histogram.

See also: @ref{hist}, @ref{!histmax}, @ref{histr}

@c ---------------------------------------
@node !histmax, !iblank, !histmin, Read-Write Global Vars
@subsection !histmax

This @code{float} variable holds the maximum value included in the last
histogram.

See also: @ref{hist}, @ref{!histmin}, @ref{histr}

@c ---------------------------------------
@node !iblank, !iorder, !histmax, Read-Write Global Vars
@subsection !iblank

See also: @ref{plot}

@c ---------------------------------------
@node !iorder, !itmax, !iblank, Read-Write Global Vars
@subsection !iorder

This @code{long} variable determines the orientation of contour plots.
Values between 0 and 7 yield various combinations of mirroring in the x
and y directions.

See also: @ref{contour}

@c ---------------------------------------
@node !itmax, !ix, !iorder, Read-Write Global Vars
@subsection !itmax

See also: @ref{gridmatch}

@c ---------------------------------------
@node !ix, !ixhigh, !itmax, Read-Write Global Vars
@subsection !ix

@code{dev} X coordinate of the last position selected in a LUX window.

See also: @ref{checkwindow}, @ref{!iy}, @ref{Screen Coordinates},
@ref{!xf}, @ref{xplace}, @ref{xquery}

@c ---------------------------------------
@node !ixhigh, !iy, !ix, Read-Write Global Vars
@subsection !ixhigh

See also: @ref{!ix}, @ref{!iyhigh}, @ref{xport}

@c ---------------------------------------
@node !iy, !iyhigh, !ixhigh, Read-Write Global Vars
@subsection !iy

@code{dev} Y coordinate of the last position selected in a LUX window.

See also: @ref{checkwindow}, @ref{!ix}, @ref{Screen Coordinates},
@ref{xplace}, @ref{xquery}, @ref{!yf}

@c ---------------------------------------
@node !iyhigh, !kb, !iy, Read-Write Global Vars
@subsection !iyhigh

See also: @ref{!ixhigh}, @ref{!iy}, @ref{xport}

@c ---------------------------------------
@node !kb, !keycode, !iyhigh, Read-Write Global Vars
@subsection !kb

This is an integer number that expresses the state of the pointer
buttons and modifier keys when any routine was last called that
inspected this state.  The returned number is the logical OR of those
values from the following table that reflect the state.

@table @asis
@item 1
The @kbd{Shift} key is depressed.
@item 2
Caps lock is active.
@item 4
The control (@kbd{Ctrl}) key is depressed.
@item 8
The 1st modifier key is depressed.  This is usually the @kbd{Alt} key.
@item 16
The 2nd modifier key is depressed.
@item 32
The 3rd modifier key is depressed.
@item 64
The 4th modifier key is depressed.
@item 128
The 5th modifier key is depressed.
@item 256
The 1st pointer button is depressed.  This is usually the leftmost mouse
button.
@item 512
The 2nd pointer button is depressed.  This is usually the middle mouse
button on three-button mice, or the rightmost mouse button on two-button
mice.
@item 1024
The 3rd pointer button is depressed.  This is usually the rightmost
mouse button on three-button mice.
@item 2048
The 4th pointer button is depressed.
@item 4096
The 5th pointer button is depressed.
@end table

See also: @ref{xquery}

@c ---------------------------------------
@node !keycode, !keystate, !kb, Read-Write Global Vars
@subsection !keycode

@code{[@ref{x11} package]} If key press events are selected through
@code{xregister} and waited for using @code{xloop}, then @code{!keycode}
contains the X key code of the key pressed last.  This code refers to a
particular physical key on your keyboard, regardless of what character
or function that key represents, and regardless of what modifier key or
keys (@code{Shift}, @code{Ctrl}, @code{Alt}, @code{Caps Lock}, etcetera)
are also active.  There is no obvious translation from such a key code
to the character or function that it represents.  Most users will prefer
to inspect @code{!keysym} instead.

See also: @ref{!keystate}, @ref{!keysym}, @ref{xloop}, @ref{xregister}

@c ---------------------------------------
@node !keystate, !keysym, !keycode, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !keystate

@code{[@ref{x11} package]} If key press events are selected through
@code{xregister} and waited for using @code{xloop}, then
@code{!keystate} contains a @code{long} number of which the individual
bits indicate the state of the modifier keys during the key press.  On
my system, the following bits correspond to the following modifier keys:
@table @asis
@item 0  (1)
Either @code{Shift} key
@item 1  (2)
The @code{Caps Lock} state is active
@item 2  (4)
Either @code{Ctrl} key
@item 3  (8)
Either @code{Alt} key
@item 4  (16)
The @code{Num Lock} state is active
@item 7  (128)
The @code{Scroll Lock} state is active
@end table

See also: @ref{!keycode}, @ref{!keysym}, @ref{xloop}, @ref{xregister}

@c ---------------------------------------
@node !keysym, !labx, !keystate, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !keysym

@code{[@ref{x11} package]} If key press events are selected through
@code{xregister} and waited for using @code{xloop}, then @code{!keysym}
contains a @code{long} number that identifies the character or function
selected by the last pressed key, including the effects of modifier keys
such as @code{Shift} and @code{Alt}.  For the regular alphanumerical and
punctuation keys, the appropriate value from the native character set
(e.g., ASCII) is returned.  Such a value, when stored in a @code{byte}
variable and then transformed to a @code{string} using @code{smap},
yields the string value of the pressed key.  Special keys, such as
function keys, arrow keys, and keypad keys (if @code{Num Lock} is
inactive) yield numbers greater than 255.  On my system, the following
key values are valid:
@table @asis
@item 65288 - Backspace
@item 65289 - Tab
@item 65293 - Enter
@item 65300 - Scroll Lock
@item 65307 - Esc
@item 65360 - Home
@item 65361 - Leftarrow
@item 65362 - Uparrow
@item 65363 - Rightarrow
@item 65364 - Downarrow
@item 65365 - Page Up
@item 65366 - Page Down
@item 65367 - End
@item 65377 - Print Scrn/SysRq
@item 65379 - Insert
@item 65407 - Num Lock
@item 65421 - Keypad Enter
@item 65429 - Keypad Home
@item 65430 - Keypad Leftarrow
@item 65431 - Keypad Uparrow
@item 65432 - Keypad Rightarrow
@item 65433 - Keypad Downarrow
@item 65434 - Keypad Page Up
@item 65435 - Keypad Page Down
@item 65436 - Keypad End
@item 65437 - Keypad Middle
@item 65438 - Keypad Insert
@item 65439 - Keypad Delete
@item 65450 - Keypad *
@item 65451 - Keypad +
@item 65453 - Keypad @minus{}
@item 65455 - Keypad /
@item 65470 through 65481 - F1 through F12
@item 65505 - leftmost Shift
@item 65506 - rightmost Shift
@item 65507 - leftmost Ctrl
@item 65508 - rightmost Ctrl
@item 65509 - Caps Lock
@item 65513 - leftmost Alt
@item 65514 - rightmost Alt
@item 65535 - Delete
@end table

See also: @ref{!keycode}, @ref{!keystate}, @ref{smap}, @ref{xloop},
@ref{xregister}

@c ---------------------------------------
@node !labx, !laby, !keysym, Read-Write Global Vars
@subsection !labx

This @code{long} variable governs whether labels may be drawn along the X
axis of plots (they may if @code{!labx} equals 1).

See also: @ref{!laby}, @ref{plot}

@c ---------------------------------------
@node !laby, !landscape, !labx, Read-Write Global Vars
@subsection !laby

This @code{long} variable governs whether labels may be drawn along the
Y axis of plots (they may if @code{!laby} equals 1).

See also: @ref{!labx}, @ref{plot}

@c ---------------------------------------
@node !landscape, !lastmax, !laby, Read-Write Global Vars
@subsection !landscape

This @code{long} variable governs whether Postscript output is sent in
landscape (@code{!landscape} uneqal to zero) or portrait mode
(@code{!landscape} equal to zero).

See also: @ref{plot}, @ref{pdev}, @ref{!landscape}

@c ---------------------------------------
@node !lastmax, !lastmaxloc, !landscape, Read-Write Global Vars
@subsection !lastmax

This @code{float} variable holds the value of the last determined maximum,
which is always determined simulaneously with the minimum.

See also: @ref{find_maxloc}, @ref{!lastmaxloc}, @ref{!lastmin},
@ref{!lastminloc}, @ref{max}, @ref{min}

@c ---------------------------------------
@node !lastmaxloc, !lastmean, !lastmax, Read-Write Global Vars
@subsection !lastmaxloc

This @code{long} variable holds the index of the last determined maximum,
which is always determined simulaneously with the minimum.

See also: @ref{find_maxloc}, @ref{!lastmax}, @ref{!lastmin},
@ref{!lastminloc}, @ref{max}, @ref{min}

@c ---------------------------------------
@node !lastmean, !lastmin, !lastmaxloc, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !lastmean

This variable holds the value of the last calculated mean value, from
functions @code{mean}, @code{sdev} or @code{variance}.

See also: @ref{mean}, @ref{sdev}, @ref{variance}, @ref{!lastsdev}

@c ---------------------------------------
@node !lastmin, !lastminloc, !lastmean, Read-Write Global Vars
@subsection !lastmin

This @code{float} variable holds the value of the last determined minimum,
which is always determined simulaneously with the maximum.

See also: @ref{find_maxloc}, @ref{!lastmax}, @ref{!lastmaxloc},
@ref{!lastminloc}, @ref{max}, @ref{min}

@c ---------------------------------------
@node !lastminloc, !lastsdev, !lastmin, Read-Write Global Vars
@subsection !lastminloc

This @code{long} variable holds the index of the last determined minimum,
which is always determined simulaneously with the maximum.

See also: @ref{find_maxloc}, @ref{!lastmax}, @ref{!lastmaxloc},
@ref{!lastmin}, @ref{max}, @ref{min}

@c ---------------------------------------
@node !lastsdev, !last_menu, !lastminloc, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !lastsdev

This variable holds the last calculated standard deviation (through
@code{sdev} or @code{variance}).

See also: @ref{sdev}, @ref{variance}, @ref{!lastmean}

@c ---------------------------------------
@node !last_menu, !maxhistsize, !lastsdev, Read-Write Global Vars
@subsection !last_menu

The @code{long} number of the LUX menu in which the last event
caught by @code{xloop} occurred.

See also: @ref{!eventsource}, @ref{!eventtype}, @ref{wait_for_menu},
@ref{xloop}, @ref{xregister}

@c ---------------------------------------
@node !maxhistsize, !maxregridsize, !last_menu, Read-Write Global Vars
@subsection !maxhistsize

The @code{long} maximum allowed size of a histogram.

See also: @ref{distr}, @ref{hist}, @ref{histr}

@c ---------------------------------------
@node !maxregridsize, !menu_item, !maxhistsize, Read-Write Global Vars
@subsection !maxregridsize

The @code{long} maximum size in any dimension of the output image in
@code{regrid} and @code{regrid3}.

See also: @ref{regrid}, @ref{regrid3}

@c ---------------------------------------
@node !menu_item, !meritc, !maxregridsize, Read-Write Global Vars
@subsection !menu_item

The @code{long} number of the LUX menu item in which the last event
caught by @code{xloop} occurred.

See also: @ref{!eventsource}, @ref{!eventtype}, @ref{wait_for_menu},
@ref{xloop}, @ref{xregister}

@c ---------------------------------------
@node !meritc, !motif, !menu_item, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !meritc

A variable in which a merit value is returned by function
@code{subshiftc}.

See also: @ref{subshiftc}

@c ---------------------------------------
@node !motif, !mxb, !meritc, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !motif

@code{[MOTIF]} A variable that determines when the widget manager exits
if it was called through @code{XTLOOP,1}: The manager exits when
@code{!motif} becomes equal to 0.

See also: @ref{xtloop}

@c ---------------------------------------
@node !mxb, !mxt, !motif, Read-Write Global Vars
@subsection !mxb

The @code{float} data value corresponding to the left edge of the last
plot.

See also: @ref{!mxt}, @ref{!myb}, @ref{plot}

@c ---------------------------------------
@node !mxt, !myb, !mxb, Read-Write Global Vars
@subsection !mxt

The @code{float} data value corresponding to the right edge of the last
plot.

See also: @ref{!mxb}, @ref{!myt}, @ref{plot}

@c ---------------------------------------
@node !myb, !myt, !mxt, Read-Write Global Vars
@subsection !myb

The @code{float} data value corresponding to the bottom of the last
plot.

See also: @ref{!mxb}, @ref{!myt}, @ref{plot}

@c ---------------------------------------
@node !myt, !mzb, !myb, Read-Write Global Vars
@subsection !myt

The @code{float} data value corresponding to the top of the last plot.

See also: @ref{!mxt}, @ref{!myb}, @ref{plot}

@c ---------------------------------------
@node !mzb, !mzt, !myt, Read-Write Global Vars
@subsection !mzb

The @code{float} data value corresponding to the bottom of the Z axis in
the last 3D plot.

See also: @ref{!mxt}, @ref{!myb}, @ref{plot3d}

@c ---------------------------------------
@node !mzt, !narg, !mzb, Read-Write Global Vars
@subsection !mzt

The @code{float} data value corresponding to the top of the Z axis in
the last 3D plot.

See also: @ref{!mxt}, @ref{!myb}, @ref{plot3d}

@c ---------------------------------------
@node !narg, !noeventflush, !mzt, Read-Write Global Vars
@subsection !narg

The @code{long} number of arguments specified in the currently active
call to a user-defined function or subroutine -- or the number in the
most recently active routine, if at the main execution level.

@c ---------------------------------------
@node !noeventflush, !pdev, !narg, Read-Write Global Vars
@subsection !noeventflush

If this @code{long} variable is non-zero, then it prevents the event
queue from being flushed (i.e. the queued events being discarded, mostly
unprocessed) by commands involving windows or menus.  Should be nonzero
when using @code{xloop} in a loop.

See also: @ref{xloop}

@c ---------------------------------------
@node !pdev, !pen, !noeventflush, Read-Write Global Vars
@subsection !pdev

This @code{long} variable indicates the device that plots are directed
to.  0 indicates the screen, and 1 indicates the Postscript file with
the name given by the string @code{!ps_file}.

See also: @ref{!ps_file}

@c ---------------------------------------
@node !pen, !pltyp, !pdev, Read-Write Global Vars
@subsection !pen

The current @code{float} plot pen thickness.  Its initial value is 1.

See also: @ref{pen}

@c ---------------------------------------
@node !pltyp, !plxerrb, !pen, Read-Write Global Vars
@subsection !pltyp

This @code{long} variable indicates what kind of axes are drawn on a
plot, as a function of @code{!pltyp MOD 4}:
@enumerate 0
@item  linear X, linear Y
@item  linear X, logarithmic Y
@item  logarithmic X, linear Y
@item  logarithmic X, logarithmic Y
@end enumerate

If the value of @code{!pltyp} is less than 4, then a complete box is
drawn to indicate the plot window.  If @code{!pltyp} is equal to or
greater than 4, then only the bottom and left edges of the plot window
are drawn.

See also: @ref{plot}
@c ---------------------------------------
@node !plxerrb, !plyerrb, !pltyp, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !plxerrb

Selects the @code{rpl} height of the vertical bars at either end of a
horizontal error bar in @code{plot} or @code{oplot}.

See also: @ref{plot}, @ref{!plyerrb}

@c ---------------------------------------
@node !plyerrb, !ps_file, !plxerrb, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !plyerrb

Selects the @code{rpl} width of the horizontal bars at either end of a
vertical error bar in @code{plot} or @code{oplot}.

See also: @ref{plot}, @ref{!plxerrb}

@c ---------------------------------------
@node !ps_file, !range_warn_flag, !plyerrb, Read-Write Global Vars
@subsection !ps_file

This @code{string} variable holds the name of the file to which any
PostScript output is written.  It defaults to @file{junk.eps}.

See also: @ref{pdev}

@c ---------------------------------------
@node !range_warn_flag, !read_count, !ps_file, Read-Write Global Vars
@subsection !range_warn_flag

This @code{long} variable specifies whether a warning is generated in
certain instances when an index is out of range.

@c ---------------------------------------
@node !read_count, !redim_warn_flag, !range_warn_flag, Read-Write Global Vars
@subsection !read_count

This @code{long} variable holds the number of values read during the
last call to @code{readf} or @code{read}.

See also: @ref{read}, @ref{readf}

@c ---------------------------------------
@node !redim_warn_flag, !root_x, !read_count, Read-Write Global Vars
@subsection !redim_warn_flag

This @code{long} variable specifies whether a warning is generated when
the target in a @code{redim} call is smaller than the source.

See also: @ref{redim}

@c ---------------------------------------
@node !root_x, !root_y, !redim_warn_flag, Read-Write Global Vars
@subsection !root_x

The device-dependent x coordinate (measured in the root window) of the
mouse pointer at the time the @code{xquery} command was issued.

See also: @ref{!root_y}, @ref{xquery}

@c ---------------------------------------
@node !root_y, !row, !root_x, Read-Write Global Vars
@subsection !root_y

The device-dependent y coordinate (measured in the root window) of the
mouse pointer at the time the @code{xquery} command was issued.

See also: @ref{!root_y}, @ref{xquery}

@c ---------------------------------------
@node !row, !rx, !root_y, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !row

Contains the number of rows (lines) on the terminal.  The value of this
variable is used for page-formatted output to the screen (such as that
generated by the @code{help} and @code{info} commands).  It is equal to
@code{#row} by default, but can be changed by the user.

See also: @ref{!col}, @ref{help}, @ref{info}, @ref{#row}

@c ---------------------------------------
@node !rx, !ry, !row, Read-Write Global Vars
@subsection !rx

Affects the x axis of subsequent plots drawn using @code{plot}.  This
variable has no effect if an explicit data value limit is set for the x
axis (through @code{limits}, @code{!xb}, or @code{!xt}).  Otherwise, if
@code{!rx} is nonzero, then @code{plot} leaves some room between the
edges of the plot and the data points nearest to them, instead of having
the outermost data points exactly at the plot's edges.

Note: the meaning of @code{!rx} was changed to what it is now in LUX
3.2.233.

See also: @ref{plot}, @ref{!ry}

@c ---------------------------------------
@node !ry, !scalemax, !rx, Read-Write Global Vars
@subsection !ry

Affects the y axis of subsequent plots drawn using @code{plot}.  This
variable has no effect if an explicit data value limit is set for the y
axis (through @code{limits}, @code{!yb}, or @code{!yt}).  Otherwise, if
@code{!ry} is nonzero, then @code{plot} leaves some room between the
edges of the plot and the data points nearest to them, instead of having
the outermost data points exactly at the plot's edges.

Note: the meaning of @code{!ry} was changed to what it is now in LUX
3.2.233.

See also: @ref{plot}, @ref{!rx}

@c ---------------------------------------
@node !scalemax, !scalemin, !ry, Read-Write Global Vars
@subsection !scalemax

This @code{long} variable holds the largest number that @code{scale}
scales to.  It is set to the maximum number of color cells minus one
when the first window is opened.

See also: @ref{scale}, @ref{!scalemin}

@c ---------------------------------------
@node !scalemin, !screen_height, !scalemax, Read-Write Global Vars
@subsection !scalemin

This @code{long} variable Holds the smallest number that @code{scale}
scales to.  It is set to zero when the first window is opened.

See also: @ref{scale}, @ref{!scalemax}

@c ---------------------------------------
@node !screen_height, !screen_width, !scalemin, Read-Write Global Vars
@subsection !screen_height

 The height of the whole screen, in pixels.  This variable is only
up-to-date if a LUX window has been opened or if a connection to the X
server has been established by @code{xopen}.

See also: @ref{!screen_width}, @ref{xopen}, @ref{xport}

@c ---------------------------------------
@node !screen_width, !sort_flag, !screen_height, Read-Write Global Vars
@subsection !screen_width

The width of the whole screen, in pixels.  This variable is only
up-to-date if a LUX window has been opened or if a connection to the X
server has been established by @code{xopen}.

See also: @ref{!screen_height}, @ref{xopen}, @ref{xport}

@c ---------------------------------------
@node !sort_flag, !startx, !screen_width, Read-Write Global Vars
@subsection !sort_flag

This @code{long} variable selects between heap sort (0) and shell sort
(1).

See also: @ref{sort}
@c ---------------------------------------
@node !startx, !starty, !sort_flag, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !startx

The @code{float} data value that corresponds to the first major tick
mark on the x axis of the last-drawn plot.  If the x axis was on a
logarithmic scale, then the value of @code{!startx} is a logarithm on
base 10.

See also: @ref{plot}, @ref{!starty}, @ref{!stepx}

@c ---------------------------------------
@node !starty, !stepx, !startx, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !starty

The @code{float} data value that corresponds to the first major tick
mark on the y axis of the last-drawn plot.  If the y axis was on a
logarithmic scale, then the value of @code{!starty} is a logarithm on
base 10.

See also: @ref{plot}, @ref{!startx}, @ref{!stepy}

@c ---------------------------------------
@node !stepx, !stepy, !starty, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !stepx

The @code{float} data value interval that corresponds to the interval
between major tick marks on the x axis of the last drawn plot.  If the x
axis was on a logarithmic scale, then the value of @code{!stepx} is
a logarithm on base 10.

See also: @ref{plot}, @ref{!startx}, @ref{!stepy}

@c ---------------------------------------
@node !stepy, !stretchmark, !stepx, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !stepy

The @code{float} data value interval that corresponds to the interval
between major tick marks on the y axis of the last drawn plot.  If the y
axis was on a logarithmic scale, then the value of @code{!stepy} is a
logarithm on base 10.

See also: @ref{plot}, @ref{!starty}, @ref{!stepx}

@c ---------------------------------------
@node !stretchmark, !stretch_clip, !stepy, Read-Write Global Vars
@subsection !stretchmark

A non-zero @code{long} value for this variable allows stretch marks to
appear in @code{regrid} and @code{regrid3} results.

See also: @ref{regrid}, @ref{regrid3}

@c ---------------------------------------
@node !stretch_clip, !symratio, !stretchmark, Read-Write Global Vars
@subsection !stretch_clip

See also: @ref{gridmatch}

@c ---------------------------------------
@node !symratio, !symsize, !stretch_clip, Read-Write Global Vars
@subsection !symratio

This @code{float} variable defines the X to Y size ratio of plot symbols,
and defaults to 1.

See also: @ref{plot}

@c ---------------------------------------
@node !symsize, !tapemessages, !symratio, Read-Write Global Vars
@subsection !symsize

This @code{float} variable controls the size of plot symbols, and
defaults to 1.

See also: @ref{plot}

@c ---------------------------------------
@node !tapemessages, !tickx, !symsize, Read-Write Global Vars
@subsection !tapemessages

See also: @ref{tapwrt}

@c ---------------------------------------
@node !tickx, !tickxr, !tapemessages, Read-Write Global Vars
@subsection !tickx

This @code{float} variable specifies the size of the primary tick marks
along the X axis of plots, in device-independent (@code{dvi})
coordinates.  A positive value results in tick marks extending into the
plot; A negative value yields tick marks extending downward from the
bottom plot edge; A zero value indicates that no tick marks are drawn.

See also: @ref{plot}, @ref{!ticky}
@c ---------------------------------------
@node !tickxr, !ticky, !tickx, Read-Write Global Vars
@subsection !tickxr

This @code{float} variable specifies the size of the secondary tick
marks along the X axis, relative to the primary tick marks.

See also: @ref{plot}, @ref{!tickx}, @ref{!tickyr}

@c ---------------------------------------
@node !ticky, !tickyr, !tickxr, Read-Write Global Vars
@subsection !ticky

This @code{float} variable specifies the size of the primary tick marks
along the Y axis of plots, in device-independent (@code{dvi})
coordinates.  A positive value results in tick marks extending into the
plot; A negative value yields tick marks extending downward from the
bottom plot edge; A zero value indicates that no tick marks are drawn.

See also: @ref{plot}, @ref{!tickx}
@c ---------------------------------------
@node !tickyr, !tvix, !ticky, Read-Write Global Vars
@subsection !tickyr

The @code{float} size of the secondary tick marks along the Y axis,
relative to the primary tick marks.

See also: @ref{plot}, @ref{!tickxr}, @ref{!ticky}
@c ---------------------------------------
@node !tvix, !tvixb, !tickyr, Read-Write Global Vars
@subsection !tvix

The @code{long} @code{dev} X coordinate (in pixels) of the left edge of
the last displayed image.

See also: @ref{Screen Coordinates}, @ref{tv}, @ref{!tvixb}, @ref{!tviy}

@c ---------------------------------------
@node !tvixb, !tviy, !tvix, Read-Write Global Vars
@subsection !tvixb

The @code{long} @code{dev} X coordinate (in pixels) of one beyond the
right edge of the last displayed image.

See also: @ref{tv}, @ref{!tvix}, @ref{!tviyb}

@c ---------------------------------------
@node !tviy, !tviyb, !tvixb, Read-Write Global Vars
@subsection !tviy

The @code{long} @code{dev} Y coordinate (in pixels) of the bottom edge
of the last displayed image.

See also: @ref{tv}, @ref{!tvix}, @ref{!tviyb}

@c ---------------------------------------
@node !tviyb, !tvscale, !tviy, Read-Write Global Vars
@subsection !tviyb

The @code{long} @code{dev} Y coordinate (in pixels) of one beyond the
top edge of the last displayed image.

See also: @ref{tv}, @ref{!tvixb}, @ref{!tviy}

@c ---------------------------------------
@node !tvscale, !tvsmt, !tviyb, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !tvscale

A @code{float} scalar that indicates the current default magnification
factor for use in image display.

See also: @ref{tv}

@c ---------------------------------------
@node !tvsmt, !vdev, !tvscale, Read-Write Global Vars
@subsection !tvsmt

This @code{long} variable governs whether a magnified image is displayed
using the nearest-neighbor method (@code{!tvsmt} equal to zero) or by
smoothing (@code{!tvsmt} unequal to zero).

See also: @ref{tv}

@c ---------------------------------------
@node !vdev, !width, !tvsmt, Read-Write Global Vars
@subsection !vdev

This @code{long} variable selects the output device for images, and
defaults to 0 (screen).

See also: @ref{pdev}, @ref{tv}

@c ---------------------------------------
@node !width, !window, !vdev, Read-Write Global Vars
@subsection !width

The @code{long} width in pixels of the current window.

See also: @ref{xport}

@c ---------------------------------------
@node !window, !wxb, !width, Read-Write Global Vars
@subsection !window

The @code{long} number of the active window.  Subsequent plots and
images are displayed in this window.

See also: @ref{checkwindow}, @ref{xplace}, @ref{xport}

@c ---------------------------------------
@node !wxb, !wxt, !window, Read-Write Global Vars
@subsection !wxb

The @code{float} device-independent Y coordinate of the left edge of the
plot window.

See also: @ref{plot}, @ref{!wxt}, @ref{!wyb}

@c ---------------------------------------
@node !wxt, !wyb, !wxb, Read-Write Global Vars
@subsection !wxt

The @code{float} device-independent X coordinate of the right edge of
the plot window.

See also: @ref{plot}, @ref{!wxb}, @ref{!wyt}

@c ---------------------------------------
@node !wyb, !wyt, !wxt, Read-Write Global Vars
@subsection !wyb

The @code{float} device-independent Y coordinate of the bottom of the
plot window.

See also: @ref{!wyt}, @ref{!wxb}, @ref{plot}

@c ---------------------------------------
@node !wyt, !wzb, !wyb, Read-Write Global Vars
@subsection !wyt

The @code{float} device-independent Y coordinate of the top of the plot
window.

See also: @ref{plot}, @ref{!wxb}, @ref{!wyb}

@c ---------------------------------------
@node !wzb, !wzt, !wyt, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !wzb

The @code{float} device-independent Z coordinate of the bottom edge of
the 3D plot window.

See also: @ref{plot3d}, @ref{!wzt}

@c ---------------------------------------
@node !wzt, !xb, !wzb, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !wzt

The @code{float} device-independent Z coordinate of the top edge of the
3D plot window.

See also: @ref{plot3d}, @ref{!wzb}

@c ---------------------------------------
@node !xb, !xc, !wzt, Read-Write Global Vars
@subsection !xb

If this @code{float} variable is non-zero, then its value is used
instead of the minimum X data value in determining the tick positions in
the next plot.

See also: @ref{plot}, @ref{!xt}, @ref{!yb}

@c ---------------------------------------
@node !xc, !xerrors, !xb, Read-Write Global Vars
@subsection !xc

The @code{float} device-independent X coordinate where the next
character will be drawn by @code{callig}.

See also: @ref{callig}

@c ---------------------------------------
@node !xerrors, !xf, !xc, Read-Write Global Vars
@subsection !xerrors

See also: @ref{xport}

@c ---------------------------------------
@node !xf, !xmenu, !xerrors, Read-Write Global Vars
@subsection !xf

The @code{float} X coordinate of the last read window cursor position in
the coordinate system specified at that time.

See also: @ref{!ix}, @ref{xplace}, @ref{!yf}

@c ---------------------------------------
@node !xmenu, !xroot, !xf, Read-Write Global Vars
@subsection !xmenu

The @code{long} number of the last selected LUX menu.

See also: @ref{wait_for_menu}

@c ---------------------------------------
@node !xroot, !xt, !xmenu, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !xroot

Receives the x coordinate on the root window at which selected events
occurred.

See also: @ref{!yroot}, @ref{xloop}
@c ---------------------------------------
@node !xt, !xtime, !xroot, Read-Write Global Vars
@subsection !xt

If this @code{float} value is non-zero, the it is used instead of the
maximum X data value in determining the tick positions in the next plot.

See also: @ref{plot}, @ref{!xb}, @ref{!yt}

@c ---------------------------------------
@node !xtime, !yb, !xt, Read-Write Global Vars
@subsection !xtime

The @code{float} time at which the last query for information from some
LUX window or menu was made.

See also: @ref{checkwindow}, @ref{xplace}, @ref{xquery}

@c ---------------------------------------
@node !yb, !yc, !xtime, Read-Write Global Vars
@subsection !yb

If this @code{float} value is non-zero, then it is used instead of the
minimum Y data value in determining the tick positions in the next plot.

See also: @ref{plot}, @ref{!xb}, @ref{!yt}

@c ---------------------------------------
@node !yc, !yf, !yb, Read-Write Global Vars
@subsection !yc

The @code{float} device-independent (@code{dvi}) Y coordinate where the
next character will be drawn by @code{callig}.

See also: @ref{callig}

@c ---------------------------------------
@node !yf, !ymenu, !yc, Read-Write Global Vars
@subsection !yf

The @code{float} Y coordinate of last read window cursor position, in
the coordinate system specified at that time.

See also: @ref{!iy}, @ref{!xf}, @ref{xplace}

@c ---------------------------------------
@node !ymenu, !yroot, !yf, Read-Write Global Vars
@subsection !ymenu

The @code{long} position of the cursor at the time of the last menu
selection, measured relative to the upper left-hand corner of the chosen
menu item.

See also: @ref{wait_for_menu}

@c ---------------------------------------
@node !yroot, !yt, !ymenu, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !yroot

Receives the y coordinate on the root window at which selected events
occurred.

See also: @ref{!xroot}, @ref{xloop}
@c ---------------------------------------
@node !yt, !yydebug, !yroot, Read-Write Global Vars
@subsection !yt

If this @code{float} value is non-zero, then it is used instead of the
maximum Y data value in determining the tick positions in the next plot.

See also: @ref{plot}, @ref{!xt}, @ref{!yb}

@c ---------------------------------------
@node !yydebug, !zoomframe, !yt, Read-Write Global Vars
@subsection !yydebug

[DEBUG] If this @code{long} variable is non-zero, then display of the
parser status during parsing is enabled.

@c ---------------------------------------
@node !zoomframe, !zoomhigh, !yydebug, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !zoomframe

The index of the last frame shown using @code{zoom}.  It is used
as the default for the next call to @code{zoom}.

See also: @ref{zoom}, @ref{!zoommag}, @ref{!zoomx}, @ref{!zoomy}

@c ---------------------------------------
@node !zoomhigh, !zoomlow, !zoomframe, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !zoomhigh

The top limit of the contrast data range using @code{zoom}.  Zero
means the top limit will be equal to the maximum data value.

See also: @ref{zoom}

@c ---------------------------------------
@node !zoomlow, !zoommag, !zoomhigh, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !zoomlow

The bottom limit of the contrast data range using @code{zoom}.
Zero means the bottom limit will be equal to the minimum data value.

See also: @ref{zoom}

@c ---------------------------------------
@node !zoommag, !zoomx, !zoomlow, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !zoommag

The last magnification factor used in @code{zoom}.  It is used as
the default for the next call to @code{zoom}.

See also: @ref{zoom}, @ref{!zoomframe}, @ref{!zoomx}, @ref{!zoomy}

@c ---------------------------------------
@node !zoomx, !zoomy, !zoommag, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !zoomx

The last center x coordinate (in data units) used in @code{zoom}.  It is
used as the default for the next call to @code{zoom}.

See also: @ref{zoom}, @ref{!zoomframe}, @ref{!zoommag}, @ref{!zoomy}

@c ---------------------------------------
@node !zoomy,  , !zoomx, Read-Write Global Vars
@comment  node-name,  next,  previous,  up
@subsection !zoomy

The last center y coordinate (in data units) used in @code{zoom}.  It is
used as the default for the next call to @code{zoom}.

See also: @ref{zoom}, @ref{!zoomframe}, @ref{!zoommag}, @ref{!zoomx}

@c ----------------------------------------------------------------------
@node Status Funcs, Internal Routines, Read-Write Global Vars, Reference Manual
@section Status Functions

@cindex Status functions
@cindex Function, status
@cindex System functions
@cindex Function, system

The following status functions have some aspects of functions and some
of variables.  They return certain values requiring system I/O, and
their value generally changes between two evaluations of them.  An
initial value can be assigned to some of them.

@c ---------------------------------------
@menu
* !cputime::                    CPU time used so far
* !ctime::                      Time and date string
* !date::                       Date string
* !jd::                         Current Julian Date
* !readkey::                    Read key press and echo
* !readkeyne::                  Read key press but don't echo
* !systime::                    Current time in seconds
* !time::                       Time string
@end menu

@node !cputime, !ctime, Status Funcs, Status Funcs
@subsection !cputime

Returns the @code{float} CPUtime in seconds since the first call to this
function. 

@c ---------------------------------------
@node !ctime, !date, !cputime, Status Funcs
@subsection !ctime

Returns the current time and date in a @code{string}.

See also: @ref{!date}, @ref{!time}

@c ---------------------------------------
@node !date, !jd, !ctime, Status Funcs
@subsection !date

Returns the current date in a @code{string}.

See also: @ref{!ctime}

@c ---------------------------------------
@node !jd, !readkey, !date, Status Funcs
@comment  node-name,  next,  previous,  up
@subsection !jd

Returns the current Julian Date (UTC) in double precision, measured in
days.

See also: @ref{calendar}, @ref{!date}

@c ---------------------------------------
@node !readkey, !readkeyne, !jd, Status Funcs
@subsection !readkey

Waits for, echos, and returns a @code{long} code for the next pressed key.
Ordinary and control characters yield their ASCII code.  Escape
sequences yield larger numbers:
@table @asis
@item @kbd{ESC} char
 27 + 256*char
@item @kbd{ESC} @kbd{[} char
 256*char
@item @kbd{ESC} @kbd{[} number char
 256*char + 256*256*number
@end table

See also: @ref{!readkeyne}

@c ---------------------------------------
@node !readkeyne, !systime, !readkey, Status Funcs
@subsection !readkeyne

Waits for, and returns a code for the next pressed key, but does not
echo that key.  Ordinary and control characters yield their ASCII
code.  Escape sequences yield larger numbers:
@table @asis
@item @kbd{ESC} char
 27 + 256*char
@item @kbd{ESC} @kbd{[} char
 256*char
@item @kbd{ESC} @kbd{[} number char
 256*char + 256*256*number
@end table

See also: @ref{!readkey}

@c ---------------------------------------
@node !systime, !time, !readkeyne, Status Funcs
@comment  node-name,  next,  previous,  up
@subsection !systime

Returns the @code{double} system time measured in seconds since 1
January 1970, 00:00.  This system function only works properly if your
computer platform supports it.  Otherwise, it always returns @code{long}
zero.

@c ---------------------------------------
@node !time,  , !systime, Status Funcs
@subsection !time

Returns the current time in a @code{string}.

See also: @ref{!ctime}

@c ----------------------------------------------------------------------
@node Internal Routines,  , Status Funcs, Reference Manual
@section Internal Functions and Subroutines

@cindex Internal functions/routines
@cindex Functions, internal
@cindex Routines, internal
@cindex Built-in functions/routines

All of LUX's built-in functions and subroutines are described below.
Functions are followed by the list of comma-separated arguments, if any,
between parentheses.  Subroutines are followed by the comma-separated
list of arguments, if any, separated from the subroutine name by a
comma.  Arguments between square brackets are optional.  Arguments
followed by three dots may be repeated zero or more times.  Generally,
the user may specify any number of the optional arguments, provided no
unspecified argument precedes any specified argument between the same
square brackets.

Arguments that are indicated in one of the following two manners are
keyword arguments: @code{/KEYWORD} or @code{KEYWORD=@code{@var{value}}}.
These arguments may be specified in any order and in any position, and
their placement does not influence the interpretation of non-keyword
arguments.

@c -------------------------------------
@menu
* abs::                         Absolute value
* acos::                        Arc cosine
* acosh::                       Inverse hyperbolic cosine
* alog::                        Natural logarithm
* alog10::                      Decimal logarithm
* and::                         Logical AND
* andif::                       Conditional logical AND
* area::                        Disjoint area labeling
* area2::                       Connected area labeling
* areaconnect::                 Determine area connections
* arestore::                    Restore complete variables from disk
* arg::                         Complex argument
* array::                       Create an array of arbitrary type
* asin::                        Arc sine
* asinh::                       Inverse hyperbolic sine
* assoc::                       Create an associated variable
* astore::                      Store complete variables on disk
* astrf::                       Astronomical coordinate transformations
* astron::                      Calculate planetary positions
* atan::                        Arc tangent (mod 180 degrees)
* atan2::                       Arc tangent (mod 360 degrees)
* atanh::                       Inverse hyperbolic tangent
* atol::                        Read an integer value from a string
* atomize::                     Show internal structure of a variable
* basin::                       Full-coverage image segmentation
* batch::                       Run in batch mode
* bessel_i0::                   Bessel I_0 function
* bessel_i1::                   Bessel I_1 function
* bessel_j0::                   Bessel J_0 function
* bessel_j1::                   Bessel J_1 function
* bessel_jn::                   Bessel J_n function
* bessel_k0::                   Bessel K_0 function
* bessel_k1::                   Bessel K_1 function
* bessel_kn::                   Bessel K_n function
* bessel_y0::                   Bessel Y_0 function
* bessel_y1::                   Bessel Y_1 function
* bessel_yn::                   Bessel Y_n function
* beta::                        Beta function
* bi0::                         Bessel I_0 function
* bi00::                        Frame bias vector
* bi1::                         Bessel I_1 function
* bisect::                      Calculates bisectors
* bj0::                         Bessel J_0 function
* bj1::                         Bessel J_1 function
* bjn::                         Bessel J_n function
* bk0::                         Bessel K_0 function
* bk1::                         Bessel K_1 function
* bkn::                         Bessel K_n function
* bmap::                        Convert to @code{byte} byte by byte
* bp00::                        Frame bias and precession, IAU 2000
* bp06::                        Frame bias and precession, IAU 2006
* bpn2xy::                      CIO x,y from bias-precession-nutation matrix
* breakpoint::                  Manipulate breakpoints
* bsmooth::                     Binary smoothing
* by0::                         Bessel Y_0 function
* by1::                         Bessel Y_1 function
* byn::                         Bessel Y_n function
* bytarr::                      Create a @code{byte} array
* byte::                        Convert to @code{byte} value by value
* bytfarr::                     Create a @code{byte} file array
* c::                           Calligraphy
* c2i00a::                      CIO matrix, IAU 2000A
* c2i00b::                      CIO matrix, IAU 2000B
* c2i06a::                      CIO matrix, IAU 2000A/2006
* c2ibpn::                      CIO matrix from BPN
* c2ixy::                       CIO matrix from CIP x,y
* c2ixys::                      CIO matrix from CIP x,y, CIO s
* c2s::                         Cartesian to spherical coordinates
* c2t00a::                      C2T matrix from CIP xp,yp, IAU 2000A
* c2t00b::                      C2T matrix from CIP xp,yp, IAU 2000B
* c2t06a::                      C2T matrix from CIP xp,yp, IAU 2000A/2006
* c2tcio::                      C2T matrix from C2I, ERA, POM
* c2teqx::                      C2T matrix from BPN, GST, POM
* c2tpe::                       C2T matrix from nutation and polar coordinates
* c2txy::                       C2T from CIP x,y and polar xp,yp
* cal2jd::                      Julian Day Numbers from Gregorian Calendar dates
* calculator::                  Calculator mode
* calendar::                    Calendar conversions
* callig::                      Calligraphy
* cbrt::                        Cube root
* cdblarr::                     Create a @code{cdouble} array
* cdblfarr::                    Create a @code{cdouble} file array
* cdmap::                       Convert to @code{cdouble} byte by byte
* cdouble::                     Convert to @code{cdouble} value by value
* ceil::                        Convert to @code{long} by rounding up
* cfloat::                      Convert to @code{cfloat} value by value
* cfltarr::                     Create a @code{cfloat} array
* cfltfarr::                    Create a @code{cfloat} file array
* cfmap::                       Convert to @code{cfloat} byte by byte
* chdir::                       Change directory
* checklist::                   debugging]
* checkmenu::                   Check for menu selection
* checkwindow::                 Check for window selection
* chi2::                        Chi-square function.
* classname::                   Name of data class
* close::                       Close disk file
* cluster::                     Cluster analysis
* colorcomponents::             Derive RGB values
* colorpixel::
* colorstogrey::                Get greyscale values
* compile::                     Compile a string as LUX code
* compile_file::
* complex::                     Convert to a complex data type
* compress::                    Reduce the number of elements of an array
* concat::                      Concatenate scalars and/or arrays
* conjugate::                   Complex conjugate
* constellation::               Determine the astronomical constellation
* constellationname::           Provide constellation names
* contour::                     Contour plot
* convert::                     Convert to specified data type 
* coordtrf::                    Plot/windoe coordinate conversions
* cos::                         Cosine
* cosh::                        Hyperbolic cosine
* crosscorr::                   Cross-correlation coefficient
* crunch::                      Data compression
* crunchrun::
* cspline::                     Interpolation using cubic splines
* cspline_extr::                Find extremes on cubic splines
* cspline_find::
* ctop::                        Transform from Cartesian to polar coordinates
* d::                           Dump information about an expression
* dat::                         TAI minus UTC
* date_from_tai::               Date string from a TAI time
* dblarr::                      Create a @code{double} array
* dblfarr::                     Create a @code{double} file array
* decomp::                      LU matrix decomposition
* decrunch::                    Data decompression
* default::                     Specify a default value for a variable
* defined::                     Does the variable have a defined value?
* delete::                      Delete a variable's data value
* despike::                     Treat bad pixels (spikes) in an image
* detrend::                     Remove a polynomial fit
* diagnostic::                  Write diagnostic output to a file
* differ::                      Running difference
* dilate::                      Binary image dilation operator
* dilatedir::
* dimen::                       Return a dimension of an array
* disablenewline::              Tell LUX to ignore newlines
* distarr::                     Distance array
* distr::                       Distribute data to array elements
* dmap::                        Convert to @code{double} byte by byte
* doub::                        Convert to @code{double} value by value
* double::                      Convert to @code{double} value by value
* dsmooth::                     Directional smoothing
* dsolve::                      Solve a set of linear equations
* dsum::                        Sum as @code{double}
* dtdb::                        TDB minus TT
* dump::                        Dump information about an expression
* dump_lun::                    Dump information about open files
* dump_stack::                  Dump information about the data stack
* easterdate::                  Calculate the date of Easter
* echo::                        Echo code to be compiled
* ee00::                        Equation of Equinoxes from nutation, IAU 2000
* ee00a::                       Equation of Equinoxes, IAU 2000
* ee00b::                       Equation of Equinoxes, IAU 2000B
* ee06a::                       Equation of Equinoxes, IAU 2000A/2006
* eect00::                      Equation of Equinoxes complementary terms
* eform::                       Earth reference ellipsoid
* enablenewline::               Tell LUX to resume interpreting newlines
* endian::                      Convert between little-endian and big-endian
* enhanceimage::                Enhance the intensities of an image
* eo06a::                       Equation of Origins, IAU 2000A/2006
* eors::                        Equation of Origins from bias-precession-nutation and CIO s
* epb::                         Julian Date to Besselian epoch
* epb2jd::                      Besselian epoch to Julian Date
* epj::                         Julian Date to Julian epoch
* epj2jd::                      Julian epoch to Julian Date
* epv00::                       Earth position and velocity
* eq::                          Equal-to
* eqeq94::                      Equation of Equinoxes, IAU 1994
* equivalence::                 Determine equivalence classes
* era00::                       ERA, IAU 2000
* erase::                       Erase the window contents
* erf::                         Error function
* erfc::                        Complementary error function
* erode::                       Binary image erosion operator
* erodedir::
* error::                       User-defined error with message
* esegment::                    Extreme-based data segmentation
* esmooth::                     Asymmetrical exponential smoothing
* eval::                        Evaluate a string as LUX code
* eventname::                   Name of an event
* execute::                     Execute a string as LUX code
* exit::                        Exit LUX
* exp::                         Exponential function
* expand::                      Increase the size of an image
* expm1::                       Exponential of one less than the argument
* f0h::                         Retrieve the header from an FZ file
* f0head::                      Retrieve the header from an FZ file
* f0r::                         Retrieve data from an FZ file
* f0read::                      Retrieve data from an FZ file
* f0w::                         Write data to an FZ file
* f0write::                     Write data to an FZ file
* fad03::                       Mean elongation of Moon
* fade::                        Fade between two images
* fade_init::                   Initialize a fade between two images
* fae03::                       Mean longitude of Earth
* faf03::                       Mean longitude of Moon from ascending node
* faju03::                      Mean longitude of Jupiter
* fal03::                       Mean anomaly of Moon
* falp03::                      Mean anomaly of Sun
* fama03::                      Mean longitude of Mars
* fame03::                      Mean longitude of Mercury
* fane03::                      Mean longitude of Neptune
* faom03::                      Mean longitude of Moon's ascending node
* fapa03::                      General accumulated precession in longitude
* fasa03::                      Mean longitude of Saturn
* faur03::                      Mean longitude of Uranus
* fave03::                      Mean longitude of Venus
* fcrunwrite::                  Write compressed data to an FZ file
* fcrw::                        Write compressed data to an FZ file
* fcw::                         Write compressed data to an FZ file
* fcwrite::                     Write compressed data to an FZ file
* fft::                         Discrete Fast Fourier Transform
* fftb::
* fftexpand::
* fftshift::                    Shifts data using Fourier interpolation
* fileptr::                     Manipulate a file pointer
* fileread::                    Unformatted reading from a file
* filesize::                    Size of a file
* filetofz::                    Transform a file to an FZ file
* filetype::                    Finds the type of the file
* filetypename::                Returns the name of the file type
* filewrite::                   Unformatted writing to a file
* find::                        Find the first occurrence of particular values
* findfile::                    Find a particular file
* find_max::                    Find the values of local maxima
* find_maxloc::                 Find the locations of local maxima
* find_min::                    Find the values of local minima
* find_minloc::                 Find the locations of local minima
* fit::                         Fit arbitrary function to data
* fit2::                        Fit arbitrary function to data
* fit3::
* fit3dcube::                   Ensure complete 3D plot fits on screen
* fits_header::                 Read the header of a FITS file
* fits_key::                    Get a value from a FITS file header
* fits_read::                   Read a FITS file
* fits_write::                  Write a FITS file
* fits_xread::                  Read a FITS file
* fix::                         Convert to @code{long} by truncating
* fk52h::                       FK5 J2000.0 star positions to Hipparcos
* fk5hip::                      FK5 J2000.0 rotation and spin to Hipparcos
* fk5hz::                       FK5 J2000.0 star positions to Hipparcos (zero proper motion)
* float::                       Convert to @code{float} value by value
* floor::                       Convert to @code{long} by rounding down
* fltarr::                      Create a @code{float} array
* fltfarr::                     Create a @code{float} file array
* fmap::                        Convert to @code{float} byte by byte
* format_set::                  Manipulate the formats for ASCII output
* fprint::                      Print to screen
* fprintf::                     Write to file in ASCII format
* fratio::                      F variance ratio function
* fread::                       Read from keyboard
* freadf::                      Read from file in ASCII format
* freads::                      Read from string
* fstring::                     Convert to @code{string}
* fsum::                        Sum as @code{float}
* fw2m::                        Fukushima-Williams angles to rotation matrix
* fw2xy::                       CIP x,y from Fukushima-Williams angles
* fzarr::                       Create a file array appropriate for an FZ file
* fzh::                         Retrieve the header from an FZ file
* fzhead::                      Retrieve the header from an FZ file
* fzinspect::                   Return information on an FZ file
* fzr::                         Retrieve data from an FZ file
* fzread::                      Retrieve data from an FZ file
* fzw::                         Write data to an FZ file
* fzwrite::                     Write data to an FZ file
* gamma::                       Gamma function
* gc2gd::                       Geodetic from geocentric coordinates
* gc2gde::                      Geodetic from geocentric coordinates and ellipsoid
* gcommand::                    Send a gnuplot command to gnuplot
* gcontour::                    Contour plot via gnuplot
* gd2gc::                       Geocentric from geodetic coordinates
* gd2gce::                      Geocentric from geodetic coordinates and ellipsoid
* ge::                          Greater-than-or-equal-to
* getdirectories::              Gets a list of subdirectories
* getdirects::                  Gets a list of subdirectories
* getenv::                      Get the value of an environment variable
* getfiles::                    Gets a list of files in a directory
* getfiles_r::                  Gets a list of files in/below a directory
* getmatchedfiles::             Gets files matching a regexp in a directory
* getmatchedfiles_r::           Gets files matching a regexp in/below a directory
* getmin9::                     Minimum of a fit to 3 by 3 data values
* get_lun::                     Gets an available logical unit
* gifread::                     Read a GIF file
* gifwrite::                    Write a GIF file
* gmst00::                      Greenwich mean sidereal time, IAU 2000
* gmst06::                      Greenwich mean sidereal time, IAU 2006
* gmst82::                      Greenwich mean sidereal time, IAU 1982
* goplot::                      Overplot via gnuplot
* gplot::                       Plot via gnuplot
* gplot3d::                     3D plot via gnuplot
* gridmatch::                   Determine displacements between two images
* gsmooth::                     Gaussian smoothing
* gst00a::                      Greenwich apparent sidereal time, IAU 2000
* gst00b::                      Greenwich apparent sidereal time, IAU 2000B
* gst06::                       Greenwich apparent sidereal time, IAU 2006
* gst06a::                      Greenwich apparent sidereal time, IAU 2000/2006
* gst94::                       Greenwich apparent sidereal time, IAU 1982/1994
* gt::                          Greater-than
* gtv::                         Display an image via gnuplot
* h2fk5::                       Hipparcos to FK5 J2000.0 star positions
* hairs::                       User-selected position
* help::                        Help
* hex::
* hfk5z::                       Hipparcos to FK5 J2000.0 star positions (zero proper motion)
* hilbert::                     Hilbert transform
* hist::                        Histogram
* histr::                       Normalized histogram
* ibeta::                       Incomplete beta function
* idlread::                     Read one variable from an IDL Save file
* idlrestore::                  Read all variables from an IDL Save file
* igamma::                      Incomplete gamma function
* ignore::                      Ignore LUX code up to matching RESUME
* imaginary::                   Imaginary part of a complex argument
* index::                       Determine ascending order of data
* indgen::                      Fill array with data coordinate
* info::                        Information about LUX
* inpolygon::                   Determine if points are inside a polygon
* insert::                      Insert data into an array
* int::                         Convert to @code{word} value by value
* int64::                       Convert to @code{int64} value by value
* int64arr::                    Create an @code{int64} array
* int64farr::                   Create an @code{int64} file array
* int64map::                    Convert to @code{int64} byte by byte
* intarr::                      Create a @code{word} array
* intfarr::                     Create a @code{word} file array
* ir::                          Identity 3-by-3 matrix
* isarray::                     Is the argument an array?
* isnan::                       Is the argument not a number?
* isscalar::                    Is the argument a scalar?
* isstring::                    Is the argument a string?
* ist::                         Convert to @code{string}
* istring::                     Convert to @code{string}
* jd2cal::                      Gregorian dates from Julian Day Numbers
* jpegread::                    Read from a JPEG file
* jpegwrite::                   Write as a JPEG file
* kepler::                      Solve Kepler's equation
* ksmooth::
* le::                          Less-than-or-equal-to
* legendre::                    Associated Legendre polynomials
* limits::                      Manipulate plot coordinate ranges
* list::                        List the definition of a user-defined routine
* llsq::
* lmap::                        Convert to @code{long} byte by byte
* local_max::                   The value of a local maximum
* local_maxloc::                The location of a local maximum
* local_min::                   The value of a local minimum
* local_minloc::                The location of a local minimum
* log::                         Natural logarithm
* log10::                       Decimal logarithm
* log1p::                       Natural logarithm of one plus the argument
* lonarr::                      Create a @code{long} array
* lonfarr::                     Create a @code{long} file array
* long::                        Convert to @code{long} value by value
* lowcase::                     Convert letters to lower case
* lower::                       Convert letters to lower case
* lsmooth::                     Directional spreading
* lsq::                         Least-squares fit
* lt::                          Less-than
* match::                       Match source values to target values
* max::                         Maximum
* maxdir::
* maxfilter::                   Running maximum
* maxloc::                      Location of maximum
* mdiagonal::
* mean::                        Mean value
* medfilter::                   Running median
* median::                      Median valuey
* memory::                      Memory use
* menu::                        Create or select a menu
* menuhide::                    Hide a menu
* menuitem::                    Change a menu item
* menupop::                     Pop (raise) a menu
* menuread::                    Read a value through a menu item
* menuzap::                     Zap (destroy) a menu
* min::                         Minimum
* minfilter::                   Running minimum
* minloc::                      Location of minimum
* mod::                         Modulus
* mproduct::
* multisieve::                  Determine locations of particular values
* name::
* ncchi2::                      Non-central chi-square function
* ne::                          Not equal to
* newallocs::                   Reports on recent memory allocation
* noecho::                      Do not echo code to be compiled
* noop::                        No operation
* not::                         Logical NOT
* num00a::                      Nutation matrix, IAU 2000A
* num00b::                      Nutation matrix, IAU 2000B
* num06a::                      Nutation matrix, IAU 2000A/2006
* numat::                       Nutation matrix from nutation components
* num_dim::                     Number of dimensions
* num_elem::                    Number of elements
* nut00a::                      Nutation components, IAU 2000A
* nut00b::                      Nutation components, IAU 2000B
* nut06a::                      Nutation components, IAU 2000A/2006
* nut80::                       Nutation components, IAU 1980
* nutm80::                      Nutation matrix, IAU 1980
* obl06::                       Mean obliquity of ecliptic, IAU 2006
* obl80::                       Mean obliquity of ecliptic, IAU 1980
* one::                         Fill with ones
* openr::                       Open a file for reading only
* openu::                       Open a file for updating (reading/writing)
* openw::                       Open a file for writing only
* oplot::                       Add data to a plot
* or::                          Logical OR
* ordfilter::                   Running ordinal
* orientation::                 Determine local orientation
* orif::                        Conditional logical OR
* p06e::                        Precession angles, IAU 2006
* p2s::                         Spherical from cartesian coordinates
* pap::                         Position angle from cartesian coordinates
* pas::                         Position angle from angular coordinates
* pb06::                        Precession Euler angles, IAU 2006
* pdev::                        Set/show plot device
* pdp::                         Inner product of 3-vectors
* peek::                        Investigate memory locations
* pen::                         Set pen width
* pencolor::                    Set pen color
* pfw06::                       Fukushima-Williams precession angles, IAU 2006
* pit::                         Polynomial fit
* pixelsto8bit::                Convert pixel values to 8-bit values
* plan94::                      Heliocentric planet position and velocity
* plot::                        Plot
* plot3d::                      Three-dimensional plot
* pm::                          Modulus of 3-vectors
* pmat00::                      Precession matrix, IAU 2000
* pmat06::                      Precession matrix, IAU 2006
* pmat76::                      Precession matrix, IAU 1976
* pn::                          Modulus and unit vector from 3-vector
* pn00::                        Precession-nutation matrix from nutation components, IAU 2000
* pn00a::                       Precession-nutation matrix, IAU 2000A
* pn00b::                       Precession-nutation matrix from nutation components, IAU 2000B
* pn06::                        Precession-nutation matrix from nutation components, IAU 2006
* pn06a::                       Precession-nutation matrix, IAU 2000A/2006
* pnm00a::                      Precession-nutation matrix, IAU 2000A
* pnm00b::                      Precession-nutation matrix, IAU 2000B
* pnm06a::                      Precession-nutation matrix, IAU 2000A/2006
* pnm80::                       Precession-nutation matrix, IAU 1976/1980
* pointer::                     Convert to a pointer
* polartossfc::                 Convert polar coordinates to SSFC
* polate::                      Linear interpolation
* poly::                        Polynomial evaluation
* pom00::                       Polar motion matrix, IAU 2000
* pop::                         Pop from the stack
* postimage::                   Write an image to a Postscript file
* postraw::                     Write a string to a Postscript file
* postrel::                     Finish and close a Postscript file
* postrelease::                 Finish and close a Postscript file
* power::                       Power spectrum
* pr00::                        Precession rate, IAU 2000
* prec76::                      Precession Euler angles, IAU 1976
* precess::                     Correct astronomical coordinates for precession
* print::                       Print to the screen
* printf::                      Write to a file in ASCII format
* project::                     Project 3D coordinates to screen coordinates
* projection::                  Manipulate 3D projection
* projectmap::                  Returns a projected version of a flat map
* psum::                        Sum weighted with powers of the coordinates
* ptoc::                        Transform from polar to Cartesian coordinates
* push::                        Push unto the stack
* pv2s::                        Spherical from cartesian position/velocity coordinates
* pvdpv::                       Inner product of position/velocity vectors
* pvm::                         Modulus of position/velocity vectors
* pvstar::                      Catalog coordinates from position/velocity vectors
* pvxpv::                       Outer product of two position/velocity vectors
* pxp::                         Outer product of two 3-vectors
* quantile::                    Quantiles
* quit::                        Quit LUX
* random::                      Pseudo-random numbers
* randomb::                     Pseudo-random bits
* randomd::                     Pseudo-random numbers user-distributed
* randome::                     Pseudo-random numbers exponentially distributed
* randomn::                     Pseudo-random numbers normally distributed
* randomu::                     Pseudo-random numbers uniformly distributed
* read::                        Read a value from the keyboard
* readarr::                     Read values from the keyboard into an array
* readf::                       Read values from a file in ASCII format
* readorbits::                  Read orbital da
* readu::                       Read values from a file in machine format
* read_jpeg::                   Read from a JPEG-compressed file
* real::                        Real part of a complex argument
* record::                      Record user input and/or LUX output
* redim::                       Modify the dimensions of an array
* regex::                       Match a regular expression to text
* regrid::                      Interpolate on a warped grid (nearest neighbor)
* regrid3::                     Interpolate on a warped grid (bicubic)
* regrid3ns::                   Interpolate on a warped grid (bicubic)
* reorder::
* replace::                     Replace some values with others
* restart::                     Restart LUX
* restore::                     Retrieve data from an FZ file
* resume::                      Negate one previous IGNORE
* return::                      Return from a subroutine or function
* reverse::                     Reverse the order of data in an array
* rewind::                      Rewind a tape
* rewindf::                     Move a file pointer to the file start
* rfix::                        Convert to @code{long} by rounding
* rm2v::                        Rotation vector from rotation matrix
* roll::                        Rearrange dimensions
* root3::                       Solve a cubic equation
* runcum::                      Running sum over a fixed width
* runmax::
* runmin::
* runord::
* runprod::                     Running product from the beginning
* runsum::                      Running sum from the beginning
* rv2m::                        Rotation matrix from rotation vector
* rx::                          Rotates 3-by-3 matrix about x axis
* rxr::                         Multiplies two 3-by-3 matrices
* rxpv::                        Product of 3-by-3 matrix and position/velocity vector
* ry::                          Rotates 3-by-3 matrix about y axis
* rz::                          Rotates 3-by-3 matrix about z axis
* s::                           Show information about variables
* s00::                         CIO locator from CIP x,y, IAU 2000A
* s00a::                        CIO locator, IAU 2000A
* s00b::                        CIO locator, IAU 2000B
* s06::                         CIO locator from CIP x,y, IAU 2000A/2006
* s06a::                        CIO locator, IAU 2000A/2006
* s2c::                         Cartesian unit from spherical coordinates
* s2p::                         Cartesian from spherical coordinates
* s2pv::                        Cartesian position/velocity from spherical coordinates
* sc::                          Sine-cosine transform
* scale::                       Convert to @code{byte} suitable for display
* scalerange::                  Convert to @code{byte} suitable for display
* scanf::                       Read from file in ASCII format
* scb::                         Inverse sine-cosine transform
* sccomplex::
* sdev::                        Standard deviation
* segment::                     Curvature-based image segmentation
* segmentdir::                  Curvature-based linear image segmentation
* sepp::                        Angular separation from cartesian coordinates
* seps::                        Angular separation from spherical coordinates
* set::                         Set properties of the LUX session
* setbackground::               Set the background color
* setbg::                       Set the background color
* setenv::                      Set an environment variable
* setfg::                       Set the foreground color
* setforeground::               Set the foreground color
* setnan::                      Mark values as Not-a-Number
* sgn::                         The signum function: the sign of data
* shift::                       Circular integer shift of an array
* shift3::                      Bicubic interpolation shift of an array
* show::                        Show information about variables
* showorbits::                  Show information on read orbital data
* showstats::                   Show information about the LUX session
* show_files::                  Show info on all open files
* show_func::                   Show information about a LUX function
* show_subr::                   Show information about a LUX subroutine
* show_temps::                  Show information about temporary variables
* show_visuals::                Show available color display schemes
* siderealtime::                The mean sidereal time
* sieve::                       Select elements according to a condition
* sin::                         Sine
* sinh::                        Hyperbolic sine
* skipc::                       Skip characters in a string
* skipf::                       Skip files on a tape
* skipr::                       Skip records on a tape
* smap::                        Convert to @code{string} byte by byte
* smod::                        Signed modulus
* smooth::                      Boxcar smoothing
* solar_b::                     Solar B angle
* solar_l::                     Solar L angle
* solar_p::                     Solar P angle
* solar_r::                     Apparent solar radius
* sort::                        Sort into ascending order
* sp00::                        TIO locator
* spawn::                       Send a command to the operating system
* sprintf::                     Convert to @code{string}
* sqrt::                        Square root
* sscanf::                      Read from string
* ssfctopolar::                 Convert SSFC to polar coordinates
* starpm::                      Update star catalog data for space motion
* starpv::                      Convert star catalog data to position/velocity vector
* step::                        Step through LUX code
* store::                       Write data to an FZ file
* str::                         Convert to @code{string}
* strarr::                      Create a @code{string} array
* strcount::                    Count the occurrence of a substring
* stretch::                     Warp an image
* string::                      Convert to @code{string}
* strlen::                      Length of a string
* strloc::                      Locate a substring
* strpbrk::                     Locate a substring
* strpos::                      Locate a substring
* strr::                        Substitute a substring
* strreplace::                  Substitute a substring
* strskp::                      Skip a substring
* strsub::                      Return a substring
* strtok::                      Find and return a token from a string
* strtol::                      Read a number from a string
* strtrim::                     Skip whitespace
* struct::
* student::                     Student's t distribution
* subshift::                    Calculate a subpixel shift
* subshiftc::                   Calculate a subpixel shift
* sun_b::                       Solar B angle
* sun_d::                       Solar distance
* sun_p::                       Solar P angle
* sun_r::                       Solar radius
* svd::                         Singular Value Decomposition
* swab::                        Swap bytes in pairs
* swapb::                       Swap bytes in pairs
* swaphalf::                    Swap array halfs
* switch::                      Switch identity of two variables
* symbol::                      Return the symbol with the given name
* symclass::                    Data class of a symbol
* symdtype::                    Data type of a numerical or string variable
* symmem::                      Memory use of a symbol
* symnum::                      Symbol number of a named symbol
* t::                           Print to screen
* table::                       Linear interpolation in a table
* taitt::                       TAI to TT
* taiut1::                      TAI to UT1
* taiutc::                      TAI to UTC
* tai_from_date::               Conversion between UTC and TAI
* tan::                         Tangent
* tanh::                        Hyperbolic tangent
* tapebufin::                   Read from tape
* tapebufout::                  Write to tape
* tape_status::                 Tape status
* taprd::                       Read from tape
* tapwrt::                      Write to tape
* tcbtdb::                      TCB to TDB
* tcgtt::                       TCG to TT
* tdbtcb::                      TDB to TCB
* tdbtt::                       TDB to TT
* temporary::                   Temporary copy
* tense::                       Interpolate using splines under tension
* tense_curve::                 Interpolate using splines under tension
* tense_loop::                  Interpolate using splines under tension
* threecolors::                 Install the "three-colors" color table
* tolookup::                    Condense using a lookup table
* total::                       Return the total of parts of an array
* tr::                          Transpose a 3-by-3 matrix
* trace::                       Trace execution of LUX code
* trace_decoder::
* trajectory::                  Calculate particle trajectories
* transpose::
* trend::                       Determine polynomial trend in data
* tri_name_from_tai::
* trxp::                        Product of 3-vector and transposed 3-by-3 matrix
* trxpv::                       Product of position/velocity vector and transposed 3-by-3 matrix
* tttai::                       TT to TAI
* tttcg::                       TT to TCG
* tttdb::                       TT to TDB
* ttut1::                       TT to UT1
* tv::                          Display an image
* tv3::                         Display an image and two bitmaps
* tvlab::                       Display a label
* tvlct::                       Load a color table
* tvmap::                       Display an array
* tvplane::
* tvraw::                       Display an array without color mapping
* tvread::                      Read an image into an array
* ty::                          Print to screen
* type::                        Print to screen
* typename::                    Name of a data type
* ulib::                        User library
* unload::                      Unload a tape
* unmod::
* upcase::                      Convert a string to upper case
* upper::                       Convert a string to upper case
* ut1tai::                      UT1 to TAI
* ut1tt::                       UT1 to TT
* ut1utc::                      UT1 to UTC
* utctai::                      UTC to TAI
* utcut1::                      UTC to UT1
* variance::                    Variance
* varname::                     Return the name of a variable
* verify::
* voigt::                       Voigt function
* wait::                        Wait
* wait_for_menu::               Wait for a menu selection
* wait_for_tape::               Wait for completion of a tape command
* watch::                       Watchpoint for a variable
* weof::                        Write an end-of-file to tape
* where::                       Return symbol that a memory address is in
* window::                      Select a window
* wmap::                        Convert to @code{word} byte by byte
* word::                        Convert to @code{word} value by value
* writeu::                      Write unformatted to a disk file
* write_jpeg::
* xanimate::                    Animate a set of images
* xclose::                      Close the X connection
* xcopy::                       Copy a part of an image
* xcursor::                     Select a pointer type
* xdelete::                     Delete a window
* xdrawarc::
* xdrawline::
* xevent::                      Show information about pending X events
* xexist::
* xflush::                      Flush the X event queue
* xfont::                       Select a font for display
* xinvertarc::
* xinvertline::
* xlabel::                      Display a label
* xlabelwidth::                 Determine the width of a display label
* xloop::                       X event loop
* xmaddfiletolist::
* xmalignment::
* xmarmcolor::
* xmarrow::                     Arrow widget
* xmattach::                    Specify attachment of widgets
* xmattach_relative::           Specify attachment of widgets
* xmbackgroundcolor::           Set a widget's background color
* xmboard::                     Bulletin board widget
* xmbordercolor::               Set a widget's border color
* xmborderwidth::               Set a widget's border width
* xmbottomshadowcolor::         Set a widget's bottom shadow color
* xmbutton::                    Button widget
* xmcheckbox::                  Check box widget
* xmcolumns::                   Column widget
* xmcommand::                   Command widget
* xmdestroy::                   Destroy a widget
* xmdialog_board::
* xmdialog_form::
* xmdrawingarea::
* xmdrawinglink::
* xmfilegetlist::
* xmfileselect::
* xmfont::                      Sets a widget's font
* xmforegroundcolor::           Sets a widget's foreground color
* xmform::                      Form widget
* xmframe::                     Frame widget
* xmgetoptionselection::
* xmgetpixmap::
* xmgetwidgetaddress::
* xmgetwidgetposition::
* xmgetwidgetsize::
* xmhscale::
* xmhscrollbar::
* xmlabel::                     Label widget
* xmlist::
* xmlistadditem::
* xmlistcount::
* xmlistdeleteall::
* xmlistdeleteitem::
* xmlistfromfile::
* xmlistfunc::
* xmlistselect::
* xmlistsubr::
* xmmenubar::                   Menu bar widget
* xmmessage::                   Message widget
* xmoptionmenu::
* xmpixmapbutton::
* xmpixmapoptionmenu::
* xmposition::                  Set a widget's position and size
* xmprompt::                    Prompt widget
* xmpulldownmenu::              Pull-down menu widget
* xmquery::
* xmradiobox::                  Radio box widget
* xmraise::
* xmresizepolicy::
* xmrows::                      Row widget
* xmscalegetvalue::
* xmscaleresetlimits::
* xmscalesetvalue::
* xmscrollbarsetvalues::
* xmscrolledwindow::
* xmscrolledwindowapp::
* xmselectcolor::
* xmsensitive::
* xmseparator::                 Separator widget
* xmsetcolors::
* xmsetdirectory::
* xmsetlabel::
* xmsetmargins::
* xmsetmnemonic::
* xmsetmodal::
* xmsetoptionselection::
* xmsetpixmap::
* xmsettitle::
* xmset_text_output::
* xmsize::
* xmtext::
* xmtextappend::
* xmtextbox::
* xmtexterase::
* xmtextfield::
* xmtextfieldarray::
* xmtextfieldgetstring::
* xmtextfieldseteditable::
* xmtextfieldsetmaxlength::
* xmtextfieldsetstring::
* xmtextfromfile::
* xmtextgetinsertposition::
* xmtextgetlastposition::
* xmtextgetselection::
* xmtextgetstring::
* xmtextreplace::
* xmtextseteditable::
* xmtextsetposition::
* xmtextsetrowcolumnsize::
* xmtextsetstring::
* xmtogglegetstate::
* xmtogglesetstate::
* xmtoplevel_board::            Top level bulletin board widget
* xmtoplevel_form::             Top level form widget
* xmtopshadowcolor::            Set a widget's top shadow color
* xmvscale::
* xmvscrollbar::
* xopen::                       Open the X connection
* xor::                         Exclusive or
* xplace::                      User-selected position
* xport::                       Create or rescale a window
* xpurge::                      Purge the X event queue
* xquery::                      Determine the status of the pointer
* xregister::                   Register event types for capture
* xsetaction::                  Select copy type
* xtloop::
* xtmluxge::
* xtparent::
* xtpopdown::
* xtpopup::
* xtunmluxge::
* xtv::                         Display an image
* xtvread::                     Read an image into an array
* xtwindow::
* xwin::                        Create or rescale a window
* xwindow::                     Create or rescale a window
* xy06::                        CIP x,y, IAU 2000A/2006
* xys00a::                      CIP x,y, IAU 2000A
* xys00b::                      CIP x,y, IAU 2000B
* xys06a::                      CIP x,y and CIO locator, IAU 2000A/2006
* xymov::                       Draw a line
* zap::                         Completely remove a variable
* zero::                        Zero a variable
* zeroifnotdefined::
* zeronans::                    Remove NaN values
* zinv::                        Zero-protected inverse
* zoom::                        Image inspection using the pointer
* Square Brackets::             Concatenation into an array
* Curly Braces::                Concatenation into a list
@end menu

@node abs, acos, Internal Routines, Internal Routines
@subsection abs
@findex abs

@code{abs(@var{x})}

Returns the absolute value (i.e., the distance from zero) of (each
element of) numerical @code{@var{x}}.  For instance: @code{abs(6)} and
@code{abs(-6)} both yield @code{6}.  This function accepts complex
arguments.

See also: @ref{sgn}, @ref{Math Routines}, @ref{Complex Functions}

@c -------------------------------------
@node acos, acosh, abs, Internal Routines
@subsection acos
@findex acos

@code{acos(@code{@var{x}})}

Returns the arc cosine of numerical @code{@var{x}}, in radians.  This
function accepts complex arguments.

For ordinary (real) arguments, the arc cosine is only defined for
arguments between @code{-1} and @code{+1} (inclusive).  Multiply by
@code{@var{#rad}} to get degrees.

The arc cosine function is defined for any complex argument.

Reverse: @ref{cos}

See also: @ref{asin}, @ref{atan}, @ref{#rad}, @ref{Trigonometry},
@ref{Complex Functions}

@c -------------------------------------
@node acosh, alog, acos, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection acosh
@findex acosh

@code{acosh(@var{x})}

Returns the inverse hyperbolic cosine of real numerical value
@code{@var{x}}.

Reverse: @ref{cosh}

See also: @ref{asinh}, @ref{atanh}, @ref{Hyperbolic Functions}

@c -------------------------------------
@node alog, alog10, acosh, Internal Routines
@subsection alog
@findex alog

@code{alog(@code{@var{x}})}

Returns the natural (i.e., base @code{@var{#e}}) logarithm of numerical
@code{@var{x}}.  The logarithm is defined for positive real arguments
and for any complex arguments.

Reverse: @ref{exp}

Alias: @ref{log}

See also: @ref{alog10}, @ref{#e}, @ref{Exponential/Logarithmic
Functions}, @ref{Complex Functions}

@c -------------------------------------
@node alog10, and, alog, Internal Routines
@subsection alog10
@findex alog10

@code{alog10(@var{x})}

Returns the decimal logarithm (base 10) of numerical @code{@var{x}}.  The
logarithm is defined for positive real arguments and for any complex
arguments. 

Alias: @ref{log10}

See also: @ref{alog}, @ref{Exponential/Logarithmic Functions}

@c -------------------------------------
@node and, andif, alog10, Internal Routines
@subsection and
@findex and

@code{@var{x} and @var{y}}

Logical binary ``and'' operator.  @code{@var{x} and @var{y}} combines
the bits of integers @code{@var{x}} and @code{@var{y}} such that any
bit in the result is only set (i.e., equal to 1) if the corresponding
bit in both @code{@var{x}} and @code{@var{y}} is set.

See also: @ref{andif}, @ref{or}, @ref{orif}, @ref{xor}, @ref{Binary
Logic}, @ref{Binary Operators}

@c -------------------------------------
@node andif, area, and, Internal Routines
@subsection andif
@findex andif

@code{@var{x} andif @var{y}}

A binary conditional: a logical binary ``and'' operator with possible
evaluation suppression.  @code{@var{x} andif @var{y}} is allowed for
scalar @code{@var{x}} and @code{@var{y}} only, and then yields the
same result as @code{@var{x} ne 0 and @var{y} ne 0}, except that if
@code{@var{x}} equals zero, then @code{@var{y}} is not evaluated.

See also: @ref{and}, @ref{ne}, @ref{or}, @ref{orif}, @ref{xor},
@ref{Binary Conditionals}, @ref{Binary Operators}

@c -------------------------------------
@node area, area2, andif, Internal Routines
@subsection area
@findex area

@code{area, @var{bitmap} [, seed=@var{seed}, numbers=@var{numbers},
diagonal=@var{diagonal}]}

@code{area, @var{bitmap}} identifies all disjoint areas in @code{long}
array @code{@var{bitmap}} (of arbitrary dimensions) which have elements
with value one.  Elements with values equal to zero or greater than one
are disregarded.  Negative values are used internally to indicate
intermediate processing states, so these must not be present in
@code{@var{bitmap}}!  The identified areas in @code{@var{bitmap}} are
filled with a number which uniquely label them.

If @code{@var{seed}} is specified, then it is assumed to contain indices
to @code{@var{bitmap}} at which areas are to be sought.  In that case,
only the areas found at those positions are identified.

If @code{@var{number}} is specified, then it is assumed to contain area
numbers to assign to the areas found at the corresponding positions from
@code{@var{seed}}.  @code{@var{number}} must have either one element or
the same number as @code{@var{seed}}.  In the former case, area numbers
are incremented by one, starting at the value of @code{@var{number}}.
If no @code{@var{number}} is specified, then assigned area numbers start
at 2.

If @code{@var{diagonal}} is specified, then it must have one element per
data dimension and is taken as instructions on which nearest-neighbor
connections to recognize.  A 2 means that nearest neighbors with their
@code{@var{bitmap}} values equal to 1 are assigned to the same area if
they share any face or vertex in the corresponding dimension.  A 1 means
that such neighbors are assigned to the same area only if they share a
face in the corresponding dimension.  A 0 means that connections in the
corresponding dimension are ignored.  If @code{@var{diagonal}} is not
specified, then code 2 is assumed for all dimensions.

For example, if @code{@var{diagonal}} is equal to @code{[2, 2, 0]}, then
no connections in the third dimension are recognized, and the data is
treated as a set of unconnected two-dimensional images (but no area in
any of these images shares its area number with any area in any of the
other images).  Within each of the images, connections in all four
directions (N-S, E-W, NE-SW, NW-SE) are recognized in this case.  If
@code{@var{diagonal}} is equal to @code{[1, 1, 0]}, then only directions
in the orthogonal directions (N-S, E-W) are recognized.  Likewise for
@code{[2, 1, 0]}, because even though the first dimension allowes
vertices, the second one only accepts faces.

If @code{area} is called with @code{@var{bitmap}} a two-dimensional
@code{long} array and with no other arguments, then a special-purpose
version of the routine is called which is optimized for this case for
speed.  Otherwise, a more versatile but somewhat slower version is used.

On an SGI R5000 (200 MHz) running Irix, for 2D data, the special-purpose
version takes about 0.14 microseconds (27 CPU cycles) per data element,
and the general version about 0.15 microseconds (30 CPU cycles) per data
element.  If the special-purpose version cannot be speeded up more, then
it may be discarded.

See also: @ref{area2}, @ref{segment}, @ref{areaconnect}, @ref{Topology}

@c -------------------------------------
@node area2, areaconnect, area, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection area2
@findex area2

@code{area2, @var{bitmap}, @var{data} [, seed=@var{seeds},
numbers=@var{numbers}, diagonal=@var{diagonal}, sign=@var{sign}]}

@code{area2, @var{bitmap}, @var{data}} identifies all disjoint areas in
@code{long} array @code{@var{bitmap}} (of arbitrary dimensions) which
have elements with value one, guided by the data values in numerical
array @code{@var{data}}, which must have one element for each element of
@code{@var{bitmap}}.  Elements with values equal to zero or greater than
one in @code{@var{bitmap}} are disregarded.  Negative values are used
internally to indicate intermediate processing states, so these must not
be present in @code{@var{bitmap}}!  The identified areas in
@code{@var{bitmap}} are filled with a number which uniquely label them.

Those elements of @code{@var{bitmap}} with values equal to 1 are
assigned to the same area that (1) share a vertex or face, according to
@code{@var{diagonal}} (see below), and (2) are linked to the same local
appropriate extreme through steepest-gradient paths.  If
@code{@var{sign}} is specified and negative, then links to local minima
are sought, otherwise to local maxima.  The second criterion ensures
that any given area contains at most one local extreme of the desired
kind.

If @code{@var{seed}} is specified, then it is assumed to contain indices
to @code{@var{bitmap}} at which areas are to be sought.  In that case,
only the areas found at those positions are identified.

If @code{@var{number}} is specified, then it is assumed to contain area
numbers to assign to the areas found at the corresponding positions from
@code{@var{seed}}.  @code{@var{number}} must have either one element or
the same number as @code{@var{seed}}.  In the former case, area numbers
are incremented by one, starting at the value of @code{@var{number}}.
If no @code{@var{number}} is specified, then assigned area numbers start
at 2.

If @code{@var{diagonal}} is specified, then it must have one element per
data dimension and is taken as instructions on which nearest-neighbor
connections to recognize.  A 2 means that nearest neighbors with their
@code{@var{bitmap}} values equal to 1 are assigned to the same area if
they share any face or vertex in the corresponding dimension.  A 1 means
that such neighbors are assigned to the same area only if they share a
face in the corresponding dimension.  A 0 means that connections in the
corresponding dimension are ignored.  If @code{@var{diagonal}} is not
specified, then code 2 is assumed for all dimensions.

For example, if @code{@var{diagonal}} is equal to @code{[2, 2, 0]}, then
no connections in the third dimension are recognized, and the data is
treated as a set of unconnected two-dimensional images (but no area in
any of these images shares its area number with any area in any of the
other images).  Within each of the images, connections in all four
directions (N-S, E-W, NE-SW, NW-SE) are recognized in this case.  If
@code{@var{diagonal}} is equal to @code{[1, 1, 0]}, then only directions
in the orthogonal directions (N-S, E-W) are recognized.  Likewise for
@code{[2, 1, 0]}, because even though the first dimension allowes
vertices, the second one only accepts faces.

If @code{@var{bitmap}} is a 2D array, and no @code{@var{seed}},
@code{@var{numbers}}, or @code{@var{diagonal}} is specified, then a
special-purpose version optimized for speed is used.  Otherwise, a more
general-purpose version is used.  On an sgi r5000 (200 MHz) running
Irix, for 2D data, the special-purpose version takes about 0.11
microseconds (23 cpu cycles) per data element, and the general-purpose
version about 0.12 microseconds (24 cpu cycles).

See also: @ref{area}, @ref{segment}, @ref{areaconnect}, @ref{Topology}

@c -------------------------------------
@node areaconnect, arestore, area2, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection areaconnect
@findex areaconnect

@code{areaconnect(@var{data1}, @var{data2} [, @var{compact}] [, /raw])}

Determines connections between areas in data @code{@var{data1}} and
@code{@var{data2}}, based on spatial overlap.  The data must be arrays
of type @code{long}.  Each element of @code{@var{data1}} must contain a
number that identifies the area or class that the element is a part of,
for example determined by @code{area}, and likewise for
@code{@var{data2}}.  A data value equal to zero is regarded as
background, and data elements with zeros in both @code{@var{data1}} and
@code{@var{data2}} are ignored altogether.

The data elements with any particular area number need not form a
contiguous set; a particular data element from @code{@var{data1}} is
only compared to the corresponding data element from @code{@var{data2}},
and to no others.  The numbers in @code{@var{data1}} are independent of
the numbers in @code{@var{data2}}: No special relationship is inferred
if some area in @code{@var{data1}} has the same ID number as some area
in @code{@var{data2}}.

The return value of this function is a two-dimensional @code{long} array
with 3 elements in its second dimension.  If we call that array
@code{r}, then @code{r(*,0)} contains area numbers from
@code{@var{data1}}, @code{r(*,1)} contains area numbers from
@code{@var{data2}}, and @code{r(*,2)} contains the number of data
elements that have that combination of @code{@var{data1}} and
@code{@var{data2}} numbers.  Data elements that have a value of zero in
both data arrays are ignored.  The results are sorted fi
st in ascending
order of @code{@var{data1}} values, and then, for entries with equal
@code{@var{data1}} values, in ascending order of @code{@var{data2}}
values.

If @code{/raw} is specified, then nothing more is done.  Otherwise, the
areas are divided into topological classes and relevant information is
returned in global variables, as listed in the following table.  If
there are no entries in any particular topological class, then a scalar
@code{@minus{}1} is returned in the corresponding global variable.
Otherwise, a @code{long} array is returned.

@table @asis
@item @code{$APP}
Those areas that have non-zero @code{@var{data2}} values but no non-zero
@code{@var{data1}} values are appearing.  Their @code{@var{data2}} area
numbers are returned in ascending order in @code{$APP}.
@item @code{$DISAPP}
Those areas that have non-zero @code{@var{data1}} values but no non-zero
@code{@var{data2}} values are disappearing.  Their @code{@var{data1}}
area numbers are returned in ascending order in @code{$DISAPP}.
@item @code{$SPLIT1}, @code{$SPLIT2}, @code{$SPLIT2_INDEX}
Those @code{@var{data1}} areas that have overlap with more than one
@code{@var{data2}} area are splitting.  Their @code{<@var{data1}} (i.e.,
pre-split) area numbers are returned in ascending order in
@code{$SPLIT1}.  The @code{@var{data2}} (i.e., post-split) area numbers
corresponding to pre-split @code{@var{data1}} area number
@code{$SPLIT1(i)} are given, in ascending order, by @code{$SPLIT2
( $SPLIT2_INDEX(i) : $SPLIT2_INDEX(i + 1) - 1)}.
@item @code{$MERGE1}, @code{$MERGE2}, @code{$MERGE1_INDEX}
Those @code{@var{data2}} areas that have overlap with more than one
@code{@var{data1}} area are the product of merging.  Their
@code{@var{data2}} (i.e., post-merge) area numbers are returned in
ascending order in @code{$MERGE2}.  The @code{@var{data1}} (i.e.,
pre-merge) area numbers corresponding to post-merge @code{@var{data2}}
area number @code{$MERGE2(i)} are given, in ascending order, by
@code{$MERGE1( $MERGE1_INDEX(i) : $MERGE1_INDEX(i + 1) - 1)}.
@item @code{$STAY1}, @code{$STAY2}
Those areas that neither appear, disappear, merge, nor split, are
staying topologically the same.  Their @code{@var{data1}} area numbers
are returned in ascending order in @code{$STAY1}, and the corresponding
@code{@var{data2}} area numbers in @code{$STAY2}.
@end table

At this point, the area numbers in @code{@var{data2}} are not related to
the area numbers in @code{@var{data1}}, so even areas that remain
topologically the same from @code{@var{data1}} to @code{@var{data2}} do
not have the same area number in both data sets.  Such a relation can be
requested by specifying an appropriate value for @code{@var{compact}},
in which case the values in @code{@var{data2}} and related global
variables are modified to best express their relation to
@code{@var{data1}}.  The numbers in @code{@var{data1}} and related
global variables are not modified.

If @code{@var{compact}} is unspecified, negative, or equal to @code{0},
then nothing is modified.  Otherwise, the @code{@var{data2}} areas in
the class of stayers receive the corresponding number from
@code{@var{data1}} (so that @code{$STAY2} becomes equal to
@code{$STAY1}).  For splitters, the first of the @code{@var{data2}}
split products inherits the area number of the @code{@var{data1}} source
area, so that @code{$SPLIT2($SPLIT2_INDEX)} becomes equal to
@code{$SPLIT1}.  For mergers, the @code{@var{data1}} area number of the
first merger component is propagated to the @code{@var{data2}} merger
product, unless that area number was already used earlier, in which case
the remaining merger components are inspected until an unused area
number is found or the last component was dismissed.

After this process (if @code{@var{compact}} is positive), there may
still be some @code{@var{data2}} areas that have not yet received a new
number.  If @code{@var{compact}} is equal to @code{1}, then those areas
receive successive numbers starting at one greater than the greatest
number in @code{@var{data1}}.  If @code{@var{compact}} is equal to
@code{2}, then those areas receive numbers that are as small as possible
but not yet otherwise used in @code{@var{data2}} and not less than 2.
If @code{@var{compact}} is greater than 2, then those areas receive
successive numbers starting at one greater than the value of
@code{@var{compact}} or the greatest number in @code{@var{data1}},
whichever is greater.

See also: @ref{area}, @ref{segment}, @ref{Topology}

@c -------------------------------------
@node arestore, arg, areaconnect, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection arestore
@findex arestore

@code{arestore [, @var{x}, @dots{}], @var{file}}

@code{arestore( [ @var{x}, @dots{} ], @var{file})}

Restores data that was earlier saved with the @code{astore} subroutine
or function from the file with name @code{@var{file}}, which is the last
argument in the list.  Earlier arguments (which must be named variables)
receive successive values from the file, until either the arguments or
the values in the file run out.  The function form returns 1 on success,
0 on failure.

See also: @ref{astore}, @ref{Uncompressed Disk Output}

@c -------------------------------------
@node arg, array, arestore, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection arg
@findex arg

@code{arg(@var{x})}

Returns the complex argument of the numerical @var{x}.  The (complex)
argument of a complex number is equal to the angle, in the complex
plane, between the positive real axis and that complex number, measured
in counterclockwise radians from the origin.

See also: @ref{abs}, @ref{conjugate}, @ref{imaginary}, @ref{real},
@ref{Complex Numbers}, @ref{Math Routines}, @ref{Complex Functions}

@c -------------------------------------
@node array, asin, arg, Internal Routines
@subsection array
@findex array

@code{array(@var{type}, @var{dimensions})}

Returns an array of the indicated @code{@var{type}} (which must be one
of the numbers that are defined in the structure @code{#type}) and
@code{@var{dimensions}}.  The latter may be either a single array
containing the dimensions, or a list of scalar dimensions.

See also: @ref{bytarr}, @ref{dblarr}, @ref{distarr}, @ref{fltarr},
@ref{intarr}, @ref{lonarr}, @ref{cfloat}, @ref{cdouble}, @ref{#type},
@ref{Default Arrays}

@c -------------------------------------
@node asin, asinh, array, Internal Routines
@subsection asin
@findex asin

@code{asin(@var{x})}

Returns the arc sine of numerical @code{@var{x}}, in radians.  This
function accepts complex arguments.

For ordinary (real) arguments, the arc sine is only defined for
arguments between @code{-1} and @code{+1} (inclusive).  Multiply by
@code{#rad} to get degrees.

The arc sine function is defined for any complex argument.

Reverse: @ref{sin}

See also: @ref{acos}, @ref{atan}, @ref{#rad}, @ref{Trigonometry},
@ref{Complex Functions}

@c -------------------------------------
@node asinh, assoc, asin, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection asinh
@findex asinh

@code{asinh(@var{x})}

Returns the inverse hyperbolic sine of real numerical value
@code{@var{x}}.

Reverse: @ref{sinh}

See also: @ref{acosh}, @ref{atanh}, @ref{Hyperbolic Functions}

@c -------------------------------------
@node assoc, astore, asinh, Internal Routines
@subsection assoc
@findex assoc

@code{assoc(@var{lun}, @var{array} [, offset=@var{offset}])}

Sets up an associated variable for logical unit @code{@var{lun}}, and
associates the logical unit with an array of type and structure of
@code{@var{array}}, taking into account a file header with a size of
@code{@var{offset}} bytes (which defaults to 0).

See also: @ref{Associated Variables}, @ref{lonfarr}, @ref{openr},
@ref{Data Creation}, @ref{Disk I/O}
@c -------------------------------------
@node astore, astrf, assoc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection astore
@findex astore

@code{astore, @var{x} [, @dots{}], @var{file}}

@code{astore(@var{x} [, @dots{}], @var{file})}

Stores the values of all but the last arguments in the file whose name
is the last argument (@code{@var{file}}).  Only simple data classes
(@code{scalar}, @code{string}, @code{array}, @code{range},
@code{filemap}, @code{assoc}, @code{undefined}) are currently
implemented.  Compound data classes (e.g., @code{list}, @code{struct})
that encompass more than one symbol are not currently implemented.  The
function form returns 1 on success, 0 on failure.

See also: @ref{arestore}, @ref{Uncompressed Disk Output}

@c -------------------------------------
@node astrf, astron, astore, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection astrf
@findex astrf

@code{astrf(@code{coords} [, @code{equinox}, /julian, /besselian] [,
/fromequatorial, /fromecliptical, /fromgalactic] [, /toequatorial,
/toecliptical, /togalactic])}

Transforms between the main astronomical coordinate systems (with all
coordinates measured in degrees).  @code{@var{coords}(0,/all)} are
longitudes or right ascensions.  @code{@var{coords}(1,/all)} are
latitudes or declinations.  Where relevant, the coordinates are
assumed to be or are returned relative to the indicated
@code{@var{equinox}}, which is a Julian Date (if neither
@code{/julian} nor @code{/besselian} is specified), or a Julian year
(e.g., 2000.0 = J2000.0) if @code{/julian} is specified, or a
Besselian year (e.g., 1875.0 = B1875.0) if @code{/besselian} is
specified.  Besselian years are taken to be 365.2421988 days long, and
B1950.0 corresponds to JDE 2433282.4235.  If @code{@var{equinox}} is
not specified, then J2000.0 is assumed.  The result has the same
structure as @code{@var{coords}}.  By default, @code{/fromequatorial,
/toecliptical} is assumed.

See also: @ref{astron}, @ref{precess}

@c -------------------------------------
@node astron, atan, astrf, Internal Routines
@subsection astron
@findex astron

@code{astron(@var{jds}, @var{objects} [, @var{object0},
observer=@var{observer}, equinox=@var{equinox},
elements=@var{elements}] [, /xyz, /equatorial, /ecliptical,
/horizontal, /elongation, /date, /tdt, /lighttime, /aberration,
/nutation, /apparent, /qelements, /fk5, /conjspread, /planetocentric,
/keepdimensions, /vocal, /vsop87a, /vsop87c])}

Returns the positions of a set of heavenly bodies at a specific set of
times.  Unless the user specifies otherwise, the times are taken to be
in UT, light-time, nutation, and aberration effects are not included,
the observer is assumed to be at the center of the Earth, and
ecliptical coordinates (longitude and latitude in degrees, distance in
AU) for equinox J2000.0 are returned, referred to the VSOP dynamical
ecliptic and equinox.  The data for the major planets and the Sun are
derived from the VSOP87C or (by default) VSOP87A models of Bretagnon
and Francou (@emph{Astronomy and Astrophysics}, Vol. 202, pp. 309-315,
1988), optionally truncated as by Meeus (@emph{Astronomical
Algorithms}, Willmann-Bell Inc., 1991, ISBN 0-943396-35-2).

@table @var
@item jds
Julian dates for which results are desired.  (@ref{calendar})
@item objects
scalar or array of numbers of objects for which info is to be returned.
Currently supported: 0 for the Sun, 1 for Mercury, 2 for Venus, 3 for
the Earth, 4 for Mars, 5 for Jupiter, 6 for Saturn, 7 for Uranus, 8 for
Neptune, 10 for the Moon.  If object numbers not listed here are
specified, then orbital data is sought in an auxilliary file, as
discussed below.
@item object0
number of the object relative to which the other coordinates are
requested, if any.
@item observer
[North latitude/degrees, West longitude/degrees, height/m] of the
observer.  If none is specified, then the observer is assumed to
reside at the center of the planet.
@item equinox
The year of the equinox relative to which the results are returned.
If a scalar, then the unit is Julian years, with (J) 2000.0 equivalent
to JDE 2451545.0.  If a string, then the first character must be
either a j or J (indicating Julian years), or a b or B (indicating
Besselian years).  The equinox of the date can be requested through
the /date keyword.
@item elements
A nine-element array containing orbital elements for the target object.
The elements are, if @code{/qelements} is also specified: the equinox,
the epoch, the perihelion distance, the eccentricity, the inclination,
the longitude of the ascending node, the argument of the perihelion, the
time of the perihelion, and the absolute magnitude.  If
@code{/qelements} is not specified, then the length of the semimajor
axis replaces the perihelion distance and the mean anomaly at the epoch
replaces the time of perihelion.  The times are in JDE, the angles in
degrees, the distances in AU.
@end table

@table @code
@item /date
selects the equinox of the date.
@item /xyz
selects return of x y z coordinates in AU.  If @code{/xyz} is not
specified, then polar coordinates are returned (right
ascension/longitude in degrees, declination/latitude in degrees, and
distance in AU).
@item /equatorial
return equatorial coordinates (based on the celestial equator).
@item /ecliptical
return ecliptical coordinates (based on the ecliptic).
@item /horizontal
return azimuth (West from South) and height (in degrees), and distance
(in AU).
@item /elongation
return elongation (angular distance to Sun) in degrees, phase angle (angular
distance of observer to Sun as seen from target object) in degrees, and
estimated visual magnitude (which may be wildly off for geometries
unlike those seen from Earth).
@item /tdt
selects dates in TDT (terrestrial dynamical time) rather than
UT.  The difference between TDT (a time based on planetary motion) and
UT (a time based on the Earth's rotation) varies slowly with time.  LUX
uses a quadratic fit to past estimates of the difference to calculate an
estimated difference for the times you specify.  All the planetary
calculations are performed in TDT.
@item /lighttime
selects inclusion of light-time effects: the returned coordinates say
where the target object was at the time when light left it to reach
the observer at time @code{@var{jds}}.
@item /aberration
selects inclusion of aberration effects.
@item /nutation
selects inclusion of nutation effects.
@item /apparent
selects return of apparent positions, including the effects of
light-time, aberration, and nutation.
@item /qelements
indicates that @code{@var{elements}} is specified in terms of the
perihelion (i.e., comet-style) rather than the semimajor axis (i.e.,
planet-style).
@item /fk5
returns coordinates relative to the FK5 system.  If @code{/nofk5} is
specified, then the coordinates are referred to the mean dynamical
ecliptic defined by the VSOP system.
@item /conjspread
return the average position (ecliptical longitude and latitude) and
the the conjunction spread of all indicated objects, measured in
degrees.  The conjunction spread is a measure for how close together
all indicated objects are in the sky.  For two close objects, the
conjunction spread is practically equal to their mutual distance.  For
many objects on a great circle (e.g., planets on the ecliptic), the
conjunction spread is equal to twice the standard deviation of their
positions along the great circle.
@item /keepdimensions
returns dimensions for the number of objects and number of dates even
if these are equal to 1.
@item /vocal
makes the routine print intermediate results.
@item /vsop87a
selects the VSOP87A model (cartesian heliocentric coordinates for
J2000.0) to base the results on.
@item /vsop87c
selects the VSOP87C model (cartesian heliocentric coordinates for the
equinox of the date) to base the results on.
@end table

If objects not listed above are indicated in @code{@var{objects}} and/or
@code{@var{object0}}, then data for such objects are sought in
auxilliary files.  Such files can be read using the @code{readorbits}
routine.  If no such files have yet been read when needed, then file
@file{$LUXDIR/orbits} is attempted.

If the requested time falls outside of the time period spanned by the
data lines for the indicated object, then the orbital parameters closest
in time to the desired time are used.  Otherwise, linear interpolation
between the two orbits that are closest in time on either side to the
desired time is performed.

See also: @ref{calendar}, @ref{readorbits}, @ref{Astronomy and Calendars}

@c -------------------------------------
@node atan, atan2, astron, Internal Routines
@subsection atan
@findex atan

@code{atan(@var{x})}

Returns the arc tangent of @code{@var{x}}, in radians.  Multiply by
@code{#rad} to get degrees.  Accepts all real and complex arguments.

Reverse: @ref{tan}

See also: @ref{acos}, @ref{asin}, @ref{atan2}, @ref{#rad},
@ref{Trigonometry}, @ref{Complex Functions}

@c -------------------------------------
@node atan2, atanh, atan, Internal Routines
@subsection atan2
@findex atan2

@code{atan2(@code{@var{y}}, @code{@var{x}})}

Returns the angle between the point with coordinates @code{(@var{x},
@var{y})} and the positive x-axis, counting counterclockwise in radians.
Multiply by @code{#rad} to get degrees.

See also: @ref{atan}, @ref{#rad}, @ref{tan}, @ref{Trigonometry}

@c -------------------------------------
@node atanh, atol, atan2, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection atanh
@findex atanh

@code{atanh(@var{x})}

Returns the inverse hyperbolic tangent of real numerical value
@code{@var{x}}.

Reverse: @ref{tanh}

See also: @ref{asinh}, @ref{acosh}, @ref{Hyperbolic Functions}

@c -------------------------------------
@node atol, atomize, atanh, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection atol
@findex atol

@code{atol(@var{s} [, @var{base}])}

Returns the integer value read from the start of string @code{@var{s}}.
If @code{@var{base}} is specified, then it indicates the base relative
to which the value is to be read.  Valid bases are any between 2 and 36,
inclusive.  If @code{@var{base}} is not specified, then 10 (i.e.,
decimal) is assumed.

Alias: @ref{strtol}

See also: @ref{eval}, @ref{String Routines}

@c -------------------------------------
@node atomize, basin, atol, Internal Routines
@subsection atomize
@findex atomize

@code{atomize, @code{@var{symbol}} [, @code{@var{dump}}] [, /tree, /line]}

For debugging.  Tries to resolve the LUX symbol with number
@code{@var{symbol}} and prints the result.  If @code{@var{dump}} is set
and unequal to zero, then encountered atomic entities (proper LUX
variables) are also @code{dump}ed.  Keyword @code{/tree} displays the
structure of the execution tree at and below the current symbol.
Keyword @code{/line} displays the structure all the way from the main
execution level.

See also: @ref{dump}, @ref{show}, @ref{Debug Routines}

@c -------------------------------------
@node basin, batch, atomize, Internal Routines
@subsection basin
@findex basin

@code{basin(@var{data} [, @var{sign}, /number, /sink, /difference])}

Interprets array @code{@var{data}} as an altitude map (in arbitrary
dimensions) and determines to which nearest neighbor water at each
location would flow (along the steepest descent if @code{@var{sign}} is
negative or by default; along the steepest ascent if @code{@var{sign}}
is positive or zero).  For keywords @code{/number} and @code{/sink} all
elements in each basin defined by a common sink (or peak) are labeled
with the same number, which is different from the labels for all other
basins.  For @code{/number} (and by default), the labels are consecutive
ordinal numbers starting at 1.  For @code{/sink}, the labels are equal
to the index to @code{@var{data}} of the sink of the basin.  If
@code{/difference} is specified, then the index offset of the visited
neighbor is returned for each pixel.

See also: @ref{segment}, @ref{area}, @ref{area2}, @ref{Topology}

@c -------------------------------------
@node batch, bessel_i0, basin, Internal Routines
@subsection batch
@findex batch

@code{batch [, /quit]}

Enter or quit batch mode.  In batch mode, all input is read from the
current input stream (which may be either a file -- when executing a
@code{@@file} command -- or the keyboard).  In direct (= non-batch)
mode, commands are read from the current input stream, but requested
data is always read from the keyboard.  If keyword @code{/quit} is
specified, then direct mode is selected.  Otherwise, batch mode is
entered.

See also: @ref{Running}
@c -------------------------------------
@node bessel_i0, bessel_i1, batch, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bessel_i0
@findex bessel_i0

@code{bessel_i0(@var{x} [, /deflate])}

@code{[@ref{develop} package]} Returns the value of the zeroth-order
modified Bessel function of the first kind, at ordinate @code{@var{x}}.
If keyword @code{/deflate} is specified, then
@code{bessel_i0(@var{x})exp(-@var{x})} is returned instead, which is
always finite.

Alias: @ref{bi0}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_i1, bessel_j0, bessel_i0, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bessel_i1
@findex bessel_i1

@code{bessel_i1(@var{x})}

@code{[@ref{develop} package]} Returns the value of the first-order
modified Bessel function of the first kind, at ordinate @code{@var{x}}.

Alias: @ref{bi1}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_j0, bessel_j1, bessel_i1, Internal Routines
@subsection bessel_j0
@findex bessel_j0

@code{bessel_j0(@var{x})}

Returns the value of the zeroth-order Bessel function of the first kind,
at ordinate @code{@var{x}}.

Alias: @ref{bj0}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_j1, bessel_jn, bessel_j0, Internal Routines
@subsection bessel_j1
@findex bessel_j1

@code{bessel_j1(@var{x})}

Returns the value of the first-order Bessel function of the first kind,
at ordinate @code{@var{x}}. 

Alias: @ref{bj1}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_jn, bessel_k0, bessel_j1, Internal Routines
@subsection bessel_jn
@findex bessel_jn

@code{bessel_jn(@var{x}, @var{order})}

Returns the value of the Bessel function of the first kind, and of the
given @code{@var{order}}, at ordinate @code{@var{x}}. 

Alias: @ref{bjn}

See also: @ref{Bessel Functions} 

@c -------------------------------------
@node bessel_k0, bessel_k1, bessel_jn, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bessel_k0
@findex bessel_k0

@code{bessel_k0(@var{x})}

@code{[@ref{develop} package]} Returns the value of the zeroth-order
modified Bessel function of the second kind at ordinate @code{@var{x}}.

Alias: @ref{bk0}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_k1, bessel_kn, bessel_k0, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bessel_k1
@findex bessel_k1

@code{bessel_k1(@var{x})}

@code{[@ref{develop} package]} Returns the value of the first-order
modified Bessel function of the second kind at ordinate @code{@var{x}}.

Alias: @ref{bk1}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_kn, bessel_y0, bessel_k1, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bessel_kn
@findex bessel_kn

@code{bessel_kn(@var{x}, @var{n})}

@code{[@ref{develop} package]} Returns the value of the
@code{@var{n}}th-order modified Bessel function of the second kind at
ordinate @code{@var{x}}.

Alias: @ref{bkn}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_y0, bessel_y1, bessel_kn, Internal Routines
@subsection bessel_y0
@findex bessel_y0

@code{bessel_y0(@var{x})}

Returns the value of the zero-order Bessel function of the second kind,
at ordinate @code{@var{x}}. 

Alias: @ref{by0}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_y1, bessel_yn, bessel_y0, Internal Routines
@subsection bessel_y1
@findex bessel_y1

@code{bessel_y1(@var{x})}

Returns the value of the first-order Bessel function of the second kind,
at ordinate @code{@var{x}}. 

Alias: @ref{by1}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bessel_yn, beta, bessel_y1, Internal Routines
@subsection bessel_yn
@findex bessel_yn

@code{bessel_yn(@var{x}, @var{order})}

Returns the value of the Bessel function of the second kind, and of the
given @code{@var{order}}, at ordinate @code{@var{x}}. 

Alias: @ref{byn}

See also: @ref{Bessel Functions} 

@c -------------------------------------
@node beta, bi0, bessel_yn, Internal Routines
@subsection beta
@findex beta

@code{beta(@var{x}, @var{y})}

Returns the value of the Beta function: the integral over @code{@var{t}}
between 0 and 1 of @code{@var{t}^(@var{x}-1) (1-t)^(@var{y}-1) =
gamma(@var{x}) * gamma(@var{y}) / gamma(@var{x} + @var{y})}.

See also: @ref{gamma}, @ref{Statistical Functions}

@c -------------------------------------
@node bi0, bi00, beta, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bi0
@findex bi0

@code{bi0(@var{x} [, /deflate])}

@code{[@ref{develop} package]} Returns the value of the zeroth-order
modified Bessel function of the first kind at ordinate @code{@var{x}},
or @code{bi0(@var{x})exp(-@var{x})} if keyword @code{/deflate} is
specified.

Alias: @ref{bessel_i0}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bi00, bi1, bi0, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bi00
@findex bi00

@code{bi00()}

[SOFA] Returns the frame bias components of the IAU 2000
precession-nutation models (part of MHB2000 with additions), in a
3-element @code{double} array.  The elements are: (0) the longitude
correction in radians, (1) the obliquity correction in radians, (2)
the ICRS right ascension of the J2000.0 mean equinox in radians.

The frame bias corrections in longitude and obliquity define a J2000.0
mean pole in Geocentric Celestial Reference System coordinates,
consistent with the rest of the IAU 2000A precession-nutation model.
The right ascension correction is not part of the IAU 2000A model but
is due to Chapront et al. (2002) Astron. Astrophys., 387, 700.

See also: @ref{bp00}, @ref{bp06}

@c -------------------------------------
@node bi1, bisect, bi00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bi1
@findex bi1

@code{bi1(@var{x})}

@code{[@ref{develop} package]} Returns the value of the first-order
modified Bessel function of the first kind at ordinate @code{@var{x}}.

Alias: @ref{bessel_i1}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bisect, bj0, bi1, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bisect
@findex bisect

@code{bisect([@var{x},] @var{y}, @var{values} [, axis=@var{axis},
pos=@var{pos}, width=@var{width}])}

Calculates bisector positions in curves interpolated between data points
with coordinates @code{(@var{x},@var{y})}, along the indicated
@code{@var{axis}} (which, if specified, must be a single scalar) at the
indicated @code{@var{values}}.  The @code{@var{x}} coordinates must be
in ascending order, with one value for each value of @code{@var{y}}
along the indicated @code{@var{axis}}.  Interpolation is done with
natural cubic splines.  Here, a bisector is a curve that lies
horizontally midway between two branches straddling a local minimum of a
curve.

If @code{@var{axis}} is not specified, then the @code{@var{data}} is
treated as if it is a one-dimensional array.

If @code{@var{pos}} is specified, then it must have a single element,
which indicates at what coordinate along the indicated @code{@var{axis}}
the search for the bisectors must begin.  This is useful if a horizontal
line at the desired level intersects a curve from
@code{(@var{x},@var{y})} in more than two places, which means that there
are at least two bisectors: By specifying @code{@var{pos}} you can
select which bisector to look for.  If no @code{@var{pos}} is specified,
then the search for the bisector is started at the location of the
absolute minimum.

If @code{@var{width}} is specified, then the profile widths (the
distance between the two branches) corresponding to the bisector level
are returned in it.

Note: Bisectors are only sought @emph{between} the data values: no
bisectors are found before the first or after the last element of each
treated profile.  If no bisector is found at the sought level, then
@minus{}1 is returned for the bisector position and 0 for the bisector
width.

See also: @ref{cspline}, @ref{Interpolation}

@c -------------------------------------
@node bj0, bj1, bisect, Internal Routines
@subsection bj0
@findex bj0

@code{bj0(@var{x})}

Returns the value of the zero-order Bessel function of the first kind,
at ordinate @code{@var{x}}. 

Alias: @ref{bessel_j0}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bj1, bjn, bj0, Internal Routines
@subsection bj1
@findex bj1

@code{bj1(@var{x})}

Returns the value of the first-order Bessel function of the first kind,
at ordinate @code{@var{x}}. 

Alias: @ref{bessel_j1}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bjn, bk0, bj1, Internal Routines
@subsection bjn
@findex bjn

@code{bjn(@var{x}, @var{order})}

Returns the value of the Bessel function of the first kind, and of the
given @code{@var{order}}, at ordinate @code{@var{x}}. 

Alias: @ref{bessel_jn}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bk0, bk1, bjn, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bk0
@findex bk0

@code{bk0(@var{x})}

@code{[@ref{develop} package]} Returns the zeroth-order modified Bessel
function of the second kind at ordinate @code{@var{x}}.

Alias: @ref{bessel_k0}

See also: @ref{Bessel Functions} 

@c -------------------------------------
@node bk1, bkn, bk0, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bk1
@findex bk1

@code{bk1(@var{x})}

@code{[@ref{develop} package]} Returns the first-order modified Bessel
function of the second kind at ordinate @code{@var{x}}.

Alias: @ref{bessel_k1}

See also: @ref{Bessel Functions} 

@c -------------------------------------
@node bkn, bmap, bk1, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bkn
@findex bkn

@code{bkn(@var{x}, @var{n})}

@code{[@ref{develop} package]} Returns the @code{@var{n}}th-order
modified Bessel function of the second kind at ordinate @code{@var{x}}.

Alias: @ref{bessel_kn}

See also: @ref{Bessel Functions}

@c -------------------------------------
@node bmap, bp00, bkn, Internal Routines
@subsection bmap
@findex bmap

@code{bmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{byte} array.

See also: @ref{Data Mapping}

@c -------------------------------------
@node bp00, bp06, bmap, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bp00
@findex bp00

@code{bp00, @var{jdtt}, @var{rb}, @var{rp}, @var{rbp}}

[SOFA] Returns the frame bias and precession for TT Julian Dates
@code{@var{jdtt}} according to the IAU 2000 precession-nutation model.
@code{@var{rb}} receives the frame bias matrix, @code{@var{rp}} the
precession matrix, and @code{@var{rbp}} the bias-precession matrix.
@code{@var{rp}} and @code{@var{rbp}} have the same dimensions as
@code{@var{jdtt}} but with two dimensions equal to 3 prefixed.

@code{@var{jdtt}} may be a numerical scalar or array.

@code{@var{rb}} has dimensions 3, 3.  @code{@var{rp}} and
@code{@var{rbp}} have dimensions 3, 3, prefixed to those from
@code{@var{jdtt}}.

See also: @ref{bi00}, @ref{bp06}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node bp06, bpn2xy, bp00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bp06
@findex bp06

@code{bp06, @var{jdtt}, @var{rb}, @var{rp}, @var{rbp}}

[SOFA] Returns the frame bias and precession for TT Julian Dates
@code{@var{jd}} according to the IAU 2006 precession-nutation model.
@code{@var{rb}} receives the frame bias matrix, @code{@var{rp}} the
precession matrix, and @code{@var{rbp}} the bias-precession matrix.

@code{@var{jdtt}} may be a numerical scalar or array.

@code{@var{rb}} has dimensions 3, 3.  @code{@var{rp}} and
@code{@var{rbp}} have dimensions 3, 3, prefixed to those from
@code{@var{jdtt}}.

See also: @ref{bi00}, @ref{bp00}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node bpn2xy, breakpoint, bp06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection bpn2xy
@findex bpn2xy

@code{bpn2xy, @var{rbpn}, @var{x}, @var{y}}

[SOFA] Extracts the dimensionless @code{@var{x}} and @code{@var{y}}
coordinates of the Celestial Intermediate Pole unit vector from the
bias-precession-nutation matrix @code{@var{rbpn}}.

@c -------------------------------------
@node breakpoint, bsmooth, bpn2xy, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection breakpoint
@findex breakpoint

@code{breakpoint, @var{string} [, /set, /list]}

@code{breakpoint, @var{n} [, /disable, /enable, /delete, /list]}

Unfinished routine for debugging.  The first form sets and enables a
breakpoint in routine @code{@var{string}}.  A particular line number can
be appended to @code{@var{string}} after a colon (:).  If no line number
is appended, then the breakpoint is set for entry of the routine,
function, or file.  The second form modifies existing breakpoint number
@code{@var{n}}.  The @code{/enable} switch enables the breakpoint (i.e.,
execution is stopped at the breakpoint).  The @code{/disable} switch
disables the breakpoint (i.e., the breakpoint is retained but is ignored
during execution and can be enabled again later).  The @code{/delete}
breakpoint deletes the breakpoint.  The @code{/list} switch lists all
currently defined breakpoints and their status (enabled/disabled) after
all indicated changes have been made to the breakpoint list.

See also: @ref{Debug Routines}
@c -------------------------------------
@node bsmooth, by0, breakpoint, Internal Routines
@subsection bsmooth
@findex bsmooth

@code{bsmooth(@var{x} [[, @var{axis}], @var{width}])}

@code{[@ref{develop} package]} Applies repeated binary smoothing to
dimension @code{@var{axis}} of array @code{@var{x}}.  The combined
smoothing filter is approximately Gaussian with a FWHM of
@code{@var{width}}.  The number of binary repeats is
@code{@var{width}*@var{width}/2}.

See also: @ref{Smoothing}
@c -------------------------------------
@node by0, by1, bsmooth, Internal Routines
@subsection by0
@findex by0

@code{by0(@var{x})}

Returns the value of the zeroth-order Bessel function of the second
kind, at ordinate @code{@var{x}}. 

See also: @ref{bjn}, @ref{byn}

Alias: @ref{bessel_y0}

See also: @ref{Bessel Functions}
@c -------------------------------------
@node by1, byn, by0, Internal Routines
@subsection by1
@findex by1

@code{by1(@var{x})}

Returns the value of the first-order Bessel function of the second kind,
at ordinate @code{@var{x}}. 

See also: @ref{bjn}, @ref{byn}

Alias: @ref{bessel_y1}

See also: @ref{Bessel Functions}
@c -------------------------------------
@node byn, bytarr, by1, Internal Routines
@subsection byn
@findex byn

@code{byn(@var{x}, @var{order})}

Returns the value of the Bessel function of the second kind, and of the
given @code{@var{order}}, at ordinate @code{@var{x}}. 

See also: @ref{bjn}, @ref{by0}, @ref{by1}

Alias: @ref{bessel_yn}

See also: @ref{Bessel Functions}
@c -------------------------------------
@node bytarr, byte, byn, Internal Routines
@subsection bytarr
@findex bytarr

@code{bytarr(@var{dimensions})}

Return a @code{byte} array of the specified @code{@var{dimensions}}.
The latter may be an array containing the dimensions, or a number of
scalar arguments.

See also: @ref{array}, @ref{Default Arrays}
@c -------------------------------------
@node byte, bytfarr, bytarr, Internal Routines
@subsection byte
@findex byte

@code{byte(@var{x})}

@code{byte, @var{x} [, @dots{}]}

Converts the arguments to data type @code{byte} by truncating at the
decimal point (if any) and then discarding all but the least significant
byte.  The function returns a converted copy and leaves @code{@var{x}}
itself alone.  The subroutine modifies @code{@var{x}} itself.

See also: @ref{Number Conversion}

@c -------------------------------------
@node bytfarr, c, byte, Internal Routines
@subsection bytfarr
@findex bytfarr

@code{bytfarr(@var{file}, @var{dimensions} [, offset=@var{offset},
/readonly, /swap])}

Returns a @code{file array} that links a @code{byte} array dimensional
structure with the specified @code{@var{dimensions}} to the specified
@code{@var{file}}.  @code{@var{dimensions}} may be an array, or up to
@code{#max_dims} arguments each of which contains one dimension.  The
file need not exist.  @code{@var{offset}} indicates the length in bytes
of a file header after which the array data is to be found.  It defaults
to zero.  Keyword @code{/readonly} disallows writing into the file
through the file array.  Keyword @code{/swap} indicates that the data
should be byte-swapped after reading (for input only).

See also: @ref{File Arrays}, @ref{#max_dims}, @ref{File Array Creation}

@c -------------------------------------
@node c, c2i00a, bytfarr, Internal Routines
@subsection c
@findex c

@code{c, @var{string} [, @var{x}, @var{y}, @var{size}, @var{theta},
@var{font}, @var{flag}] [, /dev, /dvi, /img, /plt, /rim, /rpl]}

Calligraphy routine.

Alias: @ref{callig}

See also: @ref{Screen Coordinates}, @ref{Plots}

@c -------------------------------------
@node c2i00a, c2i00b, c, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2i00a
@findex c2i00a

@code{c2i00a(@var{jdtt})}

[SOFA] Returns the celestial-to-intermediate matrix for TT Julian
Dates @code{@var{jdtt}} according to the IAU 2000A precession-nutation
model.  @code{@var{jdtt}} may be a numerical scalar or array.  The
return value has dimensions 3, 3 prefixed to the dimensions from
@code{@var{jdtt}}.

@code{c2i00b} returns slightly less accurate results (about 1 mas)
but faster.

See also: @ref{c2i00b}, @ref{c2i06a}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2i00b, c2i06a, c2i00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2i00b
@findex c2i00b

@code{c2i00b(@var{jdtt})}

[SOFA] Returns the celestial-to-intermediate matrix for TT Julian
Dates @code{@var{jdtt}} according to the IAU 2000B precession-nutation
model.  @code{@var{jdtt}} may be a numerical scalar or array.

The return value has dimensions 3, 3 prefixed to the dimensions from
@code{@var{jdtt}}.

@code{c2i00a} returns slightly more accurate results but takes more
time to calculate them.

See also: @ref{c2i00a}, @ref{c2i06a}, @ref{c2ibpn}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2i06a, c2ibpn, c2i00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2i06a
@findex c2i06a

@code{c2i06a(@var{jdtt})}

[SOFA] Returns the celestial-to-intermediate matrix for TT Julian
Dates @code{@var{jdtt}} according to the IAU 2006 precession model and
the IAU 2000A nutation model.  @code{@var{jdtt}} may be a numerical
scalar or array.

The return value has dimensions 3, 3 prefixed to the dimensions from
@code{@var{jdtt}}.

See also: @ref{c2i00a}, @ref{c2i00b}, @ref{c2ibpn}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2ibpn, c2ixy, c2i06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2ibpn
@findex c2ibpn

@code{c2ibpn(@var{jdtt}, @var{rbpn})}

[SOFA] Forms the celestial-to-intermediate matrix for TT Julian Dates
@code{@var{jd}}, given the bias-precession-nutation matrix
@code{@var{rbpn}} for those same dates.  @code{@var{jdtt}} may be a
numerical scalar or array.  The dimensions of @code{@var{rbpn}} must
be equal to those of @code{@var{jdtt}} but with two dimensions equal
to 3 prefixed.  The returned array has the same dimensions as
@code{@var{rbpn}}.

See also @ref{c2i00a}, @ref{c2i00b}, @ref{c2i06a}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2ixy, c2ixys, c2ibpn, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2ixy
@findex c2ixy

@code{c2ixy(@var{jdtt}, @var{x}, @var{y})}

[SOFA] Returns the celestial-to-intermediate-frame-of-date matrix for
TT Julian Dates @code{@var{jdtt}} and Celestial Intermediate Pole
coordinates @code{@var{x}} and @code{@var{y}} (components of the unit
vector in the Geocentric Celestial Reference System), for IAU 2000
models.  @code{@var{jdtt}} may be a numerical scalar or array.  The
dimensions of @code{@var{rbpn}} must be equal to those of
@code{@var{jdtt}} but with two dimensions equal to 3 prefixed.  The
returned array has the same dimensions as @code{@var{rbpn}}.

See also: @ref{c2ixys}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2ixys, c2s, c2ixy, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2ixys
@findex c2ixys

@code{c2ixys(@var{x}, @var{y}, @var{s})}

[SOFA] Returns the celestial-to-intermediate-frame-of-date matrix for
Celestial Intermediate Pole coordinates @code{@var{x}} and
@code{@var{y}} (components of the unit vector in the Geocentric
Celestial Reference System) and Celestial Intermediate Origin locator
@code{@var{s}} (in radians), which positions the Celestial
Intermediate Origin on the equator of the Celestial Intermediate
Pole.  The three arguments must all have the same dimensions.  The
returned array has those same dimensions, too, but with two dimensions
equal to 3 prefixed.

See also: @ref{c2ixy}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2s, c2t00a, c2ixys, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2s
@findex c2s

@code{c2s(@var{coords})}

[SOFA] Returns spherical angular coordinates (longitude and latitude,
in radians) corresponding to the given cartesian coordinates
@code{@var{coords}} (x, y, z).  The first dimension of
@code{@var{coords}} must be equal to 3.  The returned array has the
same dimensions as @code{@var{coords}}, except that the first
dimension is 2 instead of 3.

@c -------------------------------------
@node c2t00a, c2t00b, c2s, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2t00a
@findex c2t00a

@code{c2t00a(@var{jdtt}, @var{jdut}, @var{xp}, @var{yp})}

[SOFA] Returns the celestial-to-terrestrial matrix, given TT Julian
Date @code{@var{jdtt}}, UT1 Julian Date @code{@var{jdut}}, and polar
coordinates @code{@var{xp}}, @code{@var{yp}}, using the IAU 2000A
nutation model.

@code{@var{jdtt}} and @code{@var{jdut}} should express the same
instants of time: the first one in the TT timescale, and the second
one in the UT1 timescale.  @code{@var{xp}, @var{yp}} are the
coordinates (in radians) of the Celestial Intermediate Pole with
respect to the International Terrestrial Reference System measured
along the meridians to 0 and 90 degrees west, respectively, for those
same instants.  All four arguments must have the same dimensions.

The result gets the same dimensions as all of the parameters, with two
dimensions equal to 3 prefixed.

@code{c2t00b} yields slightly less accurate results, but faster.

See also: @ref{c2t00b}, @ref{c2t06a}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2t00b, c2t06a, c2t00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2t00b
@findex c2t00b

@code{c2t00b(@var{jdtt}, @var{jdut}, @var{xp}, @var{yp})}

[SOFA] Returns the celestial-to-terrestrial matrix, given TT Julian
Date @code{@var{jdtt}}, UT1 Julian Date @code{@var{jdut}}, and polar
coordinates @code{@var{xp}}, @code{@var{yp}}, using the IAU 2000B
nutation model.

@code{@var{jdtt}} and @code{@var{jdut}} should express the same
instants of time: the first one in the TT timescale, and the second
one in the UT1 timescale.  @code{@var{xp}, @var{yp}} are the
coordinates (in radians) of the Celestial Intermediate Pole with
respect to the International Terrestrial Reference System measured
along the meridians to 0 and 90 degrees west, respectively, for those
same instants.  All four arguments must have the same dimensions.

The result gets the same dimensions as all of the parameters, with two
dimensions equal to 3 prefixed.

@code{c2t00a} yields slightly more accurate results, but slower.

See also: @ref{c2t00a}, @ref{c2t06a}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2t06a, c2tcio, c2t00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2t06a
@findex c2t06a

@code{c2t06a(@var{jdtt}, @var{jdut}, @var{xp}, @var{yp})}

[SOFA] Returns the celestial-to-terrestrial matrix, given TT Julian
Date @code{@var{jdtt}}, UT1 Julian Date @code{@var{jdut}}, and polar
coordinates @code{@var{xp}}, @code{@var{yp}}, using the IAU 2006
precession model and IAU 2000A nutation model.

@code{@var{jdtt}} and @code{@var{jdut}} should express the same
instants of time: the first one in the TT timescale, and the second
one in the UT1 timescale.  @code{@var{x}, @var{y}} are the coordinates
(in radians) of the Celestial Intermediate Pole with respect to the
International Terrestrial Reference System measured along the
meridians to 0 and 90 degrees west, respectively, for those same
instants.  All four arguments must have the same dimensions.

The result gets the same dimensions as all of the parameters, with two
dimensions equal to 3 prefixed.

See also: @ref{c2t00a}, @ref{c2t00b}, @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2tcio, c2teqx, c2t06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2tcio
@findex c2tcio

@code{c2tcio(@var{rc2i}, @var{era}, @var{rpom})}

[SOFA] Returns the celestial-to-terrestrial matrix based on the
celestial-to-intermediate matrix @code{@var{rc2i}}, the Earth rotation
angle @code{@var{era}} (in radians) and the polar motion matrix
@code{@var{rpom}}.  The first two dimensions of @code{@var{rc2i}} and
@code{@var{rpom}} must be equal to 3.  The remaining dimensions of
@code{@var{rc2i}} and @code{@var{rpom}} must be equal to the
dimensions of @code{@var{era}}.  The result has the same dimensions as
@code{@var{rc2i}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2teqx, c2tpe, c2tcio, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2teqx
@findex c2teqx

@code{c2teqx(@var{rbpn}, @var{gst}, @var{rpom})}

[SOFA] Returns the celestial-to-terrestrial matrix based on the
celestial-to-true matrix @code{@var{rbpn}}, the Greenwich Apparent
Sidereal Time angle @code{@var{gst}} (in radians) and the polar motion
matrix @code{@var{rpom}}.  The first two dimensions of
@code{@var{rbpn}} and @code{@var{rpom}} must be equal to 3.  The
remaining dimensions of @code{@var{rbpn}} and @code{@var{rpom}} must
be equal to the dimensions of @code{@var{gst}}.  The result has the
same dimensions as @code{@var{rbpn}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2tpe, c2txy, c2teqx, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2tpe
@findex c2tpe

@code{c2tpe(@var{jdtt}, @var{dpsi}, @var{deps}, @var{xp}, @var{yp})}

[SOFA] Returns the celestial-to-terrestrial matrix given the TT Julian
Date @code{@var{jd}}, the nutation @code{@var{dpsi}, @var{deps}}, and
the polar coordinates @code{@var{xp}, @var{yp}}.  All of the arguments
must have the same dimensions.  The result has those same dimensions,
but with two dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node c2txy, cal2jd, c2tpe, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection c2txy
@findex c2txy

@code{c2txy(@var{jdtt}, @var{x}, @var{y}, @var{xp}, @var{yp})}

[SOFA] Returns the celestial-to-terrestrial matrix given the TT Julian
Date @code{@var{jd}}, the CIP coordinates @code{@var{x}, @var{y}} (the
x,y components of the unit vector in the Geocentric Celestial
Reference System), and the polar coordinates @code{@var{xp}, @var{yp}}
(the coordinates in radians of the Celestial Intermediate Pole with
respect to the International Terestrial Reference System, measured
along the meridians to 0 and 90 degrees west, respectively).  All of
the arguments must have the same dimensions.  The result has those
same dimensions, but with two dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node cal2jd, calculator, c2txy, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cal2jd
@findex cal2jd

@code{cal2jd(@var{date})}

[SOFA] Returns the Chronological Julian Day Numbers (if
@code{@var{date}} is @code{long}) or Julian Day Numbers corresponding
to the specified Gregorian calendar dates @code{@var{date}}.
@code{@var{date}} must have 3 elements in its first dimension (for
year, month, day).  The result has the same type as @code{@var{date}}
but is not less than @code{long}, and has the same dimensions as
@code{@var{date}} except that the first dimension is missing.
Unexpected results may be given if illegal year, month, or day numbers
are specified.  Dates before -4799-01-01 yield zero.  Dates after
1465073-02-28 yield nonzero but erroneous results (at least on systems
with 32-bit ints).

See also: @ref{calendar}

@c -------------------------------------
@node calculator, calendar, cal2jd, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection calculator
@findex calculator

@code{calculator}

Enters calculator mode.  In calculator mode, LUX acts like a regular
calculator: it has a current numerical scalar or array, or string value,
(stored in variable @code{$}) which is modified by calculator
commands, and which value is displayed after each command has been
completed.  Calculator mode can only be entered from the main execution
level (i.e., not from within a function or subroutine), and no
statements other than assignments and @code{return} can be executed.

Each newline ends a command.  The result of each command replaces the
current value.  The following commands are supported: a numerical value;
a LUX expression; a binary operator followed by an expression (the
current value is taken for the first operand); the name of a
single-argument function (the current value is taken for the operand);
an equal sign followed by an expression; or the @code{return} command,
which exits calculator mode.

Not all LUX expressions are supported.  If the command is a single name,
then it is taken to be the name of a single-argument function rather
than the name of a variable (forming an expression).  If you wish to
assign the value of a variable to the current value, then prepend an
equal sign.  If you wish to evaluate a multi-argument function, then use
@code{$} if you want the current value for one or more of its arguments.

See also: @ref{Running}

@c -------------------------------------
@node calendar, callig, calculator, Internal Routines
@subsection calendar
@findex calendar

@code{calendar(@var{date} [, /fromcommon, /fromgregorian,
/fromislamic, /fromjulian, /fromjd, /fromhebrew, /fromlongcount,
/fromegyptian, /fromlunar] [, /tocommon, /togregorian, /toislamic,
/tojulian, /tojd, /tohebrew, /tomayan, /tolongcount, /toegyptian,
/tolunar, /tolatin] [, /totext, /toisotext] [, /fromutc, /fromtai,
/fromtt] [, /toutc, /totai, /tott] [, /fromymd, /fromdmy] [, /toymd,
/todmy])}

Transforms date @code{@var{date}} from one calendar system into another.
The @code{/from@dots{}} keywords specify the source calendar system, and
the @code{/to@dots{}} keywords the target calendar system.  The input
data may be numerical or in the form of text, and likewise for the
output.

Through keywords, one can specify calendars, time systems, date
component orders, and the data output type.

@table @code
@item /...gregorian
indicates the Gregorian (modern Western) calendar.  The first day of
this calendar is 15 October 1582 (Gregorian), which followed directly
after 4 October 1582 (Julian).
@item /...islamic
indicates the most widespread tabulated Islamic calendar.  The first day
of this calendar corresponds to 16 July 622 in the Julian calendar.
@item /...julian
indicates the Julian (proleptic) calendar.
@item /...jd
indicates the Julian day number system.  Julian day number 0 corresponds
to 1 January -4712 in the Julian calendar.
@item /...hebrew
indicates the Hebrew calendar.  The first day of this calendar
corresponds to 6 October @minus{}3760 in the Julian calendar.
@item /...common
equals @code{/...gregorian} from 15 October 1582 (Gregorian) on and
@code{/...julian} before then.
@item /tomayan
indicates the Mayan Tikal calendar round (according to "The Book of the
Year" by Munro Edmonson).  @code{/frommayan} is not available.
@code{/tomayan} implies @code{/totext}.
@item /...longcount
indicates the Olmec Long Count (according to Edmonson).  Long Count
0.0.0.0.0 corresponds to 6 September -3113 in the Julian calendar.
@code{/tolongcount} implies @code{/totext}.  @code{/fromlongcount}
only works if the input is text.
@item /...egyptian
indicates the Egyptian calendar used in ancient astronomy (e.g., by
Ptolemy in the Almagest), with strictly 365 days per year.  The year
count is based on the era of Nabonassar (1 Thoth, year 1 = 26 February
@minus{}746 in the Julian calendar).
@item /...lunar
indicates a (fractional) count of New Moons since the first New Moon
after Julian Day number 0.  The count is based on the mean motion of the
Moon, disregarding short-term perturbations.
@item /tolatin
indicates the Common calendar counted the Latin way.
@item /totext
indicates that the dates are returned in text form, as strings, with the
(integer) day, month, and year separated by whitespace.  This keyword
does not work with @code{/tojd}.
@item /toisotext
indicates that the dates are returned in text form, as strings, in
standard iso format: yyyy-mm-ddThh:mm:ss.
@item /...ymd
indicates that the components of each date are in the order year, month,
day.  This keyword does not work with @code{/...jd}. 
@item /...dmy
indicates that the components of each date are in the order day, month,
year.  This keyword does not work with @code{/...jd}.
@item /...utc
indicates dates/times in Coordinated Universal Time (UTC).
@item /...tai
indicates dates/times in International Atomic Time (TAI).
@item /...tt
indicates dates/times in Terrestrial Time (TT).
@end table

The default source calendar is @code{/fromcommon} if @code{@var{date}}
is numerical and has 3 elements in its first dimension, or if
@code{@var{date}} contains text data.  Otherwise, the default source
calendar is @code{/fromjd}.  The default target calendar is @code{/tojd}
unless the source calendar was @code{/fromjd}, in which case the default
target calendar is @code{/tocommon}.

With numerical input, one number is expected per date for @code{/fromjd}
and @code{/fromlunar}, and three numbers for all other calendars.
Three-number input is interpreted by default in the order year, month,
day.  For the Gregorian, Julian, Islamic, and Egyptian calendars (all of
which always have 12 months per calendar year), month and day numbers
outside of the usual ranges may be specified; month numbers are reduced
to the range of 1 - 12, adjusting the year count accordingly, and day
numbers are interpreted relative to the start of the indicated month
just like day numbers within the expected ranges.  For example, the
input [232,17,43] is adjusted internally to [233,5,43], which indicates
a date 42 days after the one indicated by [233,5,1], and [232,-5,-3]
indicates a date 4 days before [231,7,1].  For most calendars, negative
and zero years may be specified.

If the input is in the form of text and @code{/fromlongcount} is not
specified, then each string must contain a date with the day and year
written as optionally signed numbers, and the month name in characters
(not starting with a digit or a + or -).  By default, the first
encountered number is taken to be the day, and the second number the
year.  If the date string is incomplete, then a year, month, or day
number of 1 is assumed for the missing parts.  If a single number is
specified in the text string, then it is taken to be the year number.
If an input calendar is specified, then the specified month name is
compared only to the month names associated with that calendar;
otherwise, it is compared to the month names of all calendars and the
first match is accepted.  The number of month name characters that is
compared is the minimum number that is required to distinguish between
the months in the calendar: 3 for the Gregorian and Julian calendars,
4 for the Egyptian calendar, 9 for the Islamic calendar.  Case is
unimportant.

For @code{/fromlongcount}, the text input is searched for sequences of
digits separated by one or more non-digit characters.  Each sequence
of digits is interpreted as a decimal number that indicates the number
of units of time at each level of the Long Count, from large to small.
There may be any (non-zero) number of levels.  Each next higher level
is assumed to represent a unit of time 20 times greater than the next
lower level, except that the 3rd level is only 18 times greater than
the 2nd one.  The lowest level represents days. 

The default time system is @code{/...utc}.  Transformation from UTC to
TAI or TT is based on tables of leap seconds for dates between
1961-01-01 and (predicted) 1999-07-01, and on estimates for UT since
-390 for dates before 1961-01-01.  (See "Explanatory Supplement to the
Astronomical Almanac", P. K. Seidelmann (editor), University Science
Books (1992), section 2.553).

Not all calendars have a new day start at the same time.  For example,
in the Common calendar a new day starts at midnight, but in the Islamic
and Hebrew calendars a new day starts at sunset.  Our calendar
conversion algorithms must deal with this somehow.  For the traditional
calendars (all except @code{/...jd} and @code{/...lunar}), the
conversions are based on the integer parts of the dates only, and are
referred to noontime.  The fractional part of the day is not modified.
For example, day 1 Muharram 1 A.H. (@ref{Islamic Calendar}) ran from
sunset on 15 July 622 C.E. (@ref{Common Calendar}) to sunset on 16 July,
so 1 Muharram 1 A.H. coincided with parts of 15 and 16 July 622 C.E.,
and 16 July 622 C.E. coincided with parts of 1 and 2 Muharram 1 A.H.
The @code{calendar} function gives you the correspondence between these
calendars at noon.  It shows that noon of 1 Muharram 1 A.H. coincided
with noon of 16 July 622 C.E.

See also: @ref{!jd}, @ref{Astronomy and Calendars}

@c -------------------------------------
@menu
* General Calendar Details::
* Common Calendar::
* Julian Calendar::
* Gregorian Calendar::
* Islamic Calendar::
* Hebrew Calendar::
* Julian Day Numbers::
* Egyptian Calendar::
* Mayan Tikal Calendar::
* Mayan Long Count::
* Lunar Calendar::
* Latin Calendar::
* Time Scales::
@end menu

@node General Calendar Details, Common Calendar, calendar, calendar
@subsubsection General Calendar Details

Most calendars are intended to follow some celestial cycle, such as the
phases of the moon or the seasons.  These cycles usually don't consist
of a nice, integral number of days or months, so sometimes complicated
rules for varying the length of years and months must be used to keep
them in alignment with the target cycle.

The @emph{epoch} of a calendar is its adopted starting point: the start
of year 1 (or day 1) of the calendar.  This is not necessarily the same
as the day when the calendar was first used.  For example, the currently
used epoch for the Julian and Common calendars was invented about 500
years after the time indicated by that epoch.

An @emph{era} is the period of time after an @emph{epoch}, and so is
connected to a particular calendar.  To fully specify a particular day,
one must specify not just the date corresponding to that day in the
chosen calendar, but also which calendar one uses, for readers who might
not use the same calendar system.  This is done by specifying the era.
For example, the period starting with year 1 of the Common calendar is
the Common Era.  Year 1432 of the Common calendar is referred to as year
1432 of the Common Era, or 1432 C.E.

One needs to be able to refer to years before the epoch of the calendar.
Many calendars were invented in regions and times where the number zero
was not known.  In those regions and times, the year directly preceding
year 1 was referred to as "year 1 before the epoch (or era)", and the
preceding year was "year 2 before the epoch".  We'll refer to this
method of counting years as the "historical method".  However, it is
mathematically more convenient to keep counting down by ones when one
goes to preceding years, so then the years immediately preceding year 1
are years 0 and @minus{}1.  This method is preferred by astronomers, and
we'll refer to it as the "astronomical method".  The @code{calendar}
function uses the astronomical method.

Further reading:

@itemize @bullet
@item @emph{Calendric Calculations}, by Nachum Dershowitz and Edward
M. Reingold; Cambridge University Press, ISBN 0-521-56474-3 (1997)
@item A description of calendars, reprinted from the @emph{Explanatory
Supplement to the Astronomical Almanac} (P. Kenneth Seidelmann, editor;
University Science Books, 1992):
@code{http://astro.nmsu.edu/~lhuber/leaphist.html} 
@item Chapter 4 of @emph{The History and Practice of Ancient Astronomy},
by James Evans; Oxford University Press, 1998, ISBN 0-19-509539-1
@end itemize

@c -------------------------------------
@node Common Calendar, Julian Calendar, General Calendar Details, calendar
@subsubsection Common Calendar

We refer to the calendar system that is in most widespread international
use around the world today as the Common Calendar.  The Common Calendar
consists of two parts: it uses the rules of the @ref{Julian Calendar}
for dates up to 4 October 1582, and the rules of the @ref{Gregorian
Calendar} for dates starting with 15 October 1582.  In the Common
Calendar, 15 October 1582 was the day immediately following 4 October
1582.  The era of this calendar is referred to as the Common Era (C.E.).

@c -------------------------------------
@node Julian Calendar, Gregorian Calendar, Common Calendar, calendar
@subsubsection Julian Calendar

The Julian Calendar is a solar calendar that was introduced in the Roman
Empire, in the year now referred to (in the @ref{Common Calendar}) as
@minus{}44, during the reign of Julius Caesar, for whom it and its fifth
month are named.  The calendar was slightly reformed by emperor August,
for whom the sixth month is named.  After this reform, which was
complete by the year now referred to as year 8 C.E., this calendar was
used continuously in many regions of Europe until 1582 C.E., though
there was variation (over both time and region) in such things as the
used epoch, the used day count within each month, and which day was the
first day of the year.  The following description reflects the modern
choices for these things.

In this calendar, each year consists of 12 months with between 28 and 31
days per month, with new days starting at midnight.  Each new day starts
at midnight.  The English names of these months and their lengths are
listed in the following table.

@example
Number  Month Name  Length
  1        January    31
  2       February    28 (29 in a leap year)
  3          March    31
  4          April    30
  5            May    31
  6           June    30
  7           July    31
  8         August    31
  9      September    30
 10        October    31
 11       November    30
 12       December    31
@end example

In this calendar, years have either 365 or 366 days.  The longer years,
called @emph{leap years}, occur every fourth year, whenever the year
count is evenly divisible by 4.  For example, the years 1000 and 1004
were leap years.  The extra day is inserted at the end of the month of
February, as the 29th day of February.  January 1 is now the beginning
of the new year, though this was not always the case.

Many different epochs have been used in conjunction with this calendar,
for example, the assumed year of the foundation of the city of Rome
(@minus{}753 C.E., referred to as year 1 A.U.C. -- ab urbe condita), or
the beginning of the reign of emperor Diocletian (284 C.E.), or the
approximate birth year of the Messiah of the Christian faith (1 C.E. = 1
A.D. -- anno Domini)

For dating historical events, use of the final rules of the Julian
calendar (with the Common Era) is extended into the past.  This
anachronistic calendar is referred to as the Julian Proleptic Calendar,
or, if confusion is unlikely, as the Julian Calendar.

@c -------------------------------------
@node Gregorian Calendar, Islamic Calendar, Julian Calendar, calendar
@subsubsection Gregorian Calendar

The Gregorian Calendar was introduced in the Catholic parts of Europe in
1582 C.E. by Pope Gregory XIII (then the religious leader of the Roman
Catholic faith) as an improvement upon the @ref{Julian Calendar} to keep
the average length of the calendar year better in line with the seasons.

The rules, months, and days of the Gregorian calendar are the same as
those of the Julian Calendar, except for the leap year rules.  In the
Gregorian calendar, a year is a leap year if the year number is evenly
divisible by 4, but not if the year number is evenly divisible by 100,
and this last exception must not be applied if the year number is evenly
divisible by 400.  For example, 1600 and 2000 are leap years, but 1700,
1800, and 1900 are not.

For the other details, see @ref{Julian Calendar}.

@c -------------------------------------
@node Islamic Calendar, Hebrew Calendar, Gregorian Calendar, calendar
@subsubsection Islamic Calendar

The Islamic calendar is a strict lunar calendar.  The beginning of a new
month is tied to the first sighting of the lunar crescent in the evening
after a New Moon.  Because the beginning of the month is determined by
observation, it cannot be accurately predicted.  However, for secular
use a tabular calendar is available that is determined by fixed rules.
This tabular calendar is described below.

The Islamic tabular calendar has 12 months per year, that each have 29
or 30 days, starting at sunset.  The month names and lengths in days are
listed in the following table.

@example
Number  Month Name   Length
  1       Muharram     30
  2          Safar     29
  3       Rabi`a I     30
  4      Rabi`a II     29
  5       Jumada I     30
  6      Jumada II     29
  7          Rajab     30
  8        Sha`ban     29
  9        Ramadan     30
 10        Shawwal     29
 11  Dhu al-q`adah     30
 12  Dhu al-Hijjah     29 (30 in a leap year)
@end example

There are 11 leap years in a fixed cycle of 30 years.  In a leap year,
the extra day is added at the end of the month of Dhu al-Hijjah.  The
epoch of the calendar is sunset of 15 July 622 C.E. and "year of the Era
of the Hegira" may be abbreviated to A.H. (= Anno Hegirae).  The epoch
coincides with the migration of the Prophet Mohammed from Mecca to
Medina.  The @code{calendar} function takes an A.H. date to refer to the
date that is current at noontime.  The first noon after the epoch was
the noon of 16 July 622 C.E., so the @code{calendar} function equates 1
Muharram 1 A.H. with 16 July 622 C.E.

@c -------------------------------------
@node Hebrew Calendar, Julian Day Numbers, Islamic Calendar, calendar
@subsubsection Hebrew Calendar

The Hebrew calendar is a lunisolar calendar.  Its current rules were
pronounced in the 4th century C.E. by Patriarch Hillel II.  New days
start at sunset, new months start at a New Moon, and new years start in
the northern hemisphere spring.

a Hebrew calendar year has 12 or 13 months, that each have 29 or 30
days.  The month names and lengths in days are listed in the following
table.  Biblical tradition lists Nisan as the first month but has the
new year start on the first day of Tishri.  The @code{calendar} function
counts months from the start of the year in Tishri.  The month numbers,
names, and lengths (in days) are listed in the following table

@example
Number  Month Name    Length
  1          Nisan      30
  2          Iyyar      29
  3          Sivan      30
  4         Tammuz      29
  5             Av      30
  6           Elul      29
  7         Tishri      30
  8        Heshvan   29 or 30
  9         Kislev   29 or 30
 10          Tevet      29
 11         Shevat      30
 12         Adar Ⅰ      30 (only present in leap years)
12/13     Adar (Ⅱ)      29
@end example

Leap days may be inserted at the ends of the months of Heshvan and
Kislev, and a leap month Adar Ⅰ may be inserted just before month
Adar, which in that case is renamed to Adar Ⅱ.  This means that any
given year may contain six different numbers of days, as listed in the
following table

@example
  Days     Designation
   353     deficient ordinary year
   354     regular ordinary year
   355     complete ordinary year
   383     deficient leap year
   384     regular leap year
   385     complete leap year
@end example

There are 7 leap years in a fixed cycle of 19 years.

The epoch of the Hebrew calendar is sunset of 6 October @minus{}3760
C.E., which was taken to be the date of the creation of the world.  The
Era of the Hebrew calendar is referred to as A.M. (= Anno Mundi).  The
first noon after the epoch was the noon of 7 October @minus{}3760 C.E.,
so the @code{calendar} function equates 1 Tishri 1 A.M. with 7 October
@minus{}3760 C.E.

For transforming from Hebrew calendar dates, years from -5879540
through 5878588 provide accurate results.

@c -------------------------------------
@node Julian Day Numbers, Egyptian Calendar, Hebrew Calendar, calendar
@subsubsection Julian Day Number

Julian Day Numbers were introduced by astronomers in the 19th century
C.E. as a continuous day numbering scheme without years or leap days.
The epoch (the start of day 0) is 1 January @minus{}4712 C.E. at
12:00:00 TT (by recommendation of the International Astronomical Union).
For precise astronomical calculation, fractional Julian day numbers are
used.  The @code{calendar} function returns fractional Julian day
numbers, assuming that the fractional part of the day specification in
the source calendar is measured since the midnight before the noon
corresponding to that date.  This means that an integer date in the
source calendar corresponds to a JD (= Julian Date) ending in ".5".  To
get the integer count, round to the nearest integer; round JDs ending in
".5" up to the next greater integer.

For the official definition of the Julian Date by the International
Astronomical Union, see at
@code{http://maia.usno.navy.mil/iauc19/iaures.html#b1}

@c -------------------------------------
@node Egyptian Calendar, Mayan Tikal Calendar, Julian Day Numbers, calendar
@subsubsection Egyptian Calendar

Ancient Egyptians used a calendar that had 365 days in a year, without
exceptions.  The year was divided into 12 months of 30 days each, plus 5
extra days (referred to by the ancient Greeks as the epagomenai) after
the last month.  Because of its great regularity, this calendar was used
by ancient Greek and European astronomers until only a few centuries
ago.

The names and lengths of the months of the Egyptian calendar are listed
in the following table.

@example
 Number      Name  Length
   1        Thoth    30
   2      Phaophi    30
   3        Athyr    30
   4       Choiak    30
   5         Tybi    30
   6      Mecheir    30
   7    Phamenoth    30
   8    Pharmuthi    30
   9       Pachon    30
  10        Payni    30
  11       Epiphi    30
  12       Mesore    30
       epagomenai     5
@end example

The @code{calendar} function regards the epagomenai as a 13th month.
The era used for this calendar by the @code{calendar} function is the
Era of Nabonassar, used by Ptolemy, with epoch 26 February @minus{}746
C.E.  Other eras that have been used elsewhere are the Era of Philippos
(which marks the death of Alexander the Great) starting in year 425 of
Nabonassar, the Era of emperor Hadrian of Rome, starting in year 864 of
Nabonassar, and the Era of emperor Antoninus of Rome, starting in year
885 of Nabonassar.

@c -------------------------------------
@node Mayan Tikal Calendar, Mayan Long Count, Egyptian Calendar, calendar
@subsubsection Mayan Tikal Calendar

The peoples of Central America used a great number of calendar systems,
but they all followed the same overall pattern.  The calendar described
here is the Mayan "Tikal" calendar.

The Tikal calendar used a cycle of 20 days with a name for each day in
the cycle, and a cycle of 13 days with a cardinal number for each day
in the cycle (starting with 1).  These two cycles were counted
concurrently, so that after day "6 Ik'" followed day "7 Ak'b'al" and
then "8 K'an".  A particular combination recurred after 260 days,
which period was called the "Tzolk'in" in the Yucatecan language.  The
names of the days in the 20-day cycle were as follows: Imix', Ik',
Ak'b'al, K'an, Chikchan, Kimi, Manik', Lamat, Muluk, Ok, Chuwen, Eb',
B'en, Ix, Men, Kib', Kab'an, Etz'nab', Kawak, Ajaw.

There was also a year count, called @emph{Haab'}, with a year of 365
days divided into 18 months of 20 days each and a 19th month with 5
days only.  The months had names, and the days had numbers, and these
were counted as we are used to today, so after day "1 Pop" followed
day "2 Pop" and so on.  However, the numbers started at 0 instead of
1.  The Mayan names of the months were: Pop, Wo, Sip, Sotz', Sek, Xul,
Yaxk'in, Mol, Ch'en, Yax, Sac, Keh, Mak, K'ank'in, Muwan, Pax,
K'ayab', Kumk'u, Wayeb'.  There were no leap years in the central
American calendars, so the year count ran out of step with the seasons
by about one day every four years.

a particular date was usually identified by its position in both the
tzol kin and the haab, for instance as "6 Ik' 2 Pop", and for the next
day "7 Ak'b'al 3 Pop". After 52 years (of 365 days) the same
tzol-kin/year-count designation would return. This period is often
referred to as a "calendar round" or a "Mayan century".

In many cases, Mayan monuments display dates in only the calendar-round
manner, which means that these dates return every 52 years (of 365
days). This means that we can pinpoint those dates in the modern
calendar only up to a multiple of 52 years.

The Spanish conquistadores who conquered Central America in the 16th
century ordered the destruction of much of the Mayan written records,
and the precise correlation between the Mayan calendars and modern
calendars is therefore not exactly known.

The @code{calendar} function can return, in text form, the Tikal
designation (Tzolk'in -- Haab') for any date in the modern calendars,
based on the most widely accepted correlation between the Mayan and
modern calendars.

For the third Mayan calendar, see @ref{Mayan Long Count}.

Further reading:  @emph{The Book of the Year: Middle American
Calendrical Systems}, by Munro. S. Edmonson; University of Utah Press,
1988.

@c -------------------------------------
@node Mayan Long Count, Lunar Calendar, Mayan Tikal Calendar, calendar
@subsubsection Mayan Long Count

The Mayan Long Count is a calendar consisting of 5 cycles that indicate
the number of days since the last beginning of the full cycle.  The
name, definition, and length of each cycle is indicated in the
following table.

@example
  Name       Definition            Length
   k'in      = 1 day                1 day
 winal       = 20 k'in             20 days
   tun       = 18 winal           360 days
 k'atun      = 20 tun           7,200 days = about 20 years
b'ak'tun     = 20 k'atun      144,000 days = about 394 years
(full cycle) = 20 b'ak'tun  2,880,000 days = about 7885 years
@end example

a particular date in the Long Count is written as a set of five
numbers, one for each subcycle, separated by periods (@kbd{.}).  For
example, the date 1.2.3.4.5 means 1 b'ak'tun, 2 k'atun, 3 tun, 4
winal, 5 k'in after the beginning of the full cycle.  The beginning of
the last cycle, at long count 0.0.0.0.0, is thought to correspond to 6
September @minus{}3113 C.E.

The Long Count 13.0.0.0.0 corresponds to 21 December 2012 C.E., and the
current full cycle will be complete on 13 October 4772 C.E.  The
@code{calendar} function can return, in text form, the Long Count
corresponding to any date.

For the Mayan Haab' and Tzolk'in calendars, see @ref{Mayan Tikal
Calendar}.

Further reading:  @emph{The Book of the Year: Middle American
Calendrical Systems}, by Munro. S. Edmonson; University of Utah Press,
1988.

@c -------------------------------------
@node Lunar Calendar, Latin Calendar, Mayan Long Count, calendar
@subsubsection Lunar Calendar

This is a lunar calendar, represented by the (fractional) count of New
Moons since the first New Moon after JD 0 (@ref{Julian Day Numbers}).  The
count is based on the mean motion of the Moon, disregarding short-term
perturbations.  In this calendar, an integer date corresponds
(approximately) to New Moon, and a date ending in @code{.5} corresponds
to a Full Moon.

@c -------------------------------------
@node Latin Calendar, Time Scales, Lunar Calendar, calendar
@comment  node-name,  next,  previous,  up
@subsubsection Latin Calendar

The ancient Romans started the Julian calendar which eventually evolved
into the Common calendar.  However, the method of the Romans for
designating dates in their calendar was quite different from ours.  We
refer to the Common calendar with the Roman way of designating dates (in
the Latin language) as the "Latin Calendar".

The Romans did not know Arabic numerals.  They wrote numbers using
letters, according to the following table.

@example
  Letter    Numeric Value
    i             1
    v             5
    x            10
    l            50
    c           100
    d           500
    m          1000
@end example

If a "smaller" letter (i.e., earlier in the table) follows a "bigger"
one (i.e., later in the table), then the values add up, but if a smaller
letter precedes a bigger one, then its value must be subtracted from the
total.  For example, @code{dcx} stands for 500 + 100 + 10 = 610, but
@code{cdx} stands for 500 @minus{} 100 + 10 = 410.

The Latin names for the months are listed in the following table.  They
are similar to the English month names, which are derived from them.  In
the Latin language, the way to write a word -- and especially the last
part of a word -- depends on the context.  The table lists three forms
that are useful in the calendar.

@example
Number            Latin Month Names              English Month Name
  1     Ianuarius    Ianuariis      Ianuarias        January
  2     Februarius   Februariis     Februarias       February
  3     Martius      Martiis        Martias          March
  4     Aprilis      Aprilibus      Apriles          April
  5     Maius        Maiis          Maias            May
  6     Iunius       Iuniis         Iunias           June
  7     Iulius       Iuliis         Iulias           July
  8     Augustus     Augustis       Augustas         August
  9     September    Septembribus   Septembres       September
 10     October      Octobribus     Octobres         October
 11     November     Novembribus    Novembres        November
 12     December     Decembribus    Decembres        December
@end example

a month as a whole was referred to with the first of the three listed
Latin names.  For example, the month of January was @emph{mensis
Ianuarius}.

Three days in each month had names: the @emph{Kalends} (hence calendar),
the @emph{Nones}, and the @emph{Idus} (as in "Beware the Ides of
March").  The Kalends was the first name of a month.  The Idus was the
13th day in most months, but the 15th day in March, May, July, and
October.  The Nones was 8 days before the Idus, so it was the 5th or 7th
day of the month.  These days were referred to using month names from
the second column of the table; for example Kalendae Ianuariis, Nonae
Februariis, Idibus Martiis.  The day preceding one of these days was
referred to using month names from the third column of the table, after
the word @emph{Pridie}; for example, Pridie Kalendas Apriles, Pridie
Nonae Maias, Pridie Idus Iunias.

The Romans indicated other days of the month by counting
@emph{backwards} from the next later Kalends, Nones, or Idus.  This
means that days in the second half of every month (after the Idus) would
be referred to as "so many days before the Kalends of the next month".
In addition, the Romans counted @emph{inclusive}.  In figuring out the
difference between two numbers, they'd count both the first and the last
numbers.  For example, to get from today to tomorrow, the Romans would
count two days rather than just one.  So, the 30th day of June, which is
the day before the Kalends (first day) of July, would be referred to as
Pridie Kalendas Iulias, and the day before that (the 29th of June) as
Ante Diem iii Kalendas Iulias.  The "ante diem" means something like
"the earlier day".

The Romans used to count years from the (mythical) year of the founding
of the city of Rome in year @minus{}751 of the Common Era.  They
referred to a year count in the era as Ab Urbe Condita ("since the
founding of the City"), abbreviated to A.U.C.  However, our Latin
calendar uses the same era as the Common calendar.  The year number is
introduced by the word "Anno" (year).  As an example of a complete date,
the 15th of December of 1965 is referred to as "Ante Diem xviii Kalendas
Ianuarias Anno mcmlxvi", which translates loosely as "The 18th inclusive
day before the Kalends of January of the year 1966".

The Romans did not know of the number zero or of negative numbers.  Such
year numbers are printed in the Latin calendar using the usual Arabic
numerals.  In addition, numbers greater than or equal to 4000 are also
printed using Arabic numerals.

@c -------------------------------------
@node Time Scales,  , Latin Calendar, calendar
@subsubsection Time Scales

Various time scales are in use.  International Atomic Time (TAI) is a
uniform time scale with a unit of one si second.  It was implemented
around 1960.  Each TAI minute is 60 si seconds, each TAI hour equals 60
TAI minutes, and each TAI day equals 24 TAI hours.  Coordinated
Universal Time (UTC) is the basis of most administrative times on Earth.
Its units are the si second, the minute, the hour, and the day, and it
differs from TAI by an integral number of seconds.  By infrequent and
irregular insertion of leap seconds, the UTC day start is tied to the
Earth's rotation.  The length of specific UTC minutes, hours, and days
may therefore differ from TAI minutes, hours, and days.  Universal Time
(UT, UT1) is a non-uniform time scale tied to the Earth's rotation.  It
has no leap seconds, so the length of its unit (the UT second) depends
on the Earth's rotation.  UT differs from UTC by less than 0.9 seconds
through the judicious insertion of leap seconds in UTC.  Terrestrial
Dynamical Time (TDT) -- or Terrestrial Time (TT) for short -- was
implemented in 1984 as the dynamical time scale for geocetric phenomena.
Barycentric Dynamical Time (TDB) was implemented in 1984 as the
dynamical time scale for solar-system barycentric phenomena.  The
difference between TDT and TDB is always less than 0.002 seconds.  The
difference between TDT and TAI is fixed at about 32 seconds.  Before
1984, Ephemeris Time (et) was used as a uniform time scale for
ephemerides, instead of TDT and TDB.

@c -------------------------------------
@node callig, cbrt, calendar, Internal Routines
@subsection callig
@findex callig

@code{callig, @var{string} [, @var{x}, @var{y}, @var{size}, @var{theta},
@var{font}, @var{flag}] [, /dev, /dvi, /img, /plt, /rim, /rpl]}

Plots characters from Hershey vector fonts.  The arguments are:
@table @var
@item string
The text to be plotted.  @code{@var{string}} may contain special
commands.  A left-side quote @kbd{`} introduces TeX-style commands
(see below) and a dollar sign @kbd{$} introduces classic-style commands.
The classic-style commands are:
@table @code
@item 0..9
  font change to the specified font.  The fonts are: @code{1}-@code{4}:
  roman sans serif, @code{5}: roman bold sans serif, @code{6}: roman
  bold, @code{7}: greek, @code{8}: italic, @code{9}: symbols.
@item a a
  move up, but keep same size.
@item e e
  move up, scale size by factor 0.7.  (exponent)
@item i i
  move down, scale size by factor 0.7. (index)
@item b b
  move down, keep same size
@item n n
  negate combined action of previous @code{a}, @code{e}, @code{i}, and
  @code{b}.
@item $ > <
  draw $, >, or <
@item s s
  save current position
@item r r
  restore saved position
@item x x
  restore entry font
@item c c
  change size to number that follows
@item * .
  draw a star or a bullet
@end table
@item x y
The target coordinates of the lower left-hand point of the text, in the
coordinate system determined by the specified keyword.  By default, the
coordinates are taken to be in pixels (@code{dev}) when they are larger
than 1, or in device-independent coordinates (@code{dvi}) when they are
smaller than 1.  They default to @code{!xc}, @code{!yc} (see
below).
@item size
The relative size of the characters.  Defaults to @code{!fsize}, which
defaults to @code{1}.
@item theta
The angle in degrees with respect to the positive x axis along which the
text is plotted.  Defaults to @code{0}.
@item font
The number of the font in which the plotting is started.  Defaults to
@code{!font} which defaults to @code{6}.
@item flag
a flag that indicates if the pen is down (when @code{@var{flag}}
nonzero) or up (when @code{@var{flag}} is zero).  If the pen is up then
nothing is plotted, though the pen position variables @code{!xc}
and @code{!yc} are updated (see below).
@end table

a number of TeX-style commands are supported, including:
@table @asis
@item Greek lower-case letters:
@code{`alpha `beta `chi `delta `epsilon `eta `gamma `iota `kappa `lambda
`mu `nu `omega `omicron `phi `psi `rho `sigma `tau `theta `upsilon `xi
`zeta}.
@item Greek upper-case letters:
(all of them, even those that are equal to certain Roman letters and
therefore not separately available in TeX): @code{`Alpha `Beta `Chi
`Delta `Epsilon `Eta `Gamma `Iota `Kappa `Lambda `Mu `Nu `Omega `Omicron
`Phi `Psi `Rho `Sigma `Tau `Theta `Upsilon `Xi `Zeta}.
@item Font & size selection:
@code{`bf} for a bold roman font (font 5), @code{`it} for a bold italic
font (font 8), @code{`rm} for a roman font (font 6), and @code{`sf}
for a roman sans serif font (font 1).  @code{`size} (non-TeX) introduces
a new font size (measured by an integer or floating-point number
relative to the entry font).  According to the usual TeX standards, the
following argument must be enclosed in curly braces @code{@{@}} if it
has more than a single digit.
@item Various mathematical symbols:
@code{`cap}: the set union symbol; @code{`cup}: the set intersection
symbol; @code{`exists}: the existence indicator; @code{`ge}: the "greater
than or equal" symbol; @code{`in}: the is-element-of symbol;
@code{`int}: the integration sign; @code{`le}: the "less than or equal
to" symbol; @code{`nabla}: the nabla symbol; @code{`oint}: the closed
integration sign; @code{`partial}: the partial differentiation symbol;
@code{`perp}: the perpendicular sign; @code{`pm}: the plus-minus sign;
@code{`propto}: the proportional-to sign; @code{`sim}: the similar-to
symbol; @code{`subset}: the is-subset-of symbol; @code{`supset}: the
is-superset-of symbol; @code{`surd}: the square-root symbol;
@code{`times}: the multiplication symbol.
@item Arrows:
@code{`downarrow}; @code{`leftarrow}; @code{`rightarrow}; @code{`uparrow}.
@item Miscellaneous symbols:
@code{`box}: (non-TeX) a box; @code{`clubsuit}: the clubs card suit
symbol; @code{`dag}: the dagger symbol; @code{`ddag}: the double dagger
symbol; @code{`diamondsuit}: the diamonds card suit symbol;
@code{`heartsuit}: the hearts card suit symbol; @code{`odot}: the
astronomical Sun symbol (a dot in a circle); @code{`spadesuit}: the
spade card suit symbol. 
@end table

In addition, TeX math-mode superscripting (introduced by @kbd{^}),
subscripting (introduced by @kbd{_}) and brace-enclosed grouping
(@code{@{@}}) to indicate the scope of super- or subscripts are
supported.  Grouping to delimit the influence of font or size changes is
not supported!  In this routine, there is no separate TeX-style "math
mode": all of these TeX-style commands are available all the time.

For example, the following two strings yield an alpha with 2 sigma for
superscript, followed by the "is-a-member-of" sign, followed by an italic
q: @code{'$7a$E$X2$7r$N$9e$8Q'} using the short notation, and
@code{'`alpha^@{2`sigma@}`in`it@{q@}'} using TeX-style notation.

The coordinate system for @code{@var{x}} and @code{@var{y}} is chosen as
described at @ref{Screen Coordinates}.

The following system variable influence or are influenced by calls to
@code{callig}:

@table @code
@item !xc, !yc
After the call, @code{!xc} and @code{!yc} contain the
coordinates of the point just after the last drawn character.
@item !cratio
The characters are drawn in device-independent coordinates, which means
they will look squashed if the display is not square.  You may tweak
this using @code{!cratio}, an extra scaling factor for the
characters' y size.
@item !fsize
The relative size of the characters, if @code{@var{size}} is not specified.
@item !font
The entry font of the characters, if @code{@var{font}} is not specified.
@end table

Alias: @ref{c}

See also: @ref{!cratio}, @ref{!font}, @ref{!fsize}, @ref{!height},
@ref{!iorder}, @ref{!mxb}, @ref{!mxt}, @ref{!myb}, @ref{!myt},
@ref{Screen Coordinates}, @ref{!tvix}, @ref{!tvixb}, @ref{!tviy},
@ref{!tviyb}, @ref{!width}, @ref{!wxb}, @ref{!wxt}, @ref{!wyb},
@ref{!wyt}, @ref{!xc}, @ref{!yc}, @ref{Plots}, @ref{Screen Coordinates}

@c -------------------------------------
@node cbrt, cdblarr, callig, Internal Routines
@subsection cbrt
@findex cbrt

@code{cbrt(@var{x})}

Returns the @code{float} or @code{double} cube root of @code{@var{x}}.

See also: @ref{sqrt}, @ref{Math Routines}

@c -------------------------------------
@node cdblarr, cdblfarr, cbrt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cdblarr
@findex cdblarr

@code{cdblarr(@var{dims})}

Returns a @code{cdouble} array of the specified @code{@var{dimensions}}.
The latter may be an array containing the dimensions, or up to
@code{#max_dims} scalar arguments, each of which contains a dimension.

See also: @ref{array}, @ref{Default Arrays}, @ref{Complex Numbers}

@c -------------------------------------
@node cdblfarr, cdmap, cdblarr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cdblfarr
@findex cdblfarr

@code{cdblfarr(@var{file}, @var{dimensions} [, offset=@var{offset},
/readonly, /swap])} 

Links a @code{cdouble} array dimensional structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or a list of up to ten
dimensions.  The file need not exist.  @code{@var{offset}} indicates the
length in bytes of a header after which the array data is to be found.
It defaults to zero.  Keyword @code{/readonly} disallows writing to the
disk file through the file array.  Keyword @code{/swap} indicates that
the data should be byte-swapped after reading (for input only).

See also: @ref{File Arrays}, @ref{File Array Creation}, @ref{Complex
Functions} 

@c -------------------------------------
@node cdmap, cdouble, cdblfarr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cdmap
@findex cdmap

@code{cdmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{cdouble} scalar or array,
i.e. each sixteen bytes of @code{@var{x}} are transformed into one
@code{cdouble} number.

See also: @ref{Data Mapping}, @ref{Complex Functions}

@c -------------------------------------
@node cdouble, ceil, cdmap, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cdouble
@findex cdouble

@code{cdouble(@var{arg})}

@code{cdouble, @var{arg} [, @dots{}]}

Converts the arguments to data type @code{cdouble} (complex
double-precision floating-point).  The function returns a converted copy
and leaves @code{@var{x}} itself alone.  The subroutine modifies
@code{@var{x}} itself.

See also: @ref{Complex Numbers}, @ref{Complex Functions}, @ref{Number
Conversion}

@c -------------------------------------
@node ceil, cfloat, cdouble, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ceil
@findex ceil

@code{ceil(@var{arg})}

Returns the next higher (i.e., closer to positive infinity) integer
number for each value in @code{@var{arg}}.  For complex arguments, the
result is based on the real part only.

See also: @ref{floor}, @ref{rfix}, @ref{long}, @ref{Complex Functions},
@ref{Math Routines}

@c -------------------------------------
@node cfloat, cfltarr, ceil, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cfloat
@findex cfloat

@code{cfloat(@var{arg})}

@code{cfloat, @var{arg} [, @dots{}]}

Converts the arguments to data type @code{cfloat} (complex
single-precision floating-point).  The function returns a converted copy
and leaves @code{@var{x}} itself alone.  The subroutine modifies
@code{@var{x}} itself.

See also: @ref{Complex Numbers}, @ref{Complex Functions}, @ref{Number
Conversion}

@c -------------------------------------
@node cfltarr, cfltfarr, cfloat, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cfltarr
@findex cfltarr

@code{cfltarr(dims)}

Returns a @code{cfloat} array of the specified @code{@var{dimensions}}.
The latter may be an array containing the dimensions, or up to
@code{#max_dims} scalar arguments, each of which contains a dimension.

See also: @ref{array}, @ref{#max_dims}, @ref{Complex Functions},
@ref{Default Arrays}

@c -------------------------------------
@node cfltfarr, cfmap, cfltarr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cfltfarr
@findex cfltfarr

@code{cfltfarr(@var{file}, @var{dimensions} [, offset=@var{offset},
/readonly, /swap])} 

Links a @code{cfloat} array dimensional structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or a list of up to ten
dimensions.  The file need not exist.  @code{@var{offset}} indicates the
length in bytes of a header after which the array data is to be found.
It defaults to zero.  Keyword @code{/readonly} disallows writing to the
disk file through the file array.  Keyword @code{/swap} indicates that
the data should be byte-swapped after reading (for input only).

See also: @ref{File Arrays}, @ref{File Array Creation}, @ref{Complex
Functions} 

@c -------------------------------------
@node cfmap, chdir, cfltfarr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cfmap
@findex cfmap

@code{cfmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{cfloat} scalar or array,
i.e. each eight bytes of @code{@var{x}} are transformed into one
@code{cfloat} number.

See also: @ref{Data Mapping}, @ref{Complex Functions}

@c -------------------------------------
@node chdir, checklist, cfmap, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection chdir
@findex chdir

@code{chdir [, @var{string}, /show]}

Changes the working directory to @code{@var{string}}.  If
@code{@var{string}} is not specified, and also if @code{/show} is
specified, then the current value of the working directory is displayed.
This routine is only available if your computer platform supports it.

See also: @ref{System}

@c -------------------------------------
@node checklist, checkmenu, chdir, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection checklist
@findex checklist

@code{checklist [, @var{limit}]}

@code{[debug]} Checks all allocated entries against the LUX symbol
tables and reports discrepancies in entries that are at least
@code{@var{limit}} bytes in size.  Internal function and routine key
lists are not regarded, so they result in spurious error messages.
These lists at present do not exceed 32 bytes in size, so a limit of 33
ought to take care of them.

See also: @ref{Debug Routines}
@c -------------------------------------
@node checkmenu, checkwindow, checklist, Internal Routines
@subsection checkmenu
@findex checkmenu

@code{checkmenu( [ @var{menu} ] )}

@code{[@ref{x11}]} Returns @code{1} if an entry in the menu with
number @code{@var{menu}} has been selected but has not yet been read.
Returns @code{0} otherwise.

See also: @ref{menu}, @ref{wait_for_menu}, @ref{Menus}

@c -------------------------------------
@node checkwindow, chi2, checkmenu, Internal Routines
@subsection checkwindow
@findex checkwindow

@code{checkwindow( [ @var{window} ] )}

@code{[@ref{x11}]} Returns @code{1} if a mouse button has been
clicked while the mouse pointer was in the specified LUX window, or
(when @code{@var{window}} is not specified) in any LUX window; @code{0}
otherwise.  @code{!ix}, @code{!iy}, @code{!xtime}, @code{!window}, and
@code{!button} are modified appropriately if a mouse button was clicked.

See also: @ref{!button}, @ref{checkmenu}, @ref{!ix}, @ref{!iy},
@ref{!window}, @ref{xplace}, @ref{xquery}, @ref{!xtime}, @ref{Windows}
@c -------------------------------------
@node chi2, classname, checkwindow, Internal Routines
@subsection chi2
@findex chi2

@code{chi2(@var{nu}, @var{chi2} [, /complement, /log])}

Returns the value of the chi-square probability function at ordinate
@code{@var{chi2}}, for @code{@var{nu}} degrees of freedom.  This is
equal to @code{igamma(@var{nu}/2, @var{chi2}/2)}.  Returns one minus
this value if keyword @code{/complement} is specified.  Returns the
natural logarithm of the result if keyword @code{/log} is specified.

See also: @ref{igamma}, @ref{Statistical Functions}

@c -------------------------------------
@node classname, close, chi2, Internal Routines
@subsection classname
@findex classname

@code{classname(@var{class})}

Returns the name of the data class with number @code{@var{class}} in a
string.  These numbers are available in @code{#class}.

See also: @ref{#class}, @ref{symclass}, @ref{typename}, @ref{Information}
@c -------------------------------------
@node close, cluster, classname, Internal Routines
@subsection close
@findex close

@code{close, @var{lun}}

Close the file on logical unit @code{@var{lun}}.

See also: @ref{Opening/Closing Files}
@c -------------------------------------
@node cluster, colorcomponents, close, Internal Routines
@subsection cluster
@findex cluster

@code{cluster, @var{data}, centers=@var{centers} [, index=@var{index},
size=@var{size}, sample=@var{sample}, phantom=@var{phantom},
maxit=@var{maxit}, rms=@var{rms}, second=@var{second}, /update,
/iterate, /vocal, /quick, /record, /ordered]}

This routine divides vectors into clusters, based on their proximity to
cluster centers.  @code{@var{data}}, @code{@var{centers}},
@code{@var{index}}, @code{@var{sample}}, @code{@var{phantom}}, and
@code{@var{maxit}} are input variables; @code{@var{centers}},
@code{@var{index}}, @code{@var{size}}, @code{@var{rms}}, and
@code{@var{second}} are output variables and must therefore be named
variables.  The arguments are:

@table @var
@item data
The data points.  The first dimensions of @code{@var{data}} selects the
components of the vectors; i.e. the first vector is
@code{@var{data}(*,0)} if @code{@var{data}} has two dimensions.  Each data
point is assigned to the cluster whose center is closest of all cluster
centers to the data point at that time.
@item centers
The cluster centers.  If @code{@var{centers}} is a scalar on entry, then it
denotes the number of clusters to divide the data into, and a random
sample (of appropriate size) of the data vectors is taken as initial
guess for the cluster center positions.  If @code{@var{centers}} is an array on
input, then each @code{@var{centers}(*,k@dots{})} is taken to contain the
(initial) position of a cluster center.  The final (possibly updated)
cluster centers are returned in @code{@var{centers}} on exit.
@item index
The cluster assignment of the data points.  If @code{@var{index}} is an array
of appropriate size on entry, and if @code{@var{phantom}} is not specified, then
the elements of @code{@var{index}} denote the initial cluster membership of the
datapoints.  On exit, @code{@var{index}} contains the cluster numbers that the
data points have been assigned to.  No or an undefined @code{@var{index}}
implies @code{/phantom}.
@item size
The cluster sizes.  If @code{@var{size}} is specified, then the number of
elements in each cluster is returned in it upon exit from the routine.
@item sample
The data point sample size.  If @code{@var{sample}} is an integer larger than
one, then it indicates the size of a random sample of data points that
should be treated.  If @code{@var{sample}} equals 1, then a sample ten times
bigger than the number of clusters is used.  If @code{@var{sample}} is not
specified or falls outside the range mentioned before, then all data
points are treated.
@item phantom
If @code{@var{phantom}} is specified, then it indicates that the
clusters should be pre-stocked with phantom members, to partially
suppress movement of the cluster centers during clustering.  The value
assigned to @code{@var{phantom}}, if an integer larger than 1, indicates
how many phantom members to assign to each cluster prior to treatment of
the data points.  If @code{@var{phantom}} is not specified, and
@code{@var{index}} is an array of appropriate size, then the clusters
contain the members indicated by @code{@var{index}} prior to clustering.
If @code{@var{phantom}} equals 1, then 10 phantom members are assigned
to each cluster prior to clustering.  Any phantom members are removed
after clustering, before exiting the routine.
@item maxit
@code{@var{maxit}} specifies the maximum number of iterations that is
allowed for this call to @code{cluster}.  If @code{@var{maxit}} is not
specified, then the number of iterations is unlimited.
@item rms
If @code{@var{rms}} is specified then the average root-mean-square
distance of the members of each cluster to its center is returned in it.
@end table

The keywords are:
@table @code
@item /update
signals that the cluster center positions must be updated during the
clustering, so that each cluster center at any time during the
clustering equals the average position of all members in the cluster at
that time (including any phantom members).  If @code{/update} is not
specified, then the cluster centers do not move during clustering.
@item /iterate
specifies that updating must be iterated until the cluster centers are
stable and upon exit all data points are members of the cluster whose
center is the closest one of all cluster centers.  @code{/iterate}
implies @code{/update}.
@item /vocal
specifies that the number of reclustered data points (and the number of
changed clusters, if @code{/iterate} is also specified) are printed.
@item /quick
specifies that only data points in clusters that were changed during the
last iteration or so far during the current one should be treated during
the current iteration.  The other data points are left unchanged.  This
keyword implies @code{/iterate} and @code{/update}.
@item /order
specifies that there is some degree of order in @code{@var{data}}, so
that there is more than a random chance that the current data point and
the previous data point belong in the same cluster.  The time penalty of
this option is small, so it is selected by default.  Specify
@code{/noorder} to deselect it.  This option only affects the first
iteration.
@item /record
specifies that the cluster positions and sizes should be written to file
@file{cluster.out} after each iteration.  This option has effect only if
@code{/iterate} was also selected.
@end table

@code{cluster,data,c,i} with undefined @code{i} yields cluster centers
which are not distrubuted evenly.  @code{cluster,data,c,i,/iterate}
yields a more even distribution.  For large data sets it is advised to
first use @code{cluster,data,c,i,/sample,/iterate} (or with
@code{sample=sample_size}) to get fairly evenly distributed cluster
centers, and then @code{cluster,data,c,i} to assign all data points to
the clusters.

When random samples of data points are treated, then the current
clustering algorithm is known as the Continous k-Means Algorithm.

See also: @ref{Topology}
@c -------------------------------------
@node colorcomponents, colorpixel, cluster, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection colorcomponents
@findex colorcomponents

@code{colorcomponents, @var{pixels}, @var{r}, @var{g}, @var{b}}

@code{[@ref{x11}]} Takes raw pixel values @code{@var{pixels}} and returns the
relative red, green, and blue components in @code{@var{r}},
@code{@var{g}}, and @code{@var{b}}, which must be named variables and
which are transformed to @code{byte} arrays.  The return values range
between 0 (absent) and 255 (full intensity).

See also: @ref{Color}

@c -------------------------------------
@node colorpixel, colorstogrey, colorcomponents, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection colorpixel
@findex colorpixel

@code{colorpixel(@var{x})}

@code{[@ref{x11}]} Maps the color indices in @code{@var{x}} to
raw pixel values, according to the current color map.

See also: @ref{tvraw}, @ref{Color}

@c -------------------------------------
@node colorstogrey, compile, colorpixel, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection colorstogrey
@findex colorstogrey

@code{colorstogrey,@var{colors}}

@code{[@ref{x11}]} Maps raw pixel values @code{@var{colors}} to
the corresponding grey scale values (between 0 and 255).

See also: @ref{colorcomponents}, @ref{Color}

@c -------------------------------------
@node compile, compile_file, colorstogrey, Internal Routines
@subsection compile
@findex compile

@code{compile(@var{string})}

@code{[@ref{develop} package]} Compiles the @code{@var{string}} and
stores it in a block routine, the number of which is returned.  Does not
execute the code.

See also: @ref{eval}, @ref{execute}, @ref{Running}

@c -------------------------------------
@node compile_file, complex, compile, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection compile_file
@findex compile_file

@code{compile_file, @var{file}}

@code{[@ref{motif} package]}  Compiles the contents of the named
@code{@var{file}} as LUX commands at the main execution level.

See also: @ref{Running}

@c -------------------------------------
@node complex, compress, compile_file, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection complex
@findex complex

@code{complex(@var{x})}

Returns a copy of numerical @code{@var{x}} which has been transformed to
the corresponding complex data type (i.e., @code{double} to
@code{cdouble} and other types to @code{cfloat}).

See also: @ref{abs}, @ref{arg}, @ref{imaginary}, @ref{real},
@ref{Complex Numbers}, @ref{Number Conversion}, @ref{Complex Functions}

@c -------------------------------------
@node compress, concat, complex, Internal Routines
@subsection compress
@findex compress

@code{compress(@var{data} [, @var{dimensions}], @var{factors})} 

Returns a compressed copy of array @code{@var{data}}, which may have an
arbitrary number of dimensions.  The positive integer compression
factors are taken from @code{@var{factors}} and the dimensions that
these factors are applied to are taken from @code{@var{dimensions}},
which defaults to @code{indgen(@var{factors})}.  If @code{@var{factors}}
contains a single number and @code{@var{dimensions}} is not specified,
then the compression factor is applied to all dimensions.

The result is of the same data type as @code{@var{data}}.  Each element
of the result contains the average of a fixed number of neighboring
elements of @code{@var{data}} indicated by @code{@var{fctors}} and
@code{@var{dimensions}}.  Of each dimension of @code{@var{data}}, the
first part is treated that has a size equal to the greatest multiple of
the compression factor for that dimension that fits the dimension of
@code{@var{data}}.  For example, if @code{@var{data}} is an array of 11
by 7 elements and @code{@var{factors}} contains the numbers 4 and 2,
then the result will have dimensions 2 (= @code{fix(11/4)}) by 3 (=
@code{fix(7/2)}), and the part of @code{@var{data}} that is treated is
indicated by the range @code{(0:7,0:5)}.  The first element of the
result will be equal to the average of @code{@var{data}(0:3,0:1)}.

See also: @ref{expand}, @ref{regrid}, @ref{regrid3},
@ref{Interpolation}, @ref{Array Manipulation}

Note: The invocation of this version of @code{compress} is not
backwardly compatible with the old one, which treated two-dimensional
data only.  The old version was called like this: @code{compress (
@var{data}, @var{xfac} [, @var{yfac}])} where @code{@var{xfac}} and
@code{@var{yfac}} were the compression factors for the first and second
dimensions, respectively, and @code{@var{yfac}} defaulted to
@code{@var{xfac}}.

@c -------------------------------------
@node concat, conjugate, compress, Internal Routines
@subsection concat
@findex concat

@code{concat(@var{x} [, @var{y} ] @dots{})}

Concatenation function for scalars, strings, and arrays.

Alias: @ref{Square Brackets}

See also: @ref{Combining Arrays}

@c -------------------------------------
@node conjugate, constellation, concat, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection conjugate
@findex conjugate

@code{conjugate(@var{arg})}

Returns the complex conjugate of numerical argument @code{@var{arg}}.

See also: @ref{Complex Numbers}, @ref{Complex Functions}

@c -------------------------------------
@node constellation, constellationname, conjugate, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection constellation
@findex constellation

@code{constellation(@var{coords} [, @var{equinox}, /julian,
/besselian])}

Returns the constellation that the position indicated by the
coordinates @code{@var{coords}} is in.  @code{@var{coords}(0,/all)} is
taken to contain the right ascension of the positions, measured in
degrees.  @code{@var{coords}(1,/all)} is taken to contain the
declination of the positions, measured in degrees.  Both coordinates
are assumed to be relative to the equinox indicated by
@code{@var{equinox}}, which is a Julian Date (if no keywords are
specified), or a Julian year (e.g., 2000.0 = J2000.0) if
@code{/julian} is specified, or a Besselian year (e.g., 1875.0 =
B1875.0) if @code{/besselian} is specified.  Besselian years are taken
to be 365.2421988 days long, and B1950.0 corresponds to JDE
2433282.4235.  If no @code{@var{equinox}} is specified, then J2000.0
is assumed.

See also: @ref{astron}, @ref{constellationname}, @ref{precess}, @ref{calendar}

@c -------------------------------------
@node constellationname, contour, constellation, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection constellationname
@findex constellationname

@code{constellationname(@var{index})}

Returns the official abbreviation of the name of the constellation
identified by the @code{@var{index}}, which (after transformation to
an integer) must contain one or more numbers between 0 and 87,
inclusive, as returned by the function @code{constellation}.

See also: @ref{constellation}

@c -------------------------------------
@node contour, convert, constellationname, Internal Routines
@subsection contour
@findex contour

@code{contour, image=@var{image} [, levels=@var{levels},
xmin=@var{xmin}, xmax=@var{xmax}, ymin=@var{ymin}, ymax=@var{ymax},
style=@var{style}, dashsize=@var{dashsize}, /autocontour, /usercontour]}

Draw a contour plot.

@table @var
@item image
The image of which a contour plot is desired.
@item levels
The data value levels at which contours are to be drawn (if an array),
or the desired number of contour levels (if a scalar).  Defaults to
@code{!contour_nlev}. 
@item xmin xmax ymin ymax
The coordinate limits of the part of @code{@var{image}} that is to be shown.
@item style
The line style used in drawing the contours.  Defaults to
@code{!contour_style}.
@item dashsize
The relative size of the dashes (if any) in the chosen line style.
Defaults to 1.
@end table
@table @code
@item /autocontour
Indicates that the contour levels must be calculated from the spread
of the data and returned in @code{$CONTOURS}.
@item /usercontour
Indicates that the contour levels should be taken from @code{$CONTOURS}.
@end table

Contour levels are calculated from the data if @code{/autocontour} is
specified, or if @code{/autocontours} is not specified but
@code{!autocon} is unequal to zero.  Otherwise, contour levels are taken
from @code{$CONTOURS}.

Various options may be set through system variables:

@table @code
@item !contour_nlev
contains the default number of levels (and defaults to 5).
@item !autocon
flags automatic calculation of contour levels.
@item $CONTOURS
specifies the contour levels when @code{!autocon} is zero and
@code{/autocontour} was not specified.  The used contour levels are
returned in @code{$CONTOURS}.
@item !contour_mode
selects the type of automatic countouring:
@enumerate 0
@item linear
@item square root
@item logarithm
@end enumerate
@item !contour_box
flags the drawing of a one-bin box at the origin.
@item !contour_border
indicates the thickness of the border around the contour plot.
@item !contour_ticks
governs the size of contour tick marks, in device-independent (@code{dvi})
coordinates.
@item !contour_tick_pen
specifies the thickness of the contour tick marks, in device-independent
coordinates.
@item !contour_tick_fac
Unknown function.
@item !contour_dash_lev
holds the contour level below which contours are dashed. 
@end table

See also: @ref{!autocon}, @ref{!contour_border}, @ref{!contour_box},
@ref{!contour_dash_lev}, @ref{!contour_mode}, @ref{!contour_nlev},
@ref{!contour_ticks}, @ref{!contour_tick_fac}, @ref{!contour_tick_pen},
@ref{plot}, @ref{Plots}

@c -------------------------------------
@node convert, coordtrf, contour, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection convert
@findex convert

@code{convert(@var{x}, @var{type})}

Returns a copy of @code{@var{x}} converted to numerical data type
@code{@var{type}}.  @code{@var{type}} must be a valid data type number
(as returned by @code{symdtype} and defined in @code{#type}).

See also: @ref{symdtype}, @ref{#type}, @ref{Number Conversion}

@c -------------------------------------
@node coordtrf, cos, convert, Internal Routines
@subsection coordtrf
@findex coordtrf

@code{coordtrf, @var{xold}, @var{yold} [, @var{xnew}, @var{ynew}, /dep,
/dvi, /dev, /img, /plt, /rim, /rpl, /x11, /todvi, /todev, /toplt,
/torim, /torpl, /tox11]}

Transforms screen coordinates (@code{@var{xold}}, @code{@var{yold}}) to
a different coordinate system.  Returns the results in
@code{@var{xnew}}, @code{@var{ynew}}, if these are specified, or in
@code{@var{xold}}, @code{@var{yold}} otherwise.  The source coordinate
system is indicated by one of the keywords @code{dep}, @code{/dvi},
@code{/dev}, @code{/img}, @code{/plt}, @code{/rim}, @code{/rpl}, or
@code{/x11} and the target coordinate system by one of the
@code{/to@dots{}} keywords.  By default, the source coordinate system is
@code{dep} and the target coordinate system is @code{dvi}.

To specify the coordinate systems numerically, add the member of
@code{#coordsys} that corresponds to the source coordinate system to
eight times the member of that corresponds to the target coordinate
system and assign the result to the @code{mode} keyword.  For example,
to transform from the @code{img} to the @code{rpl} coordinate system,
one can use @code{coordtrf,x,y,/img,/torpl} or
@code{coordtrf,x,y,mode=#coordsys.img+8*#coordsys.rpl}.

See also: @ref{Screen Coordinates}, @ref{#coordsys}

@c -------------------------------------
@node cos, cosh, coordtrf, Internal Routines
@subsection cos
@findex cos

@code{cos(@var{x})}

Returns the cosine of @code{@var{x}} (in radians), which must be
numerical and may be complex.

Reverse: @ref{acos}

See also: @ref{#deg}, @ref{Trigonometry}, @ref{Complex Functions}
@c -------------------------------------
@node cosh, crosscorr, cos, Internal Routines
@subsection cosh
@findex cosh

@code{cosh(@var{x})}

Returns the hyperbolic cosine of @code{@var{x}}, which must be numerical
and may be complex.

See also: @ref{Hyperbolic Functions}, @ref{Complex Functions}
@c -------------------------------------
@node crosscorr, crunch, cosh, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection crosscorr
@findex crosscorr

@code{crosscorr(@var{array1}, @var{array2} [, @var{axes}, /keepdims])}

Returns the cross-correlation coefficient between @code{@var{array1}}
and @code{@var{array2}}, which must both be numerical arrays (real or
complex) and must have the same dimensions.  If @code{@var{axes}} is
specified, then the function returns cross-correlations of all samples
along the specified axes.  The result lacks the dimensions listed in
@code{@var{axes}}, unless @code{/keepdims} is specified, in which case
the affected dimensions are replaced by dimensions of 1.

See also: @ref{mean}, @ref{sdev}, @ref{student}

@c -------------------------------------
@node crunch, crunchrun, crosscorr, Internal Routines
@subsection crunch
@findex crunch

@code{crunch, @var{array}, @var{byte_slice}, @var{out}}

@code{crunch(@var{array}, @code{byte_slice}, @var{out})}

Tries to compress @code{@var{array}} and writes the result in array
@code{@var{out}}, which must be predefined and large enough to contain
the result.  @code{@var{byte_slice}} specifies how many bits per number
are passed to @code{@var{out}} without compression.  If
@code{@var{byte_slice}} is too small or too large, then less efficient
compression or even expansion may occur.  Try three less than the
array's entropy for @code{@var{byte_slice}}.

Presently, only compression of @code{byte}, @code{word}, and (on some
platforms) @code{long} arrays is supported.  Associated system variables
are:

@table @code
@item !crunch_slice
the last specified @code{@var{byte_slice}}.
@item !crunch_bits
the number of bits the last compressed array needed.
@item !crunch_bpp
the number of bits per compressed element for the last compressed array.
@end table

If @code{@var{out}} has insufficient room to hold the result, then
@code{!crunch_bits} and @code{!crunch_bpp} are set to 0.  The subroutine
form then also generates an error; the function form does not, but
returns a 0.  If there is sufficient room, then the function form
returns a 1.  If other errors occur (e.g., when @code{@var{array}} is
not a numerical array), then both forms generate error states.

Reverse: @ref{decrunch}

See also: @ref{!crunch_bits}, @ref{!crunch_bpp}, @ref{!crunch_slice}

@c -------------------------------------
@node crunchrun, cspline, crunch, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection crunchrun
@findex crunchrun

@c -------------------------------------
@node cspline, cspline_extr, crunchrun, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cspline
@findex cspline

@code{cspline( [ @var{xtab}, @var{ytab}] [, @var{xnew}] [, /keep,
/periodic, /getderivative])}

Interpolates (using natural cubic splines) in the table of
@code{@var{ytab}} versus @code{@var{xtab}} (must be in ascending order
with no duplicates) at positions @code{@var{xnew}}.  @code{/keep}
signals retention of @code{@var{xtab}}, @code{@var{ytab}}, and the
derived second derivatives for use in subsequent interpolations from
the same table.  By default, the interpolated value at the indicated
positions is returned, but if @code{/getderivative} is specified, then
the first derivative at the indicated positions is returned instead.
@code{/periodic} indicates that the data is periodic.  In that case
the first and last @code{@var{ytab}} values must be equal, or else a
discontinuity shows up.

@code{cspline(@var{xtab}, @var{ytab} [, /periodic, /getderivative])}
prepares internal tables for subsequent interpolations with
@code{cspline(@var{xnew} [, /getderivative])}.  The internal table is
retained as if @code{/keep} had been specified.

@code{cspline(@var{xnew} [, /getderivative])} interpolates at positions
@code{@var{xnew}} in the retained table, and generates an error if no
table is yet available.  If @code{/getderivative} is specified here but
was not specified when the table was installed, then the extra
auxilliary information is calculated on the fly rather than looked up in
the table: evaluation of the derivative is therefore fastest if
@code{/getderivative} is specified when the table is installed.

@code{cspline()} clears the internal table that was retained.  (In case
the table is real big and you want to get rid of it.)

See also: @ref{cspline_extr}, @ref{polate}, @ref{table}, @ref{tense},
@ref{tense_curve}, @ref{tense_loop}

@c -------------------------------------
@node cspline_extr, cspline_find, cspline, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cspline_extr
@findex cspline_extr

@code{cspline_extr, @var{x}, @var{y} [, @var{axis}, pos=@var{pos},
minpos=@var{minpos}, minval=@var{minval}, maxpos=@var{maxpos},
maxval=@var{maxval} [, /periodic]}

This routine determines extreme values on the curve interpolated between
data points @code{(@var{x},@var{y})} using natural cubic splines.
@code{@var{axis}} (a scalar) specifies along which dimension values of
@code{@var{y}} must be taken.  By default, 0 is assumed.  The values in
@code{@var{x}} must be in ascending order, and there must be one value
in @code{@var{x}} for each value along the selected dimension in
@code{@var{y}}.  If @code{@var{pos}} is specified, then it must be a
scalar and indicates the x coordinate at which the search for an
appropriate local extreme must begin; otherwise, absolute extreme values
are sought.  Found extreme values and their locations are returned in
@code{@var{minpos}, @var{minval}, @var{maxpos}}, and @code{@var{maxval}}
as appropriate.

See also: @ref{cspline}

@c -------------------------------------
@node cspline_find, ctop, cspline_extr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection cspline_find
@findex cspline_find

@code{cspline_find( @var{y}, @var{levels}, [axis=@var{axis}, index=@var{index}])}

Locates (using natural cubic splines) coordinates at which certain
values are attained.  @code{@var{y}} contains the data values.
@code{@var{levels}} contains the data levels to search for.
@code{@var{axis}} (a scalar) contains the axis along which to search
for the data levels, and defaults to 0.

If no locations are found for any of the levels, then scalar @code{-1}
is returned.  Otherwise, a two-dimensional array is returned with its
1st dimension equal to the number of dimensions of @code{@var{y}} and
its 2nd dimension equal to the number of found locations.  If the
result is stored in @code{z}, then @code{z(*,i)} contain the
coordinates of the @code{i}th location.  The locations are in order of
the sought data levels (i.e., first the locations for
@code{levels(0)}, then those for @code{levels(1)}, and so on), and
secondarily in order of the coordinates.

If @code{@var{index}} is defined, then it is changed to an integer
array containing the 2nd coordinate of the result where the locations
for each next value from @code{@var{levels}} begin.  If these indices
are stored in @code{i}, then the locations for @code{levels(j)}
are @code{z(*,i(j))} through @code{z(*,i(j+1)-1)}.

@c -------------------------------------
@node ctop, d, cspline_find, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ctop
@findex ctop

@code{ctop( @var{im} [, @var{x0}, @var{y0}])}

Transforms two-dimensional image @code{@var{im}} from Cartesian
(rectangular) to polar coordinates.  @code{@var{im}} must be of types
@code{float} or @code{double}.  @code{@var{x0}} and @code{@var{y0}}
specify the floating-point Cartesian coordinates of the center of the
polar coordinate system, which defaults to the middle of the image.

The result is another two-dimensional image of the same type as
@code{@var{im}}.  If @code{p = ctop(im, x0, y0)}, and if @code{(r, a)}
are the coordinates of a pixel in the result image, then the coordinates
of the corresponding pixel in @code{@var{im}} are @code{(x0 +
r*cos(a*#2pi/dimen(p,0), y0 + r*sin(a*#2pi/dimen(p,1)))}.  The first
dimension of the result image measures the polar angle, and the second
one the polar radius.  The unit of the radius is one pixel.  The unit of
the azimuth is @code{360/dimen(p,1)} degrees.

Results are included for all (integer) values of the radius for which
the corresponding circle falls completely within the image
@code{@var{im}}.  The size of the second dimension of the result is
equal to one more than the radius of the biggest circle (around the
selected center) that falls completely within the image.  The result
image samples @code{@var{im}} at a resolution of approximately one
sample per pixel.  The size of the first dimension is approximately
equal to @code{#2pi*r} if @code{r} is the largest included radius.  The
exact size of the first dimension is chosen such that it has factors
only from the set 2, 3, and 5, so that Fourier transforms with
@code{fft} in that dimension can be performed relatively quickly.

Reverse: @ref{ptoc}

See also: @ref{dimen}, @ref{fft}, @ref{sin}, @ref{#2pi}

@c -------------------------------------
@menu
* ctop Details::
@end menu

@node ctop Details,  , ctop, ctop
@comment  node-name,  next,  previous,  up
@subsubsection ctop Details

The @code{ctop} function uses bicubic interpolation to find image values
at non-integer Cartesian pixel locations corresponding to sampled polar
coordinates.  For radius @code{r} pixels, the number of samples
(regularly distributed in azimuth) is approximately equal to
@code{#2pi*r}, so that each circle is sampled at a resolution of about 1
px.  The exact number of samples is selected so it has factors from only
the set 2, 3, and 5, for the speediest Fourier transformation.  The
sampled data values are then Fourier-interpolated over the full width of
the return image, so that a particular value of the first dimension
corresponds to the same polar angle for all values of @code{r}.

@c -------------------------------------
@node d, dat, ctop, Internal Routines
@subsection d
@findex d

@code{d [, @var{symbol} @dots{}] [, /fixed, /system, /zero, /local,
/context, /follow]}

Shows info about the given @code{@var{symbol}}.  Up to @code{#max_args}
symbols may be specified.

Alias: @ref{dump}

See also: @ref{atomize}, @ref{show}, @ref{#max_args}

@c -------------------------------------
@node dat, date_from_tai, d, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection dat
@findex dat

@code{dat([@var{date}] [, /valid])}

[SOFA] If @code{/valid} is not specified, then returns the time
difference ∆(at) = TAI - UTC in seconds for the given UTC
@code{@var{date}}, which must have common-calendar year, month, day in
its first dimension but can have more dimensions.

The specified day fraction, if any, is used only for dates before the
introduction of leap seconds at the end of 1971.

The returned time difference is for 00:00:00 at the beginning of the
calendar day.

Zero is returned for dates before 1960-01-01, when UTC began, and for
any case for which a valid result is not available.

The appropriate time difference for future dates is unpredictable, so
the current function cannot guarantee accurate results beyond the last
date at which its implementation was last updated.

@code{dat(/valid)} returns the greatest Julian Date for which this
function claims to provide trustworthy results.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node date_from_tai, dblarr, dat, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection date_from_tai
@findex date_from_tai

@code{date_from_tai(@var{tai} [, @var{precision}])}

Returns a string that lists the date and time that corresponds to
@code{@var{tai}} seconds after 31 December 1976 at 23:59:45 UTC (= 1
January 1977 at 0:00:00 TAI).  The @code{@var{precision}} refers to the
seconds term.

Reverse: @ref{tai_from_date}

@c -------------------------------------
@node dblarr, dblfarr, date_from_tai, Internal Routines
@subsection dblarr
@findex dblarr

@code{dblarr(@var{dimensions})}

Returns a @code{double} array of the specified @code{@var{dimensions}}.
The latter may be an array containing the dimensions, or up to
@code{#max_dims} scalar arguments, each of which contains a dimension.

See also: @ref{array}, @ref{bytarr}, @ref{fltarr}, @ref{intarr},
@ref{lonarr}, @ref{cdblarr}, @ref{#max_dims}

@c -------------------------------------
@node dblfarr, decomp, dblarr, Internal Routines
@subsection dblfarr
@findex dblfarr

@code{dblfarr(@var{file}, @var{dimensions} [, offset=@var{offset},
/readonly, /swap])}

Links a @code{double} array dimensional structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or up to @code{#max_dims}
arguments containing one dimension each.  No file checks are made.
@code{@var{offset}} indicates the length in bytes of a header after
which the array data is to be found.  It defaults to zero.  Keyword
@code{/readonly} disallows writing into the file through the file
array.  Keyword @code{/swap} indicates that the data should be
byte-swapped after reading (for input only).

See also: @ref{array}, @ref{File Arrays}, @ref{#max_dims}

@c -------------------------------------
@node decomp, decrunch, dblfarr, Internal Routines
@subsection decomp
@findex decomp

@code{decomp, @var{matrix}}

Replaces square matrix @code{@var{matrix}} with its lu decomposition.

See also: @ref{dsolve}

@c -------------------------------------
@node decrunch, default, decomp, Internal Routines
@subsection decrunch
@findex decrunch

@code{decrunch, @var{compressed}, @var{target}}

Decompresses @code{@var{compress}} into @code{@var{target}}.

Reverse: @ref{compress}

@c -------------------------------------
@node default, defined, decrunch, Internal Routines
@subsection default
@findex default

@code{default, @var{var1}, @var{value1} [, @var{var2}, @var{value2} ] @dots{}}

Assigns values @code{@var{value1}}, @code{@var{value2}} @dots{} to
variables @code{@var{var1}}, @code{@var{var2}} @dots{}, but only for
those @code{@var{value1}} etcetera that are undefined.
@code{@var{value1}} etcetera may refer to possibly undefined earlier
@code{@var{var1}}: the values to be assigned are only evaluated just
before they are to be assigned to the variables.  For instance,
@code{default,a,5,b,2*a} works fine even if both @code{a} and @code{b}
are undefined beforehand.  In this case, @code{a} gets the value @code{5}
and then @code{b} gets the value @code{10}.

See also: @ref{defined}, @ref{delete}

@c -------------------------------------
@node defined, delete, default, Internal Routines
@subsection defined
@findex defined

@code{defined(@var{var} [, /target])}

@code{defined(@var{var})} returns @code{0} if @code{@var{var}} has no
value (i.e., is of data class @code{undefined}) or, when
@code{@var{var}} is a pointer (@ref{Pointers}), if the ultimate target
of @code{@var{var}} is undefined (class @code{#class.undefined}), and
@code{1} otherwise.

Keyword @code{/target} has influence only if @code{@var{x}} is a pointer
or a parameter to a user-defined subroutine or function.  If
@code{@var{x}} is a pointer, then @code{defined(@var{x}, /target)}
yields @code{1} if the pointer has a target (even if that target is ultimately
linked to an undefined value), and @code{0} otherwise.

If @code{@var{x}} is a parameter to a user-defined subroutine or function, then
@code{defined(@var{x}, /target)} yields @code{1} if the user specified an
argument for this parameter, even if this argument is itself an
undefined variable, and @code{0} otherwise.  This property is inherited if the
parameter is used as an argument to another user-defined subroutine or
function (@ref{Arguments}).

See also: @ref{#class}, @ref{default}, @ref{delete}

@c -------------------------------------
@node delete, despike, defined, Internal Routines
@subsection delete
@findex delete

@code{delete, @var{symbol1} [, @var{symbol2} @dots{}, /pointer]}

Deletes @code{@var{symbol1}} and so on by making them undefined.  The
@code{/pointer} keyword indicates that pointers should themselves be
deleted, rather than their targets.

See also: @ref{defined}, @ref{switch}

@c -------------------------------------
@node despike, detrend, delete, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection despike
@findex despike

@code{despike(@var{x} [, frac=@var{frac}, level=@var{level},
niter=@var{niter}, spikes=@var{spikes}, rms=@var{rms}])}

This function returns a copy of two-dimensional image @code{@var{x}}
from which (radiation) spikes have been removed. 

@table @asis
@item @code{@var{frac}}
If the average of the eight nearest neighbor pixels is less than @code{1
- @var{frac})} times the central pixel value, then the pixel is declared
to be bad.  Defaults to 0.25.
@item @code{@var{level}}
An index into a sorted list of data values from neighboring pixels, to
replace bad pixels.  Only values between 0 and 15 are useful.  Defaults
to 7.
@item @code{@var{niter}}
The number of despike iterations to apply.  Defaults to 1 and must not
exceed 20.
@item @code{@var{spikes}}
If non-zero, then 8x8 cells are zapped if they contain
@code{@var{spikes}} or more spikes.  This option is intended for use
with images that were restored by jpeg decompression, and requires that
the dimensions of @code{@var{x}} be multiples of 8.
@item @code{@var{rms}}
If non-zero, then 8x8 cells are zapped if they show an rms data value
variation exceeding @code{@var{rms}}.  This option is intended for use
with images that were restored by jpeg decompression, and requires that
the dimensions of @code{@var{x}} be multiples of 8.
@end table

@c -------------------------------------
@node detrend, diagnostic, despike, Internal Routines
@subsection detrend
@findex detrend

@code{detrend(@var{x} [, @var{degree}])}

Returns @code{@var{x}} with a @code{@var{degree}}th-degree polynomial
fit to it subtracted.

See also: @ref{trend}

@c -------------------------------------
@node diagnostic, differ, detrend, Internal Routines
@subsection diagnostic
@findex diagnostic

@code{diagnostic [, @var{file}]}

Opens file @code{@var{file}} to accept diagnostic output.
@code{@var{file}} defaults to @file{diagnostic.LUX}.  This routine is
only available if your computer platform supports it.

See also: @ref{Diagnostic Output}, @ref{record}

@c -------------------------------------
@node differ, dilate, diagnostic, Internal Routines
@subsection differ
@findex differ

@code{differ(@var{x} [, @var{axis}, @var{order}] [, /central])}

Returns the running difference of @code{@var{x}}: each element of the
result contains the difference between the corresponding element of
@code{@var{x}} and its |@code{@var{order}}|-th predecessor.  The
predecessors of the first elements are taken to be zero.  If
@code{@var{axis}} is not specified (or negative), then @code{@var{x}} is
treated as a 1d array.  Otherwise, differencing is done along the
indicated axis (dimension), and is started over for each of the other
dimensions.  If @code{@var{order}} is positive, then the unavailable
(first) values of each result vector are set to zero; if negative, then
the value from the original is copied (i.e. reverse of @code{runsum}).
The default @code{@var{order}} is 1.  The @code{/central} keyword
indicates that central differencing is performed, i.e. the differences
are put in the middle of the range instead of at the end.  For central
differencing, the border values are always set to zero.

Both @code{@var{axis}} and @code{@var{order}} may contain multiple
elements, in which case a differencing pass is performed for each of the
elements, taken the next available element from both.  If
@code{@var{order}} has only one element but @code{@var{axis}} has more
than one, then the same value of @code{@var{order}} is used during each
pass.  Otherwise, both arguments must contain zero, one, or equal
numbers of elements.

Reverse: @ref{runsum}

@c -------------------------------------
@node dilate, dilatedir, differ, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection dilate
@findex dilate

@code{dilate(@var{image})}

Returns a copy of the two-dimensional numerical array @code{@var{image}}
which is dilated using a 3 by 3 square mask.  Only the properties "equal
to zero" and "unequal to zero" of the data values are regarded.  If any
of the nine data elements centered on the element of interest are
unequal to zero, then a 1 is returned for the element of interest, and a
0 otherwise.  On the one-element-wide edges a 1 is returned if the
element of interest is unequal to zero, or a 0 otherwise.

See also: @ref{erode}

@c -------------------------------------
@node dilatedir, dimen, dilate, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection dilatedir
@findex dilatedir

@c -------------------------------------
@node dimen, disablenewline, dilatedir, Internal Routines
@subsection dimen
@findex dimen

@code{dimen(@var{array} [, @var{axis}])}

Returns the (sizes of the) dimensions of @code{@var{x}} by default (if
@code{@var{x}} is a scalar, scalar pointer, array, complex array, file
array, or string).  If @code{@var{axes}} is specified, then it is taken
to contain the numbers of the dimensions for which the sizes are to be
returned.  If a single number is returned, then it is returned as a
scalar; otherwise an array is returned.

See also @ref{num_dim}, @ref{num_elem}, @ref{symclass}

@c -------------------------------------
@node disablenewline, distarr, dimen, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection disablenewline
@findex disablenewline

@code{disablenewline}

Ordinarily, LUX interprets a newline as the (forced) end of a statement
in many cases when reading input from the keyboard.  The
@code{disablenewline} statement instructs LUX to disable this.  In this
case, LUX will continue requesting more input until it can unambiguously
figure out where a previous statement ends without regards to newlines.

Reverse: @ref{enablenewline}

See also: @ref{Line Breaks}

@c -------------------------------------
@node distarr, distr, disablenewline, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection distarr
@findex distarr

@code{distarr(@var{dims} [, @var{center}, @var{stretch}])}

Returns an array with dimensions given in @code{@var{dims}} in which
each element contains the distance of a point with its coordinates to
the point whose coordinates are specified in @code{@var{center}}, or to
(0,0) if no @code{@var{center}} was specified.  @code{@var{stretch}}, if
specified, contains a factor for each dimensions by which the distance
in that dimensions must be multiplied.


@c -------------------------------------
@node distr, dmap, distarr, Internal Routines
@subsection distr
@findex distr

@code{distr, @var{target}, @var{bins}, @var{values}}

@code{distr(@var{bins}, @var{values} [, /ignorelimit, /increaselimit])}

Distributes the @code{@var{values}} over the corresponding
@code{@var{bins}}.  The function returns an array containing the
gathered totals in bins 0 through @code{max(@var{values})}, unless some
of the bin numbers in @code{@var{bins}} are negative, in which case the
first element contains the data for the most negative bin.  If
@code{values} contains only 1s, then @code{distr(bins,values)} equals
@code{hist(bins)}.  The subroutine adds the values to the proper bins of
@code{@var{target}}.

The function form does not allow a value range over @code{!maxhistsize}
(measured from the most negative value or zero to the maximum value),
unless one of the keywords is specified.  @code{/ignorelimit} just
ignores the value of @code{!maxhistsize}, and @code{/increaselimit}
increases its value to accomodate the current (possibly very large!)
range of values.

See also: @ref{hist}, @ref{!maxhistsize}

@c -------------------------------------
@node dmap, doub, distr, Internal Routines
@subsection dmap
@findex dmap

@code{dmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{double} array, i.e. each
eight bytes of @code{@var{x}} are transformed into one @code{double}
number.

See also: @ref{smap}, @ref{bmap}, @ref{wmap}, @ref{lmap},
@ref{fmap}, @ref{doub}

@c -------------------------------------
@node doub, double, dmap, Internal Routines
@subsection doub
@findex doub

@code{doub(@var{x})}

@code{doub, @var{x}}

Converts @code{@var{x}} value-by-value to data type @code{double}.  The
function returns a converted copy and leaves @code{@var{x}} itself
alone.  The subroutine modifies @code{@var{x}} itself.

Alias: @ref{double}

See also: @ref{Number Conversion}

@c -------------------------------------
@node double, dsmooth, doub, Internal Routines
@subsection double
@findex double

@code{double(@var{x})}

@code{double, @var{x}}

Converts @code{@var{x}} value-by-value to data type @code{double}.  The
function returns a converted copy and leaves @code{@var{x}} itself
alone.  The subroutine modifies @code{@var{x}} itself.

Alias: @ref{doub}

See also: @ref{Number Conversion}

@c -------------------------------------
@node dsmooth, dsolve, double, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection dsmooth
@findex dsmooth

@code{dsmooth(@var{image}, @var{vx}, @var{vy} [, /boxcar, /gaussian,
/onesided, /twosided, /total, /straight])}

Returns a directionally smoothed version of @code{@var{image}}.
@code{@var{vx}} and @code{@var{vy}} contain the two coordinates of the
@emph{stream vector} at each point.  The direction of the stream vector
is the direction of the streamline through the point.  For each point, a
weighted average or total is returned of data points on the streamline
through that point, or, if @code{/straight} is specified, a weighted
average or total of data points on the straight line which is tangential
to the streamline through that point.  The smoothing width is taken from
the length of the stream vector.

By default, or if @code{/onesided} is selected, then the smoothing
interval extends, for each point, to only one side of that point
(determined by the direction of the stream vector).  If @code{/twosided}
is selected, then the smoothing interval extends in both directions from
the starting point (determined by the direction of the stream vector and
the exactly opposite direction).

Only the smoothing width at the point for which the weighted average is
determined matters to the result at that point.  By default (or if
@code{/boxcar} is specified), the smoothing is of the boxcar type, and
the total length of the boxcar is equal to the length of the stream
vector (if @code{/twosided} is specified or implied), or to one half of
the length of the stream vector (if @code{/onesided} is specified).  If
@code{/gaussian} is specified, then the smoothing is gaussian instead,
with the length of the stream vector indicating the FWHM of the gaussian
kernel.

By default, weighted averages are returned.  If @code{/total} is
specified, then weighted totals are returned instead.

@code{lsmooth} is very similar to @code{dsmooth}, except that in
@code{lsmooth} a particular source value is spread along its associated
streamline (or tangent), whereas in @code{dsmooth} a particular target
value is constructed from source values taken from its associated
streamline (or tangent).

See also: @ref{esmooth}, @ref{gsmooth}, @ref{lsmooth}, @ref{smooth}

@c -------------------------------------
@node dsolve, dsum, dsmooth, Internal Routines
@subsection dsolve
@findex dsolve

@code{dsolve, @var{matrix}, @var{vector}}

Solves a linear set of equations.  @code{@var{matrix}} must contain the
lu decomposition (see @code{decomp}) of the matrix describing the
dependent component of the set of equations.  @code{@var{v}} must
contain the vector to be matched.  It will be overwritten by the
solution vector.

See also: @ref{decomp}

@c -------------------------------------
@node dsum, dtdb, dsolve, Internal Routines
@subsection dsum
@findex dsum

@code{dsum(@var{x} [, @var{mode}, power=@var{power},
weights=@var{weights}, /keepdims])}

An alias of @code{total(..., /double)}.

See also: @ref{fsum}, @ref{mean}, @ref{total}

@c -------------------------------------
@node dtdb, dump, dsum, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection dtdb
@findex dtdb

@code{dtdb(@var{jdtt}, @var{ut}, @var{elong}, @var{u}, @var{v})}

[SOFA] Returns an approximation of TDB-TT in seconds, the difference
between barycentric dynamical time and terrestrial time, for an
observer on the Earth. @code{@var{jdtt}} is the Julian Date in TDB or
TT, @code{@var{ut}} is the Universal Time measured in fractions of a
day, @code{@var{elong}} is the east longitude in radians,
@code{@var{u}} is the distance in km from the Earth spin axis, and
@code{@var{v}} is the distance in km north of the equatorial plane.
@code{@var{jdtt}} and @code{@var{ut}} should have the same
dimensions.  The remaining parameters must be @code{scalar}s or
@code{array}s with exactly one element.

This function is merely a model; numerical integration of solar-system
ephemeris is the definitive method for predicting the relationship
between tcg and tcb, and hence between TT and TDB.  The absolute
accuracy of the sofa routine underlying the present LUX function is
better than 3 ns during the interval 1950-2050.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node dump, dump_lun, dtdb, Internal Routines
@subsection dump
@findex dump

@code{dump [, @var{symbol} @dots{} ] [, /fixed, /system, /zero, /local,
/context, /follow, /full]}

Shows info about the given @code{@var{symbol}}(s).  By default, info on
all named symbols except constants (predefined @code{#name}), system
variables (predefined @code{!name}, and variables local to subroutines
and functions is displayed.

@table @code
@item /fixed
display all constants (predefined @code{#name}).
@item /system
display all system variables (predefined @code{!name}).
@item /zero
display all new zero-context variables.
@item /local
display all new local variables.
@item /context
the argument (@code{@var{symbol}}) is the context number whose variables are to
be displayed.
@item /follow
evaluate the arguments and dump the results.  If @code{/follow} is not
specified, then the arguments are not evaluated and the top-level
structure is dumped.
@item /full
show all elements of multi-element symbols.  By default, element lists
are truncated.
@end table

The displayed information looks something like this:

@example
 186          x array , long, # elem. = 3, (3)
 187          y string, length: 4, value = 'name'
@end example

First comes the symbol number, then the name (if any), the data class,
and then some class-dependent information which generally includes the
size of the variable.  In this case, the array @code{x} is of type
@code{long} with 3 elements and a single dimension equal to 3.  The
string @code{y} has a length of 4 characters and value
@code{'name'}.

If any pointers (@ref{Pointers}) are encountered that point at
themselves, then these are silently rendered @code{undefined} instead.

Alias: @ref{d}

See also: @ref{show}, @ref{dump_stack}, @ref{atomize}

@c -------------------------------------
@node dump_lun, dump_stack, dump, Internal Routines
@subsection dump_lun
@findex dump_lun

@code{dump_lun}

Shows the files associated with all logical units, in the format
@example
lun type file
  1    r test.LUX
@end example
The type can be @code{r} for read-only (@ref{openr}), or @code{w/u} for
write/update (@ref{openw}, @ref{openu}).

@comment  node-name,  next,  previous,  up
@c -------------------------------------
@node dump_stack, easterdate, dump_lun, Internal Routines
@subsection dump_stack
@findex dump_stack

@code{dump_stack}

Shows all variables currently on the variables stack @code{#stack} in
the same format as is used in @code{dump}.  The displayed variable names
are the names of the variables that were pushed on the stack.

See also: @ref{push}, @ref{pop}, @ref{dump}, @ref{#stack}

@c -------------------------------------
@node easterdate, echo, dump_stack, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection easterdate
@findex easterdate

@code{easterdate(@var{years})}

Returns the date of Easter in the common Western calendar for the
indicated @code{@var{years}} (an array).  The result is an array with
three elements in its first dimension, in the order: year, month, day.

See also: @ref{calendar}

@c -------------------------------------
@node echo, ee00, easterdate, Internal Routines
@subsection echo
@findex echo

@code{echo}

Switches on echoing of code that is being compiled.

Reverse: @ref{noecho}

@c -------------------------------------
@node ee00, ee00a, echo, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ee00
@findex ee00

@code{ee00(@var{jdtt}, @var{epsa}, @var{dpsi})}

[SOFA] Returns the equation of the equinoxes (IAU 2000) given the TT
Julian Date @code{@var{jdtt}}, the mean obliquity @code{@var{epsa}}
(radians, mean of date), and the nutation in longitude
@code{@var{epsa}} (in radians).  All three parameters must have the
same dimensions.  The returned value has those same dimensions, too,
and is measured in radians.

Greenwich apparent sidereal time (gast) is equal to Greenwish mean
sidereal time (gmst) plus the equation of the equinoxes.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ee00a, ee00b, ee00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ee00a
@findex ee00a

@code{ee00a(@var{jdtt})}

[SOFA] Returns the equation of the equinoxes compatible with IAU 2000
resolutions, for the specified TT Julian Date @code{@var{jdtt}}.  The
returned value has the same dimensions as the parameter and is
measured in radians.

Greenwich apparent sidereal time (gast) is equal to Greenwish mean
sidereal time (gmst) plus the equation of the equinoxes.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ee00b, ee06a, ee00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ee00b
@findex ee00b

@code{ee00b(@var{jdtt})}

[SOFA] Returns the equation of the equinoxes compatible with IAU 2000
resolutions but using the truncated nutation model IAU 2000B, for the
specified TT Julian Date @code{@var{jdtt}}.  The returned value has
the same dimensions as the parameter and is measured in radians.

Greenwich apparent sidereal time (gast) is equal to Greenwish mean
sidereal time (gmst) plus the equation of the equinoxes.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ee06a, eect00, ee00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ee06a
@findex ee06a

@code{ee06a(@var{jdtt})}

[SOFA] Returns the equation of the equinoxes compatible with IAU 2000
resolutions and IAU 2006/2000A precession-nutation, for the specified
TT Julian Date @code{@var{jdtt}}.  The returned value has the same
dimensions as the parameter and is measured in radians.

Greenwich apparent sidereal time (gast) is equal to Greenwish mean
sidereal time (gmst) plus the equation of the equinoxes.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node eect00, eform, ee06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eect00
@findex eect00

@code{eect00(@var{jdtt})}

[SOFA] Returns the equation of the equinoxes complementary terms,
consistent with IAU 2000 resolutions, for the specified TT Julian Date
@code{@var{jdtt}}.  The result has the same dimensions as the
parameter and is measured in radians.

The Greenwich apparent sidereal time (gast) is equal to the Greenwich
mean standard time (gmst) plus the equation of the equinoxes, and that
equation of the equinoxes is equal to dpsi*cos(eps) plus the
complementary terms, where dpsi is the nutation in longitude and eps
is the obliquity of date.  The complementary terms are needed to make
UT1 more regular.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node eform, enablenewline, eect00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eform
@findex eform

@code{eform(@var{ellid})}

[SOFA] Returns the equatorial radius (in meters) and flattening of the
Earth reference ellipsoid identified by @code{@var{ellid}}, which must
be a @code{scalar} or single-element @code{array}: 1 = wgs84, 2 =
grs80, 3 = wgs72.  Unsupported ellipsoid identifiers yield radius and
flattening equal to 0.

@c -------------------------------------
@node enablenewline, endian, eform, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection enablenewline
@findex enablenewline

@code{enablenewline [, /all]}

The @code{enablenewline} command negates the effect of a single
@code{disablenewline} command, which instructed LUX to ignore newlines
when interpreting user input of commands at the keyboard.  As long as at
least one @code{enablenewline} command has not been negated, LUX
persists in ignoring newlines.  You can negate all active
@code{disablenewline} command with the command @code{enablenewline,
/all}.

Reverse: @ref{disablenewline}

See also: @ref{Line Breaks}
@c -------------------------------------
@node endian, enhanceimage, enablenewline, Internal Routines
@subsection endian
@findex endian

@code{endian,@var{x}}

Swap bytes in each element of numerical array or scalar @code{@var{x}}
according to its data type in order to switch between littleendian and
bigendian representation of numbers.  In @code{float} and @code{long}
numbers, bytes 0 and 3 are swapped, and bytes 1 and 2.  In a
@code{double} number, bytes 0 and 7 are swapped, and also bytes 1 and 6,
bytes 2 and 5, and bytes 3 and 4.  In a @code{word} number, bytes 0 and
1 are swapped.  A @code{byte} number is left unchanged.

@c -------------------------------------
@node enhanceimage, eo06a, endian, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection enhanceimage
@findex enhanceimage

@code{enhanceimage(@var{image} [, part=@var{part},
target=@var{target}, /symmetric])}

Enhances the @code{@var{image}} by a process similar to but usually
not quite the same as histogram equalization.  @code{@var{image}} must
be a @code{byte} array of at least two dimensions, of which the first
one is taken to represent the different color channels and the others
are taken to represent positions.  (This is the format returned, for
example, by @code{jpegread}.)

Intensity values are adjusted to make the intensity histogram be
closer to a selected 'ideal curve'.  All color channels of a given
pixel are adjusted by the same factor.  If @code{/symmetric} is not
specified (or if @code{/nosymmetric} is specified) then adjustment is
only done for those pixels for which an intensity increase is
indicated.

@code{@var{part}} indicates which part of the adjustment is to be made
and should be a scalar.  It should ordinarily lie between 0
(exclusive) and 1, and defaults to 1, which means to apply the full
adjustment.  0 means to apply no adjustment.

@code{@var{target}} determines the 'ideal curve' to which to adjust.
It indicates the relative intensity of the target median value of all
intensities.  It should ordinarily lie between 0 (black) and 1 (full
brightness), and values near 0.5 are usually the most appropriate.  It
defaults to 100/256.

@code{enhanceimage(@var{image}, target=0.5, /symmetric)} provides
histogram equalization (on large scales in the histogram).

See also: @ref{enhanceimage}

@c -------------------------------------
@node eo06a, eors, enhanceimage, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eo06a
@findex eo06a

@code{eo06a(@var{jdtt})}

[SOFA] Returns the equation of the origins measured in radians, using
the IAU 2006 precession and IAU 2000A nutation models, for the given
TT Julian Dates @code{@var{jdtt}}.  The returned value has the same
dimensions as the parameter.

The equation of the origins is the distance between the true equinox
and the celestial intermediate origin, or, equivalently, between the
Earth rotation angle and Greenwich apparent sidereal time.  It is
equal to the precession in right ascension since J2000.0 plus the
equation of the equinoxes including the small correction terms.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node eors, epb, eo06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eors
@findex eors

@code{eors(@var{rnpb}, @var{s})}

[SOFA] Returns the equation of the origins measured in radians, given
the classical nutation-precession-bias matrix @code{@var{rnpb}} and
CIO locator @code{@var{s}}.  @code{@var{rnpb}} must have its first two
dimensions equal to 3.  @code{@var{s}} has the same dimensions as
@code{@var{rnpb}} except that it lacks those first two dimensions
equal to 3.

The equation of the origins is the distance between the true equinox
and the celestial intermediate origin, or, equivalently, between the
Earth rotation angle and Greenwich apparent sidereal time.  It is
equal to the precession in right ascension since J2000.0 plus the
equation of the equinoxes including the small correction terms.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node epb, epb2jd, eors, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection epb
@findex epb

@code{epb(@var{jd})}

[SOFA] Returns the Besselian epoch (year) corresponding to Julian Date
@code{@var{jd}}.  The result has the same dimensions as
@code{@var{jd}}.

@c -------------------------------------
@node epb2jd, epj, epb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection epb2jd
@findex epb2jd

@code{epb2jd(@var{bepoch})}

[SOFA] Returns the Julian Date corresponding to Besselian epoch
@code{@var{bepoch}} (e.g., 1957.3).  The result has the same
dimensions as @code{@var{bepoch}}.

@c -------------------------------------
@node epj, epj2jd, epb2jd, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection epj
@findex epj

@code{epj(@var{jd})}

[SOFA] Returns the Julian epoch (year) corresponding to Julian Date
@code{@var{jd}}.  The result has the same dimensions as
@code{@var{jd}}.

Opposite: @ref{epj2jd}

@c -------------------------------------
@node epj2jd, epv00, epj, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection epj2jd
@findex epj2jd

@code{epj2jd(@var{jepoch})}

[SOFA] Returns the Julian Date corresponding to Julian epoch
@code{@var{jepoch}} (e.g., 1957.3).  The result has the same
dimensions as @code{@var{jepoch}}

Opposite: @ref{epj}

@c -------------------------------------
@node epv00, eq, epj2jd, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection epv00
@findex epv00

@code{epv00, @var{jdtdb}, @var{pvh}, @var{pvb}}

[SOFA] Returns the Earth position and velocity for the specified TDB
Julian Dates @code{@var{jdtdb}} (for most applications, TT can also be
used instead of TDB), in the heliocentric (@code{@var{pvh}}) and
barycentric (@code{@var{pvb}}) coordinate systems, with respect to the
Barycentric Celestial Reference System.  @code{@var{pvh}(0,*)} =
heliocentric position (AU), @code{@var{pvh}(1,*)} = heliocentric
velocity (AU/d), @code{@var{pvb}(0,*)} = barycentric position (AU),
@code{@var{pvb}(1,*)} = barycentric velocity (AU/d).  @code{@var{pvh}}
and @code{@var{pvb}} have the same dimensions as @code{@var{jdtdb}}
but with an extra dimension equal to 2 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node eq, eqeq94, epv00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eq
@findex eq

@code{@var{x} eq @code{@var{y}}}

a binary logical operator that works on numerical or string arguments
@code{@var{x}} and @code{@var{y}} and that returns 1 for every element
of @code{@var{x}} that is equal to the corresponding element of
@code{@var{y}}, and 0 otherwise.  String arguments yield 1 if all of
their characters are equal, and 0 otherwise.

See also: @ref{ne}, @ref{gt}, @ref{lt}, @ref{ge}, @ref{le}

@c -------------------------------------
@node eqeq94, equivalence, eq, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eqeq94
@findex eqeq94

@code{eqeq94(@var{jdtdb})}

[SOFA] Returns the equation of the equinoxes for the given TDB Julian
Date @code{@var{jdtdb}}, according to the IAU 1994 model.  The result
has the same dimensions as @code{@var{jdtdb}}.

Greenwich apparent sidereal time (gast) is equal to Greenwish mean
sidereal time (gmst) plus the equation of the equinoxes.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node equivalence, era00, eqeq94, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection equivalence
@findex equivalence

@code{equivalence(@var{e1}, @var{e2})}

Returns equivalence classes.  In arrays @code{@var{e1}} and
@code{@var{e2}} (which are transformed to type @code{long}) the user
specifies which elements of a given set belong to the same equivalence
class: elements @code{@var{e1}(@var{i})} and @code{@var{e2}(@var{i})}
are in the same equivalence class for all @code{@var{i}}.  The result of
this function is an array with the same dimensional structure as
@code{@var{e1}} in which each element contains the lowest element number
in the class that the current element is in.

For example, if @code{e1 = [2,4,6,3]} and @code{e2 = [3,5,7,6]}, then
@code{equivalence(e1, e2)} returns @code{[2,4,2,2]}, indicating that
elements 2, 3, 6, and 7 belong to one equivalence class (with element 2
having the smallest element number) and elements 4 and 5 to another
(with element 4 the smallest).

@c -------------------------------------
@node era00, erase, equivalence, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection era00
@findex era00

@code{era00(@var{jdut1})}

[SOFA] Returns the Earth rotation angle for the given UT1 Julian Date
@code{@var{jdut1}}, according to the IAU 2000 model.  The result has
the same dimensions as @code{@var{jdut1}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node erase, erf, era00, Internal Routines
@subsection erase
@findex erase

@code{erase [, @var{window}, @var{x}, @var{y}, @var{w}, @var{h}] [,
/dev, /dvi, /img, /plt, /rim, /rpl] [, /screen, /postscript]}

Erases (part of) a LUX window (if @code{/screen} is specified or
@code{!pdev} is equal to zero), or starts a new page in the Postscript
output file with name @code{!ps_file} (if @code{@var{/postscript}} is
specified or @code{!pdev} is equal to 1).

If the action is in the Postscript file, then all other arguments are
ignored.  Otherwise, the erasure occurs in window @code{@var{window}}
(defaults to @code{!window} -- commonly the last used window) and is
optionally restricted to the window part starting at coordinates
@code{(@var{x}, @var{y})} with width @code{@var{w}} and height
@code{@var{h}}, all measured in the coordinate system indicated by the
keywords, or in @code{dev} coordinated by default.

See also: @ref{Screen Coordinates}, @ref{!pdev}, @ref{!window},
@ref{!ps_file} 

@c -------------------------------------
@node erf, erfc, erase, Internal Routines
@subsection erf
@findex erf

@code{erf(@var{x})}

Returns the value of the error function at ordinate @code{@var{x}},
which is the integral of @code{2*exp(-@var{y}^2)/sqrt(#pi)} for
@code{@var{y}} between minus infinity and @code{@var{x}}.  Ranges
between @code{-1} and @code{+1}.  The chance of exceeding value
@code{@var{v}} when drawing from a standard normal distribution is
@code{0.5 - 0.5*erf(@var{v}/sqrt(2))}.

See also: @ref{erfc}

@c -------------------------------------
@node erfc, erode, erf, Internal Routines
@subsection erfc
@findex erfc

@code{erfc(@var{x})}

Returns one minus the value of the error function at ordinate
@code{@var{x}}.  Ranges between 0 and 2.

See also: @ref{erf}

@c -------------------------------------
@node erode, erodedir, erfc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection erode
@findex erode

@code{erode(@var{image} [, /zeroedge])}

Returns a copy of the two-dimensional numerical array @code{@var{image}}
which is eroded using a 3 by 3 square mask.  Only the properties "equal
to zero" and "unequal to zero" of the data values are regarded.  If any
of the nine data elements centered on the element of interest are equal
to zero, then a 0 is returned for the element of interest, and a 1
otherwise.  On the one-element-wide edges a 1 is returned if the element
of interest is unequal to zero, or a 0 otherwise, except if
@code{/zeroedge} is specified, in which case the edges are always set to
zero. 

See also: @ref{dilate}

@c -------------------------------------
@node erodedir, error, erode, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection erodedir
@findex erodedir

@c -------------------------------------
@node error, esegment, erodedir, Internal Routines
@subsection error
@findex error

@code{error, @var{text} [, @var{symbol}]}

Generates an error with error message @code{@var{text}}, pointing at
symbol @code{@var{symbol}}.

@c -------------------------------------
@node esegment, esmooth, error, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection esegment
@findex esegment

@code{esegment(@var{data} [, sign=@var{sign}, diagonal=@var{diagonal},
threshold=@var{threshold}])}

Extreme-based data segmentation in multiple dimensions.
@code{esegment(data)} returns the number of directions through each
element of @code{@var{data}} in which the element is a local maximum
compared to its immediate neighbors in each direction.  For example, in
two dimensions we can regard the data as an altitude map, and then this
function checks if the central value exceeds the two adjacent values on
opposite sides of the central value in the n-s direction, the e-w
direction, the ne-sw direction, and the nw-se direction.  The number of
directions to consider per data element in an @code{n}-dimensional array
is equal to @code{m = (3^n - 1)/2}.

If @code{@var{diagonal}} is specified, then it must be an array with one
element per dimension of @code{@var{data}}.  The elements that are equal
to 0 indicate which dimensions are not checked.  The elements that are
equal to 1 and 2 (after conversion to type @code{long}) indicate in
which dimensions checking is performed.  The elements that are equal to
2 indicate in which dimensions checked directions may be diagonal.  All
such directions either have non-zero coordinates only in those
dimensions, or have only a single non-zero coordinate (i.e., a
non-diagnonal direction).  Only approved directions are checked.  For
instance, if @code{@var{diagonal} = [2,2,0]}, then the only checked
directions that have a non-zero third coordinate are those that are
along the 3rd axis.  If @code{@var{diagonal} = [1,1,0]}, then only
directions along the first two axes are checked.  If
@code{@var{diagonal}} contains @code{n1} ones and @code{n2} twos, then
the number of directions per data element in @code{n} dimensions that
will be considered is equal to @code{m = (3^n2 - 1)/2 + n1}.

If @code{@var{sign}} (when converted to type @code{long}) is non-zero,
then minima are sought.  If integer @code{@var{sign}} is negative, then
maxima are sought.  By default, a value of @code{+1} is assumed for
@code{@var{sign}}.

Zeros are returned on the 1-px-wide edges of the result, because not
enough data is available there to determine the extremeness in all
directions.

See also: @ref{segment}

@c -------------------------------------
@node esmooth, eval, esegment, Internal Routines
@subsection esmooth
@findex esmooth

@code{esmooth(@var{x} [, @var{order}, @var{axis}])}

Exponential asymmetric smoothing.  Only elements before and including
the current element enter into the smooth result corresponding to the
current element.  The weight of each element drops exponentially with
its distance to the current element.  The decay length is
@code{@var{order}} and defaults to 3.  The dimension along which
smoothing occurs is @code{@var{axis}}.  If @code{@var{axis}} is not
specified, then @code{@var{x}} is treated as a one-dimensional array.

See also: @ref{smooth}, @ref{gsmooth}, @ref{runsum}, @ref{runcum}

@c -------------------------------------
@node eval, eventname, esmooth, Internal Routines
@subsection eval
@findex eval

@code{eval(@var{x} [, @var{n}, /allnumber])}

Compiles and evaluates a string, interpreting it as LUX code.
Non-strings are just evaluated.  If @code{@var{n}} and/or keyword
@code{/allnumber} are specified, then numbers are read from
@code{@var{x}}.  @code{@var{n}} indicates how many numbers to read from
@code{@var{x}}, and @code{/allnumber} indicates that all numbers are to
be read.  The read numbers are returned in a scalar (if one number) or
array (if more than one number), and if no number is found then a zero
is returned for it.

See also: @ref{execute}

@c -------------------------------------
@node eventname, execute, eval, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection eventname
@findex eventname

@code{eventname(@var{event})}

@code{[@ref{x11}]} Returns the name of event number @code{@var{event}}.

See also: @ref{xregister}, @ref{!eventtype}

@c -------------------------------------
@node execute, exit, eventname, Internal Routines
@subsection execute
@findex execute

@code{execute, @var{string} [, /main]}

Compiles and executes string @code{@var{string}}, interpreting it as LUX
code.  If keyword @code{/main} is specified, then the execut
on is
performed at the main execution level (context zero), otherwise in the
current context.

See also: @ref{eval}

@c -------------------------------------
@node exit, exp, execute, Internal Routines
@subsection exit
@findex exit

@code{exit [, @var{status}]}

Exits LUX with @code{@var{status}}.

@c -------------------------------------
@node exp, expand, exit, Internal Routines
@subsection exp
@findex exp

@code{exp(@var{x})}

Returns the exponential (natural antilogarithm, base @code{#e}) of
@code{@var{x}}.

Reverse: @ref{alog}

See also: @ref{#e}, @ref{expm1}

@c -------------------------------------
@node expand, expm1, exp, Internal Routines
@subsection expand
@findex expand

@code{expand(@var{array}, @var{xscale} [, @var{yscale}, @var{smooth}])}

Returns an expanded version of 1d or 2D @code{@var{array}}.
@code{@var{xscale}} is the magnification in the 1st dimension (may be
non-integer; may be < 1).  @code{@var{yscale}} is the magnification in
2nd dimension (defaults to @code{@var{xscale}}).  @code{@var{smooth}} is
the smoothing type: 0: bilinear interpolation; else: nearest neighbor
(defaults to @code{!tvsmt}).  If the scale factors are 1 for both
dimensions, then @code{array} is returned immediately.

See also: @ref{compress}, @ref{regrid}, @ref{regrid3}, @ref{!tvsmt}

@c -------------------------------------
@node expm1, f0h, expand, Internal Routines
@subsection expm1
@findex expm1

@code{expm1(@var{x})}

Returns the exponential (natural antilogarithm, base @code{#e}) of
@code{@var{x}}, minus 1.

Reverse: @ref{log1p}

See also: @ref{#e}, @ref{exp}
@c -------------------------------------
@node f0h, f0head, expm1, Internal Routines
@subsection f0h
@findex f0h

@code{f0h, @var{file} [, @var{header}]}

Reads header string of fz disk @code{@var{file}}, and stores it in
@code{@var{header}} (if that is specified) or displays it.

See also: @ref{f0read}, @ref{f0write}, @ref{fcwrite}

Alias: @ref{f0head}, @ref{fzh}, @ref{fzhead}

@c -------------------------------------
@node f0head, f0r, f0h, Internal Routines
@subsection f0head
@findex f0head

@code{f0head, @var{file} [, @var{header}]}

Reads header string of fz disk @code{@var{file}}, and stores it in
@code{@var{header}} (if that is specified) or displays it.

See also: @ref{f0read}, @ref{f0write}, @ref{fcwrite}

Alias: @ref{f0h}, @ref{fzh}, @ref{fzhead}

@c -------------------------------------
@node f0r, f0read, f0head, Internal Routines
@subsection f0r
@findex f0r

@code{f0r(@var{var}, @var{file} [, @var{header}, /printheader])}

@code{f0r, @var{var}, @var{file} [, @var{header}, /printheader]}

Retrieves @code{@var{var}} and @code{@var{header}} from (compressed or
uncompressed) fz @code{@var{file}}.  If @code{@var{header}} is not
specified, then the header is displayed on the screen, unless
@code{/noprintheader} was specified.  The function form returns 1 if
successful, otherwise 0.

See also: @ref{fzhead}, @ref{fzwrite}, @ref{fcwrite}

Alias: @ref{fzread}, @ref{fzr}, @ref{f0read}

@c -------------------------------------
@node f0read, f0w, f0r, Internal Routines
@subsection f0read
@findex f0read

@code{f0read, @var{var}, @var{file} [, @var{header}, /printheader]}

Retrieves @code{@var{var}} and @code{@var{header}} from (compressed or
uncompressed) fz @code{@var{file}}.  If @code{@var{header}} is not
specified, then the header is displayed on the screen, unless
@code{/noprintheader} was specified.  The function form returns 1 if
successful, otherwise 0.

See also: @ref{fzhead}, @ref{fzwrite}, @ref{fcwrite}

Alias: @ref{fzr}, @ref{fzr}, @ref{f0read}

@c -------------------------------------
@node f0w, f0write, f0read, Internal Routines
@subsection f0w
@findex f0w

@code{f0w, @var{var}, @var{file} [, @var{header}]}

Writes @code{@var{var}} and @code{@var{header}} string into uncompressed
fz @code{@var{file}}.

See also: @ref{fcwrite}, @ref{fzread}, @ref{fzhead}

Alias: @ref{fzwrite}, @ref{fzw}, @ref{f0write}

@c -------------------------------------
@node f0write, fad03, f0w, Internal Routines
@subsection f0write
@findex f0write

@code{f0write, @var{var}, @var{file} [, @var{header}]}

Writes @code{@var{var}} and @code{@var{header}} string into uncompressed
fz @code{@var{file}}.

See also: @ref{fcwrite}, @ref{fzread}, @ref{fzhead}

Alias: @ref{fzwrite}, @ref{fzw}, @ref{f0w}

@c -------------------------------------
@node fad03, fade, f0write, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fad03
@findex fad03

@code{fad03(@var{tc})}

[SOFA] Returns the mean elongation of the Moon from the Sun in
radians, a fundamental argument according to the iers conventions of
2003, as a function of the number @code{@var{tc}} of Julian centuries
since J2000.0 TDB.  It makes no practical difference if
@code{@var{tc}} is measured since J2000.0 TT instead.  The result has
the same dimensions as @code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fade, fade_init, fad03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fade
@findex fade

@code{fade, @var{weight}, @var{result}}

Returns a weighted average of images indicated with @code{fade_init}.
The weight of the first image is taken as @code{@var{weight}} (from 0 to
255), and the weight of the second image is taken as @code{255 -
@var{weight}}.  The resulting weighted average is returned in
@code{@var{result}}.

See also: @ref{fade_init}

@c -------------------------------------
@node fade_init, fae03, fade, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fade_init
@findex fade_init

@code{fade_init, @var{im1}, @var{im2}}

Initializes for calculations of weighted averages of @code{byte} images
@code{@var{im1}} and @code{@var{im2}}.  The fade result is obtained with
routine @code{fade}.

See also: @ref{fade}

@c -------------------------------------
@node fae03, faf03, fade_init, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fae03
@findex fae03

@code{fae03(@var{tc})}

[SOFA] Returns the mean longitude of the Earth in radians, a
fundamental argument according to the iers conventions of 2003, as a
function of the number @code{@var{tc}} of Julian centuries since
J2000.0 TDB.  It makes no practical difference if @code{@var{tc}} is
measured since J2000.0 TT instead.  The result has the same dimensions
as @code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node faf03, faju03, fae03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection faf03
@findex faf03

@code{faf03(@var{tc})}

[SOFA] Returns the mean longitude of the Moon minus the mean longitude
of the ascending node in radians, a fundamental argument according to
the iers conventions of 2003, as a function of the number
@code{@var{tc}} of Julian centuries since J2000.0 TDB.  It makes no
practical difference if @code{@var{tc}} is measured since J2000.0 TT
instead.  The result has the same dimensions as @code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node faju03, fal03, faf03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection faju03
@findex faju03

@code{faju03(@var{tc})}

[SOFA] Returns the mean longitude of Jupiter in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fal03, falp03, faju03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fal03
@findex fal03

@code{fal03(@var{tc})}

[SOFA] Returns the mean anomaly of the Moon in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node falp03, fama03, fal03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection falp03
@findex falp03

@code{falp03(@var{tc})}

[SOFA] Returns the mean anomaly of the Sun in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fama03, fame03, falp03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fama03
@findex fama03

@code{fama03(@var{tc})}

[SOFA] Returns the mean longitude of Mars in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fame03, fane03, fama03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fame03
@findex fame03

@code{fame03(@var{tc})}

[SOFA] Returns the mean longitude of Mercury in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fane03, faom03, fame03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fane03
@findex fane03

@code{fane03(@var{tc})}

[SOFA] Returns the mean longitude of Neptune in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node faom03, fapa03, fane03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection faom03
@findex faom03

@code{faom03(@var{tc})}

[SOFA] Returns the mean longitude of the Moon's ascending node in
radians, a fundamental argument according to the iers conventions of
2003, as a function of the number @code{@var{tc}} of Julian centuries
since J2000.0 TDB.  It makes no practical difference if
@code{@var{tc}} is measured since J2000.0 TT instead.  The result has
the same dimensions as @code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fapa03, fasa03, faom03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fapa03
@findex fapa03

@code{fapa03(@var{tc})}

[SOFA] Returns the general accumulated precession in longitude in
radians, a fundamental argument according to the iers conventions of
2003, as a function of the number @code{@var{tc}} of Julian centuries
since J2000.0 TDB.  It makes no practical difference if
@code{@var{tc}} is measured since J2000.0 TT instead.  The result has
the same dimensions as @code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fasa03, faur03, fapa03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fasa03
@findex fasa03

@code{fasa03(@var{tc})}

[SOFA] Returns the mean longitude of Saturn in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node faur03, fave03, fasa03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection faur03
@findex faur03

@code{faur03(@var{tc})}

[SOFA] Returns the mean longitude of Uranus in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fave03, fcrunwrite, faur03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fave03
@findex fave03

@code{fave03(@var{tc})}

[SOFA] Returns the mean longitude of Venus in radians, a fundamental
argument according to the iers conventions of 2003, as a function of
the number @code{@var{tc}} of Julian centuries since J2000.0 TDB.  It
makes no practical difference if @code{@var{tc}} is measured since
J2000.0 TT instead.  The result has the same dimensions as
@code{@var{tc}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fcrunwrite, fcrw, fave03, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fcrunwrite
@findex fcrunwrite

@code{fcrunwrite(@var{var}, @var{file} [, @var{header}])}

@code{fcrunwrite, @var{var}, @var{file} [, @var{header}]}

Writes @code{@var{var}} and @code{@var{header}} string into compressed
fz @code{@var{file}}.  The compression is of the lossless Rice kind with
run-length encoding.  The function version returns 1 on success, 0 on
failure, and no error messages.

Alias: @ref{fcrw}

Reverse: @ref{fzread}

See also: @ref{fcwrite}, @ref{fzwrite}, @ref{fzread}, @ref{fzhead},
@ref{!crunch_slice}

@c -------------------------------------
@node fcrw, fcw, fcrunwrite, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fcrw
@findex fcrw

@code{fcrw(@var{var}, @var{file} [, @var{header}])}

@code{fcrw, @var{var}, @var{file} [, @var{header}]}

Writes @code{@var{var}} and @code{@var{header}} string into compressed
fz @code{@var{file}}.  The compression is of the lossless Rice kind with
run-length encoding.  The function version returns 1 on success, 0 on
failure, and no error messages.

Alias: @ref{fcrunwrite}

Reverse: @ref{fzread}

See also: @ref{fcw}, @ref{fzwrite}, @ref{fzread}, @ref{fzhead},
@ref{!crunch_slice}

@c -------------------------------------
@node fcw, fcwrite, fcrw, Internal Routines
@subsection fcw
@findex fcw

@code{fcw(@var{var}, @var{file} [, @var{header}] [, /runlength])}

@code{fcw, @var{var}, @var{file} [, @var{header}] [, /runlength]}

Writes @code{@var{var}} and @code{@var{header}} string into compressed
fz @code{@var{file}}.  The compression is of the lossless Rice kind.  If
@code{/runlength} is specified, then the Rice compression is combined
with run-length encoding.  The function version returns 1 on success, 0
on failure, and no error messages.

Alias: @ref{fcwrite}

Reverse: @ref{fzread}

See also: @ref{fcrunwrite}, @ref{fzwrite}, @ref{fzhead}

@c -------------------------------------
@node fcwrite, fft, fcw, Internal Routines
@subsection fcwrite
@findex fcwrite

@code{fcwrite(@var{var}, @var{file} [, @var{header}])}

@code{fcwrite, @var{var}, @var{file} [, @var{header}]}

Writes @code{@var{var}} and also @code{@var{header}} (which may be a
string or a string array) into compressed fz @code{@var{file}}.  The
function version returns @code{1} on success, @code{0} on failure, and
no error messages.

Alias: @ref{fcw}

Reverse: @ref{fzread}

See also: @ref{fzwrite}, @ref{fzread}, @ref{fzhead}

@c -------------------------------------
@node fft, fftb, fcwrite, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fft
@findex fft

@code{fft(@var{data} [, @var{axes}, /allaxes, /amplitudes])}

@code{fft, @var{data} [, @var{axes}, /allaxes, /amplitudes]}

Returns a discrete forward Fourier transform of the real
@code{@var{data}} along the indicated @code{@var{axes}}
@code{@var{direction}}.  By default, the forward transform (to
frequency space) is applied in the first dimension.  The returned
values are of type @code{double}.  The subroutine form replaces
@code{@var{data}} with the transformed version.

If @code{@var{axes}} is specified, then it is taken to contain the
axes along which transformation is to be done.  No axis may appear
more than once.  The axes need not be in any specific order.  If
@code{/allaxes} is specified, then all axes are treated.  If neither
@code{@var{axes}} nor @code{/allaxes} are specified, then the first
axis is assumed.  The data may have arbitrary positive dimensions.

The returned array has the same dimensions as @code{@var{data}}.

The result are stored as 'half-complex' sequences, in order of
increasing frequency.  For each frequency, first the real and then the
imaginary part is given, except that no imaginary part is given for
values that are always real, i.e., for frequency zero and (for
even-length sequences) also for the highest represented frequency
(equal to half of the sequence length).  The Fourier transform (of
real data) at a negative frequency is the complex conjugate of the
Fourier transform at the corresponding positive frequency, and the
Fourier transform at frequency @code{@var{f}} is equal to that at
frequency @code{@var{f} mod @var{n}} for sequence length
@code{@var{n}}.

note that only one half of the relevant frequencies are represented in
the results, because the missing half can be constructed from the
provided half by complex conjugation.  Just adding up the squares of
all of the values in the result and dividing by the sequence length
does not give you the sum of squares of @code{@var{x}}; you have to
add in the missing part, too.  And remember that frequency zero counts
only once, and [for even-length sequences] the highest represented
frequency counts only once, too.

The returned values are such that if @code{x} contains a pure sine or
cosine wave, then the magnitude of the value in the appropriate
element of the result is equal to the amplitude of the wave times
@code{@var{n}} (for the very first element, and -- if @code{@var{n}}
is even -- also the very last element) or @code{@var{n}/2}.

If @code{/amplitudes} is specified, then the returned values are
scaled such that their magitude is equal to the magnitude of the
corresponding wave.

The calculation speed of the algorithm depends strongly on the number
of data points in the dimension in which the algorithm is applied.
For quickest results, that number of data points should only have
factors equal to small prime numbers, such as 2, 3, and 5.

Opposite: @ref{fftb}

See also: @ref{power}, @ref{sc}, @ref{scb}

[2.12.322, 4.0]

@c -------------------------------------
@node fftb, fftexpand, fft, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fftb
@findex fftb

@code{fftb(@var{data} [, @var{axes}, /allaxes])}

@code{fftb, @var{data} [, @var{axes}, /allaxes]}

Returns a discrete backward Fourier transform of the real
@code{@var{data}} along the indicated @code{@var{axes}}
@code{@var{direction}}.  By default, the backward transform (from
frequency space) is applied in the first dimension.  The returned
values are of type @code{double}.  The subroutine form replaces
@code{@var{data}} with the transformed version.

If @code{@var{axes}} is specified, then it is taken to contain the
axes along which transformation is to be done.  No axis may appear
more than once.  The axes need not be in any specific order.  If
@code{/allaxes} is specified, then all axes are treated.  If neither
@code{@var{axes}} nor @code{/allaxes} are specified, then the first
axis is assumed.  The data may have arbitrary positive dimensions.

The returned array has the same dimensions as @code{@var{data}}.

The @code{@var{data}} are assumed to be stored as 'half-complex'
sequences, in order of increasing frequency.  For each frequency,
first the real and then the imaginary part is given, except that no
imaginary part is given for values that are always real, i.e., for
frequency zero and (for even-length sequences) also for the highest
represented frequency (equal to half of the sequence length).

note that only one half of the relevant frequencies are represented in
@code{@var{data}}, because the missing half can be constructed from
the provided half by complex conjugation.

@code{x = fftb(y)} is the opposite of @code{y = fft(x)}, and @code{x
= fftb(y, /amplitudes)} is the opposite of @code{y = fft(x,
/amplitudes)}.

The calculation speed of the algorithm depends strongly on the number
of data points in the dimension in which the algorithm is applied.
For quickest results, that number of data points should only have
factors equal to small prime numbers, such as 2, 3, and 5.

Opposite: @ref{fft}

See also: @ref{power}, @ref{sc}, @ref{scb}

[2.12.322, 4.0]

@c -------------------------------------
@node fftexpand, fftshift, fftb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fftexpand
@findex fftexpand

@code{fftexpand(@var{data}, @var{factor})}

Returns a copy of @code{@var{data}} expanded in its first dimension by
the specified @code{@var{factor}}, which may be any positive
(fractional or integer) number.  The extra elements are interpolated
using Fourier transforms.

See also: @ref{fft}, @ref{fftshift}

@c -------------------------------------
@node fftshift, fileptr, fftexpand, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fftshift
@findex fftshift

@code{fftshift(@var{data}, @var{distance})}

@code{fftshift, @var{data}, @var{distance}}

Shifts the @code{@var{data}} over some @code{@var{distance}}, using
Fourier interpolation.  The shift distances may be fractional.  Each
next specified shift distance is applied to the next dimension of
@code{@var{data}}.  If fewer shift distances are specified than there
are dimensions in @code{@var{data}}, then the shift distances for the
remaining dimensions are assumed equal to zero.

Because Fourier interpolation is used, the shifting is cyclical (i.e.,
values that shifts out of the array on one side reappear on the other
side), and the power spectrum of the shifted data is equal to the power
spectrum of the original.

See also: @ref{shift}

@c -------------------------------------
@node fileptr, fileread, fftshift, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fileptr
@findex fileptr

@code{fileptr(@var{lun} [, @var{offset}] [, /start, /eof, /advance])}

@code{fileptr, @var{lun} [, @var{offset}] [, /start, /eof, /advance]}

Show or set a file pointer.  @code{fileptr,@var{lun}} shows and
@code{fileptr(@var{lun})} returns the position of the file pointer of
logical unit @code{lun} in bytes from the start of the file.  If
@code{@var{offset}} and/or a keyword are specified, then the file
pointer is modified.  If a keyword is specified but not
@code{@var{offset}}, then zero is taken for @code{@var{offset}}.  You
can move a file pointer beyond the end of a file, but not before the
beginning of the file.  If you read data from beyond the end of a file,
or from a dataless gap in a file, then zeros are returned.

@table @code
@item /start
counts from the start of the file.
@item /eof
counts from the end-of-file marker (which is one byte beyond the last
byte in the file). 
@item /advance
counts from the current position.
@end table

If no keyword is defined, then non-negative @code{@var{offset}} counts
from the start and negative @code{@var{offset}} from the end-of-file
marker (with @code{-1} pointing at the last byte of the file).  The
function version returns @code{1} on success, @code{0} or failure.

See also: @ref{openr}, @ref{openw}, @ref{openu}

@c -------------------------------------
@node fileread, filesize, fileptr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fileread
@findex fileread

@code{fileread, @var{lun}, @var{array}, @var{start}, @var{num},
@var{type}}

Reads raw data from a file opened on logical unit @code{@var{lun}} into
the @code{@var{array}} (whose prior contents are discarded), starting at
start position @code{@var{start}} in the file (measured in units of a
data value) and reading @code{@var{num}} data values.  The data values
are assumed to be of the indicated @code{@var{type}} (as from
@code{#type}), and the @code{@var{array}} will be changed to that type.
If @code{@var{start}} is negative, then data is read from the current
position in the file.

See also: @ref{filewrite}, @ref{#type}, @ref{openr}

@c -------------------------------------
@comment  node-name,  next,  previous,  up
@node filesize, filetofz, fileread, Internal Routines
@subsection filesize
@findex filesize

@code{filesize(@var{file})}

Returns the size of the indicated @code{@var{file}}, in bytes, or
@code{-1} if the file does not exist.

@c -------------------------------------
@node filetofz, filetype, filesize, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection filetofz
@findex filetofz

@code{filetofz, @var{file}, @var{type}, @var{dims}}

Writes into the first 512 bytes of file @code{@var{file}} a header
appropriate for an fz file of the indicated @code{@var{type}} and
dimensions @code{@var{dims}}, but only if the file contains enough data
(beyond the 512-byte header) for an array of the indicated type and
dimensions.  You can use this routine to transform a file created using,
e.g., @code{writeu}, to fz format so that a specific type and
dimensional structure is associated with it and you can read it with
@code{fzread} or @code{fzarr}.

See also: @ref{fzarr}, @ref{fzread}, @ref{writeu}

@c -------------------------------------
@node filetype, filetypename, filetofz, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection filetype
@findex filetype

@code{filetype(@var{filename})}

Returns the type (number) of the file with name @code{filename}.  If the
file cannot be opened for reading then an error is generated.

See also: @ref{#filetype}, @ref{filetypename}

@c -------------------------------------
@node filetypename, filewrite, filetype, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection filetypename
@findex filetypename

@code{filetypename(@var{type})}

Returns a string that describes numerical file type @code{type}.

See also: @ref{#filetype}, @ref{filetype}

@c -------------------------------------
@node filewrite, find, filetypename, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection filewrite
@findex filewrite

@code{filewrite, @var{lun}, @var{array} [, @var{start}]}

Writes the data values from @code{@var{array}} unformatted to the file
opened on logical unit @code{@var{lun}}, starting at position
@code{@var{start}} in the file, measured in units of a data value from
@code{@var{array}}.  If @code{@var{start}} is not specified, then the
data is written at the current file position.

See also: @ref{fileread}, @ref{openw}

@c -------------------------------------
@node find, findfile, filewrite, Internal Routines
@subsection find
@findex find

@code{find(@var{array}, @var{key} [, @var{offset}] [, /exact, /index_ge,
/value_ge, /first])}

Finds the first occurrence of each element of @code{@var{key}}, starting
at (the corresponding element of) @code{@var{offset}} in
@code{@var{array}}.  The search mode keywords are:

@table @code
@item /exact
Seek exact match, return offset or @code{-1} if none found.
@item /index_ge
Seek first element greater than or equal to the key.  Return offset or
@code{-1}, if none found.
@item /value_ge
Seek first element greater than or equal to the key.  Return found
element, or @code{-1} if none found.
@item /first
Return a result for each combination of the second and higher
dimensions.
@end table

e.g., if @code{x} is a 3 by 5 by 4 array, then @code{find(x,[1,2])}
returns the indices of the first occurrence of 1 and 2 in @code{x},
irrespective of the dimensional structure of @code{x}, and
@code{find(x,[1, 2],/first)} returns a 2 by 5 by 4 array with the
results of @code{find(x(*,0,0),1), find(x(*,1,0),1),} etcetera.
@code{@var{key}} may be a scalar or an array.  @code{@var{offset}} may
be a scalar or an array of the same size as @code{@var{key}}.

See also: @ref{find_maxloc}

@c -------------------------------------
@node findfile, find_max, find, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection findfile
@findex findfile

@code{findfile(@var{directory}, @var{file})}

Seeks the @code{@var{file}} in or below the @code{@var{directory}}, and
returns the complete file name, if found, or scalar 0 otherwise.
If @code{@var{file}} contains any forward slashes (@kbd{/}), then these
slashes and any preceding text is removed first.

See also: @ref{getdirectories}, @ref{getfiles}, @ref{getmatchedfiles}

@c -------------------------------------
@node find_max, find_maxloc, findfile, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection find_max
@findex find_max

@code{find_max(@var{data} [, diagonal=@var{diagonal}, /degree,
/subgrid])}

By default, seeks local maxima in @code{data} and returns their values.
@code{data} must be numerical and may have multiple dimensions.

If @code{@var{diagonal}} is specified, then it must be an array with one
element per dimension of @code{@var{data}}.  The elements that are equal
to 0 indicate which dimensions are not checked for a local maximum.  The
elements that are equal to 1 and 2 (after conversion to type
@code{long}) indicate in which dimensions checking is performed.  The
elements that are equal to 2 indicate in which dimensions checked
directions may be diagonal.  Elements equal to 1 indicate that no
diagonals are allowed in those dimensions.  All such directions either
have non-zero coordinate offsets only in those dimensions, or have only
a single non-zero coordinate offset (i.e., a non-diagnonal or orthogonal
direction).  Only approved directions are checked.  If
@code{@var{diagonal}} contains @code{n1} ones and @code{n2} twos, then
the number of directions per data element that will be considered is
equal to @code{m = 2^n2 - 1 + n1}.

For example, regard a two-dimensional array.  We'll call the first
dimension the east-west direction and the second one the north-south
dimension.  Then, if @code{@var{diagonal} = [1,0]}, values are returned
for all points that are local maxima in the east-west direction without
regards to any other direction.  If @code{@var{diagonal} = [1,1]}, then
all points are approved that are local maxima in the east-west direction
and also in the north-south direction, without regards to the other
(northeast-southwest, southeast-northwest) directions.  If
@code{@var{diagonal} = [2,2]}, then all directions are checked.

For a three-dimensional array, if @code{@var{diagonal} = [2,2,1]}, then
the only checked directions that have a non-zero third coordinate offset
are those that are along the 3rd axis.  If @code{@var{diagonal} =
[1,1,0]}, then only directions along (and not between) the first two
axes are checked.

If @code{/degree} is specified, then the number of directions per data
element where the data shows a local maximum is returned instead.  This
number always lies between 0 and the total number @code{m} of directions
given above.  @code{find_max(@var{data}, /degree) eq m} returns an array
with 1s at all positions returned by @code{find_max(@var{data})}, but
the latter form is considerably faster because for each element it stops
checking as soon as a direction without a local maximum is found.  For
noise data in arbitrary numbers of dimensions, on average at most 2
local maximum determinations per data element are performed if
@code{/degree} is not specified, compared to @code{m}, which is grows
exponentially with the number of dimensions in the worst case, if
@code{/degree} is specified.

If @code{/subgrid} is specified, then the value of the local maximum is
taken from a quadratic hypersurface fitted to the local neighborhood of
the local maximum.

The used algorithm decides whether a particular data point is a local
maximum by looking at its nearest neighbors only.  This means that it
cannot decide if a region in which all adjacent data values are equal
constitutes a local maximum.  Such regions are ignored.

See also: @ref{local_max}, @ref{find_maxloc}, @ref{find_min}

@c -------------------------------------
@node find_maxloc, find_min, find_max, Internal Routines
@subsection find_maxloc
@findex find_maxloc

@code{find_maxloc(@var{data} [, diagonal=@var{diagonal}, /degree,
/subgrid, /coords, /old])}

By default, seeks local maxima in @code{@var{data}} and returns their
positions as indices to @code{data}.  If @code{/coords} is specified,
then returns coordinates to @code{data} in an array with the different
coordinates in the first dimension (i.e., if @code{x} is the result,
then @code{x(*,0)} contains the first coordinate of each found position.
@code{data} must be numerical and may have multiple dimensions.

If @code{@var{diagonal}} is specified, then it must be an array with one
element per dimension of @code{@var{data}}.  The elements that are equal
to 0 indicate which dimensions are not checked for a local maximum.  The
elements that are equal to 1 and 2 (after conversion to type
@code{long}) indicate in which dimensions checking is performed.  The
elements that are equal to 2 indicate in which dimensions checked
directions may be diagonal.  Elements equal to 1 indicate that no
diagonals are allowed in those dimensions.  All such directions either
have non-zero coordinate offsets only in those dimensions, or have only
a single non-zero coordinate offset (i.e., a non-diagnonal or orthogonal
direction).  Only approved directions are checked.  If
@code{@var{diagonal}} contains @code{n1} ones and @code{n2} twos, then
the number of directions per data element in @code{n} dimensions that
will be considered is equal to @code{m = 2^n2 - 1 + n1}.

For example, regard a two-dimensional array.  We'll call the first
dimension the east-west direction and the second one the north-south
dimension.  Then, if @code{@var{diagonal} = [1,0]}, all points are
returned that are local maxima in the east-west direction without
regards to any other direction.  If @code{@var{diagonal} = [1,1]}, then
all points are returned that are local maxima in the east-west direction
and also in the north-south direction, without regards to the other
(northeast-southwest, southeast-northwest) directions.  If
@code{@var{diagonal} = [2,2]}, then all directions are checked.

For a three-dimensional array, if @code{@var{diagonal} = [2,2,1]}, then
the only checked directions that have a non-zero third coordinate offset
are those that are along the 3rd axis.  If @code{@var{diagonal} =
[1,1,0]}, then only directions along the first two axes are checked.

If @code{/degree} is specified, then the number of directions per data
element where the data shows a local maximum is returned instead.  This
number always lies between 0 and the total number @code{m} of directions
given above.  @code{find_maxloc(@var{data}, /degree) eq m} returns an
array with 1s at all positions returned by
@code{find_maxloc(@var{data})}, but the latter form is considerably
faster because for each element it stops checking as soon as a direction
without a local maximum is found.  For noise data in arbitrary numbers
of dimensions, on average at most 2 local maximum comparisons per data
element are performed, compared to @code{m}, which is grows
exponentially with the number of dimensions in the worst case, if
@code{/degree} is specified.

If @code{/subgrid} is specified, then the value of the local maximum is
taken from a quadratic hypersurface fitted to the local neighborhood of
the local maximum.

The used algorithm decides whether a particular data point is a local
maximum by looking at its nearest neighbors only.  This means that it
cannot decide if a region in which all adjacent data values are equal
constitutes a local maximum.  Such regions are ignored.

If @code{/old} is specified, then an older algorithm for two-dimensional
@code{@var{data}} is used instead, which always returns indices to
@code{data} (as if @code{/coords} is not specified).  In that case, each
value that is larger than the eight values immediately surrounding it is
a local maximum.  The edges of the image are not considered.  Of a
multi-pixel local maximum, only one position is returned.  Of a plateau
that is larger than three by three pixels, the algorithm cannot
determine whether it is a local maximum or not, and one position in the
plateau is returned.

See also: @ref{find}, @ref{local_max}, @ref{find_max},
@ref{find_minloc}

@c -------------------------------------
@node find_min, find_minloc, find_maxloc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection find_min
@findex find_min

@code{find_min(@var{data} [, diagonal=@var{diagonal}, /degree,
/subgrid])}

By default, seeks local minima in @code{data} and returns their values.
@code{data} must be numerical and may have multiple dimensions.

If @code{@var{diagonal}} is specified, then it must be an array with one
element per dimension of @code{@var{data}}.  The elements that are equal
to 0 indicate which dimensions are not checked for a local minimum.  The
elements that are equal to 1 and 2 (after conversion to type
@code{long}) indicate in which dimensions checking is performed.  The
elements that are equal to 2 indicate in which dimensions checked
directions may be diagonal.  Elements equal to 1 indicate that no
diagonals are allowed in those dimensions.  All such directions either
have non-zero coordinate offsets only in those dimensions, or have only
a single non-zero coordinate offset (i.e., a non-diagnonal or orthogonal
direction).  Only approved directions are checked.  If
@code{@var{diagonal}} contains @code{n1} ones and @code{n2} twos, then
the number of directions per data element that will be considered is
equal to @code{m = 2^n2 - 1 + n1}.

For example, regard a two-dimensional array.  We'll call the first
dimension the east-west direction and the second one the north-south
dimension.  Then, if @code{@var{diagonal} = [1,0]}, values are returned
for all points that are local minima in the east-west direction without
regards to any other direction.  If @code{@var{diagonal} = [1,1]}, then
all points are approved that are local minima in the east-west direction
and also in the north-south direction, without regards to the other
(northeast-southwest, southeast-northwest) directions.  If
@code{@var{diagonal} = [2,2]}, then all directions are checked.

For a three-dimensional array, if @code{@var{diagonal} = [2,2,1]}, then
the only checked directions that have a non-zero third coordinate offset
are those that are along the 3rd axis.  If @code{@var{diagonal} =
[1,1,0]}, then only directions along (and not between) the first two
axes are checked.

If @code{/degree} is specified, then the number of directions per data
element where the data shows a local minimum is returned instead.  This
number always lies between 0 and the total number @code{m} of directions
given above.  @code{find_minloc(@var{data}, /degree) eq m} returns an
array with 1s at all positions returned by
@code{find_minloc(@var{data})}, but the latter form is considerably
faster because for each element it stops checking as soon as a direction
without a local minimum is found.  For noise data in arbitrary numbers
of dimensions, on average at most 2 local minimum determinations per
data element are performed if @code{/degree} is not specified, compared
to @code{m}, which is grows exponentially with the number of dimensions
in the worst case, if @code{/degree} is specified.

If @code{/subgrid} is specified, then the value of the local minimum is
taken from a quadratic hypersurface fitted to the local neighborhood of
the local minimum.

The used algorithm decides whether a particular data point is a local
minimum by looking at its nearest neighbors only.  This means that it
cannot decide if a region in which all adjacent data values are equal
constitutes a local minimum.  Such regions are ignored.

See also: @ref{local_min}, @ref{find_minloc}, @ref{find_min}

@c -------------------------------------
@node find_minloc, fit, find_min, Internal Routines
@subsection find_minloc
@findex find_minloc

@code{find_minloc(@var{data} [, @var{sign}, diagonal=@var{diagonal},
/degree, /subgrid, /coords])}

By default, seeks local minima in @code{data} and returns their
positions as indices to @code{data}.  If @code{/coords} is specified,
then the coordinates of the positions are returned (with the first
dimension sampling the different coordinates).  @code{data} must be
numerical and may have multiple dimensions.

If @code{@var{diagonal}} is specified, then it must be an array with one
element per dimension of @code{@var{data}}.  The elements that are equal
to 0 indicate which dimensions are not checked for a local minimum.  The
elements that are equal to 1 and 2 (after conversion to type
@code{long}) indicate in which dimensions checking is performed.  The
elements that are equal to 2 indicate in which dimensions checked
directions may be diagonal.  All such directions either have non-zero
coordinate offsets only in those dimensions, or have only a single
non-zero coordinate offset (i.e., a non-diagnonal or orthogonal
direction).  Only approved directions are checked for their data
curvature.  If @code{@var{diagonal}} contains @code{n1} ones and
@code{n2} twos, then the number of directions per data element in
@code{n} dimensions that will be considered is equal to @code{m = (3^n2
- 1)/2 + n1}.

For example, regard a two-dimensional array.  We'll call the first
dimension the east-west direction and the second one the north-south
dimension.  Then, if @code{@var{diagonal} = [1,0]}, all points are
returned that are local minima in the east-west direction without
regards to any other direction.  If @code{@var{diagonal} = [1,1]}, then
all points are returned that are local minima in the east-west direction
and also in the north-south direction, without regards to the other
(northeast-southwest, southeast-northwest) directions.  If
@code{@var{diagonal} = [2,2]}, then all directions are checked.

For a three-dimensional array, if @code{@var{diagonal} = [2,2,0]}, then
the only checked directions that have a non-zero third coordinate offset
are those that are along the 3rd axis.  If @code{@var{diagonal} =
[1,1,0]}, then only directions along the first two axes are checked.

If @code{/degree} is specified, then the number of directions per data
element where the data shows a local minimum is returned instead.  This
number always lies between 0 and the total number @code{m} of directions
given above.  @code{find_min(@var{data}, /degree) eq m} returns an array
with 1s at all positions returned by @code{find_min(@var{data})}, but
the latter form is considerably faster because for each element it stops
checking as soon as a direction without a local minimum is found.  For
noise data in arbitrary numbers of dimensions, on average at most 2
local minimum comparisons per data element are performed if
@code{/degree} is not specified, compared to @code{m}, which is grows
exponentially with the number of dimensions in the worst case, if
@code{/degree} is specified..

The used algorithm decides whether a particular data point is a local
minimum by looking at its nearest neighbors only.  This means that it
cannot decide if a region in which all adjacent data values are equal
constitutes a local minimum.  Such regions are ignored.

See also: @ref{local_min}, @ref{find_min}, @ref{find_minloc}

@c -------------------------------------
@node fit, fit2, find_minloc, Internal Routines
@subsection fit
@findex fit

@code{fit( [@var{x},] @var{y}, start=@var{start}, step=@var{step} [,
lowbound=@var{lowbound}, highbound=@var{highbound},
weights=@var{weights}] [, qthresh=@var{qthresh}, pthresh=@var{pthresh},
ithresh=@var{ithresh}, dthresh=@var{dthresh}, fac=@var{fac},
niter=@var{niter}, nsame=@var{nsame}] [, err=@var{err}, fit=@var{fit},
tthresh=@var{tthresh}] [, /vocal, /down, /pchi, /gaussians, /powerfunc])}

Iterative non-linear fit to Gaussians, power functions, and user-defined
functions.  The selected function is evaluated at positions
@code{@var{x}} under guidance of trial model parameters and the found
model values are compared with @code{@var{y}}.  The model parameters are
adjusted to minimize the differences between the model values and
@code{@var{y}}.  The return value is an array containing the best found
model parameters and (at the end) the last fit quality number.

The fitted function depends on @code{@var{fit}}, @code{/gaussians}, and
@code{/powerfunc}.

@table @asis
@item @code{@var{fit}}
If specified, then it must be a string containing the name of a function
that takes arguments @code{@var{par}}, @code{@var{x}}, @code{@var{y}},
and, optionally, @code{@var{w}}, with @code{@var{par}} an array
containing the current fit parameters and @code{@var{w}} the weight of
each data point, and that returns the fit quality which is a positive
number that is closer to zero the better the fit is.  Minimization of
the fit quality is then the goal of the iterations.
@item /gaussians
If @code{@var{fit}} is not specified, then this keyword selects fitting
to the sum of one or more gaussian functions of the form
@code{@var{par}(0) + @code{@var{par}}(1)*exp(-((@code{@var{x}} -
@code{@var{par}}(2))/@code{@var{par}}(3))^2)}.  In this case
@code{@var{step}} must have four plus a multiple of three elements, and
for each extra set of three an extra gaussian is added.
@item /powerfunc
If @code{@var{fit}} is not specified, then this keyword selects fitting
to a general power function superimposed on a linear trend, of the form
@code{@var{par}(0) + @code{@var{par}}(1)*@code{@var{x}} +
@code{@var{par}}(2)*(@code{@var{x}} -
@code{@var{par}}(3))^@code{@var{par}}(4)}.
@end table

The fit parameters that are tried depend on @code{@var{start}},
@code{@var{step}}, @code{@var{lowbound}}, and @code{@var{hibound}}.

@table @var
@item x y
The data points to be fitted to.
@item niter
In each iteration cycle, @code{@var{niter}} different parameter sets are
tried.  @code{@var{niter}} defaults to 10.
@item start
contains the start values of the parameters.  This array must have a
number of elements equal to the number of fit parameters or the number
of fit parameters plus one.  In the latter case, the last element is
ignored.  (This is so that output from a previous call to @code{fit} can
be entered as start values for the next call.)
@item step
contains the initial rms values by which the parameters are randomly
varied from iteration to iteration.  This array must have one element
for each fitted parameter.
@item lowbound
contains lower bounds on the parameters (default: no bounds).  This
array must have one element per fitted parameter.
@item hibound
contains upper bounds on the parameters (default: no bounds).  This
array must have one element per fitted parameter.
@end table

The stop criterion on the iterations depend on @code{@var{qthresh}},
@code{@var{pthresh}}, @code{@var{ithresh}}, @code{@var{dthresh}},
@code{@var{tthresh}}, and @code{@var{nsame}}, and parameter change
depends on @code{@var{fac}}.  Estimated errors on the parameters are
returned in @code{@var{err}}.

@table @var
@item qthresh
contains a threshold on the fit quality, below which iteration is
ceased.  Defaults to zero. 
@item pthresh
contains thresholds on the maximum absolute change in the best-so-far
parameters.  When the change in the last iteration cycle is smaller than
the corresponding threshold for all parameters, then the iteration is
ceased [note: not yet implemented].  defaults to zero.
@item ithresh
contains a threshold on the number of iteration cycles, above which
iteration is ceased.  @code{@var{ithresh}} defaults to 1000.
@item dthresh
contains a threshold on the relative change in the fit quality since the
last iteration.  If the relative change is less than
@code{@var{dthresh}}, then iteration is ceased.  @code{@var{dthresh}}
defaults to 0.
@item tthresh
contains the maximum number of seconds that the fit process may take.
If at the end of an iteration it is more than @code{@var{tthresh}}
seconds later than when the fit process began, then iteration is
ceased.  If this variable is equal to 0, then no time threshold is
applied.  It defaults to 3600, i.e., one hour.
@item nsame
If the best-so-far parameters do not change during @code{@var{nsame}}
iteration cycles, then iterations are ceased.  @code{@var{nsame}}
defaults to 5. 
@item fac
contains a factor which limits the change of the rms spread of the
parameters from iteration cycle to iteration cycle.  The rms spread of
each parameter in the next iteration cycle equals the change in the
best-so-far value of that parameter since the last iteration cycle, but
is limited in change to a factor of between @code{@var{fac}} and
1/@code{@var{fac}}. 
@code{@var{fac}} defaults to 0.5.
@item err
If @code{@var{err}} is defined, then rough estimates for the formal
errors on the parameters are returned in it.
@end table

@table @code
@item /down
When the best-so-far parameters do not change from one iteration cycle
to the next, then the rms parameter spread is decreased (if @code{/down}
is specified, or by default) or increased (if @code{/nodown} is
specified) by a factor of 2 in the next iteration cycle.
@item /vocal
selects display of best-so-far parameters after each iteration cycle.
Displayed is: iteration rms-error: fit-parameters.  Only those fit
parameters for which the corresponding @code{@var{step}} value is
unequal to zero are shown, and at most the first twenty such parameters
are displayed.
@end table

See also: @ref{trend}, @ref{lsq}, @ref{fit}

@c -------------------------------------
@node fit2, fit3, fit, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fit2
@findex fit2

@code{fit2( x=@var{x}, y=@var{y}, npar=@var{npar}, fit=@var{fit} [,
mu=@var{mu}, generations=@var{generations}, population=@var{population},
pcross=@var{pcross}, pmutate=@var{pmutate}, vocal=@var{vocal}] [,
/elite, /byte, /word, /long, /float, /double])}

[@ref{develop} package]

@c -------------------------------------
@node fit3, fit3dcube, fit2, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fit3
@findex fit3

@code{@var{par} = fit3( x=@var{x}, y=@var{y}, start=@var{start},
step=@var{step}, f=@var{funcname} [, err=@var{errors},
ithresh=@var{ithresh}, sthresh=@var{sthresh}, nithresh=@var{nithresh}]
[, /vocal])}

Seeks parameters @code{@var{par}} such that
@code{@var{funcname}(@var{par}, @var{x}, @var{y})} is as small as
possible, using the Simplex algorithm.  @code{@var{start}} specifies
the startup values for the parameters.  @code{@var{step}} specifies
the initial step size for each of the parameters, for searching for
the minimum.  @code{@var{funcname}} must be a @code{string} that names
the user-defined function to call to obtain the quality of the fit.
This function is assumed to return the sum of the square of the
residuals between the data and the model for the current set of
parameters.

@code{@var{ithresh}} specifies the maximum number of search iterations
that is done.  It defaults to 0, which corresponds to no iteration
limit.

The search algorithm searches a certain volume of parameter space for
the minimum.  During every iteration it updates the vertex
corresponding to the greatest function value, to home in on the
location of the minimum.  @code{@var{sthresh}} specifies below which
size of the search volume the iteration should stop.  The used measure
is the root-mean-square distance of all vertices from the center of
the search volume.  This size may increase or decrease, and need not
end up at zero.

If the best fit does not improve for more than @code{@var{nithresh}}
consecutive search iterations, then the iteration stops.  A value of 0
corresponds to no limit.  It defaults to 10 times the number of
parameters.

Upon exit, the last element of @var{par} contains the standard
deviation of the difference between @code{@var{y}} and
@code{@var{funcname}(@var{par}, @var{x}, @var{y})}.  If
@code{@var{errors}} is specified, then the estimated standard errors
on the parameters are returned in it. 

If @code{/vocal} is specified, then about every 2 seconds a line is
printed that lists (1) the iteration number, (2) the residual standard
error of the current best fit, (3) the difference with the previously
printed residual standard error, (4) a measure of the linear size of
the multidimensional volume that is being considered, (5) the
difference with the previously printed size, (6) the current best
values for the first few parameters that have a non-zero step size.

See also: @ref{fit}

@c -------------------------------------
@node fit3dcube, fits_header, fit3, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fit3dcube
@findex fit3dcube

@code{fit3dcube}

@code{[@ref{develop} package]} Scales a 3D plot so the unit cube is
completely visible.

See also: @ref{plot3d}

@c -------------------------------------
@node fits_header, fits_key, fit3dcube, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fits_header
@findex fits_header

@code{fits_header(@var{name} [, @var{header}, @var{ext_header},
@var{extvar_preamble}])}

Tries to read the FITS file with the name indicated by
@code{@var{file}}.  The header is read into @code{@var{header}}, if
specified.

If the file includes a FITS extension, then its header is read into
@code{@var{ext_header}}, if specified.  If @code{@var{extvar_preamble}}
is specified, then it must be a @code{string} containing a preamble to
use for the creation of variables corresponding to data contained in the
extension.

Upon success, this function returns a @code{1}, otherwise a @code{0}.

See also: @ref{fits_read}, @ref{fits_xread}

@c -------------------------------------
@node fits_key, fits_read, fits_header, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fits_key
@findex fits_key

@code{fits_key(@var{file}, @var{key} [, /comment])}

Returns the comment (if @code{/comment} is specified) or the value
associated with string @code{@var{key}} in the FITS header of the
indicated FITS or fz @code{@var{file}}.  (If the file is an fz file,
then it must have a FITS header to be accepted.)  @code{@var{file}} may
be a string, which is taken as the name of the FITS file, or a number,
which is taken as the number of the logical unit on which the FITS file
is already open.  The following conditions generate an error: (1)
@code{@var{file}} is not a string or a number, (2) the logical unit
number is illegal, (3) no file is open on the indicated logical unit,
(4) the file cannot be opened for reading, (5) the file does not have
"simple " as the first word of its header, (6) @code{@var{key}} is not a
string, (7) @code{@var{key}} has more than 8 characters.  You may
specify @code{@var{key}} in mixed upper and lower case: a copy with all
upper case will be compared against the key words in the FITS header.
If the key is not found in the FITS header, then a zero is returned.

@c -------------------------------------
@node fits_read, fits_write, fits_key, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fits_read
@findex fits_read

@code{fits_read, @var{data}, @var{file} [, @var{header}, @var{ext_data},
@var{ext_header}, @var{extvar_preamble}] [, blank=@var{var}] [,
/notranslate, /rawvalues]} 

@code{fits_read(@var{data}, @var{file} [, @var{header}, @var{ext_data},
@var{ext_header}, @var{extvar_preamble}] [, blank=@var{var}] [,
/notranslate, /rawvalues])} 

Tries to read the FITS file with the name indicated by
@code{@var{file}}.  The data is read into @code{@var{data}}, and the
header as a string array, if specified.  The first few standard FITS
keywords, which determine the data type and dimensions, are not included
in the returned header.

If the file includes a FITS extension, then its data is read into
@code{@var{ext_data}}, if specified, and its header into
@code{@var{ext_header}}, if specified.  If @code{@var{extvar_preamble}}
is specified, then it must be a @code{string} containing a preamble to
use for the creation of variables corresponding to data contained in the
extension.

If the file contains LUX compressed data (e.g., was written using
@code{fits_write} with compression enabled) and if @code{/notranslate}
is specified, then the compressed data is returned @code{@var{data}}
transformed to a one-dimensional array of type @code{byte}.  If
@code{/notranslate} is not specified, then the data is decompressed and
stored in @code{@var{data}} which is transformed to the appropriate type
and dimensions.

Unless @code{/rawvalues} is specified, the data values read from the
FITS file are modified according to the @code{bscale}, @code{bzero}, and
@code{blank} FITS keywords from the file's header.  If the data values
are stored in the file as integers and @code{bscale} and @code{bzero}
are integers, too, then the transformed data are returned as integers as
well.  In that case, the returned data type is the smallest one that can
hold any of the transformed values.

The function returns a @code{1} upon success, or a @code{0} otherwise.
The subroutine form generates an error if a problem is encountered.

See also: @ref{fits_header}, @ref{fits_xread}

@c -------------------------------------
@node fits_write, fits_xread, fits_read, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fits_write
@findex fits_write

@code{fits_write, @var{data}, @var{file} [, @var{header}, @var{slice}]
[, /vocal]}

@code{fits_write(@var{data}, @var{file} [, @var{header}, @var{slice}]
[, /vocal])}

Writes the numerical @code{@var{data}} array and optional string
@code{@var{header}} to the indicated @code{@var{file}} in FITS format,
with optional data compression.  @code{@var{data}} must be of a real
(i.e., not complex) data type.  @code{@var{header}} may be a single
string or a string array.  If @code{/vocal} is specified, then a message
is printed to the screen if compression was requested but for some
reason did not succeed.

The value of integer @code{@var{slice}} determines if data compression
is attempted.  If @code{@var{slice}} is zero, then the data is not
compressed.  If @code{@var{slice}} is positive, then lossless Rice
compression is attempted, as with @code{crunch}.  If @code{@var{slice}}
is negative, then lossless Rice compression with run-length encoding is
attempted, as with @code{crunchrun}.  In either case, the magnitude of
@code{@var{slice}} is a compression parameter that can be tweaked to get
the best compression, similar to @code{!crunch_slice}.  It should not be
greater than the number of bits per data value.

For a description of the FITS format adopted for LUX data, see @ref{LUX
FITS File Format}.

For uncompressed data, the following information is written into the
header of the FITS file: the standard @code{simple}, and the
@code{bitpix} and @code{naxes} lines that indicate the data type and
dimensions, and also the user-specified @code{@var{header}}, if any.

For compressed data, the same entries are included, but the
@code{bitpix} and @code{naxes} entries refer to the data after
compression, i.e., as included in the FITS file.  The following lines
come after the last @code{naxes} entry: one with keyword @code{compress}
and value @code{'RICE '} or @code{'RICE rle '} for straight and
run-length-encoded Rice compression, respectively; one @code{ubitpix}
line, and @code{unaxes} lines, corresponding to @code{bitpix} and
@code{naxes} but referring to the uncompressed @code{@var{data}}.

The treatment of the user-specified @code{@var{header}} depends on its
contents.  If the 9th character of the first (or only) string in
@code{@var{header}} is an equal sign (@code{=}), then the
@code{@var{header}} is assumed to contain a proper FITS header.  If
@code{@var{header}} is a string array, then each string element is
copied into one or more 80-character chunks of the output file, so the
elements do not themselves have to be 80 characters in size.  If
@code{@var{header}} is a string, then it is assumed to contain 80
characters for each FITS record.  Any excess characters after the last
full 80-character record are discarded.

If the @code{@var{header}} does not look like a proper FITS header, then
it is taken to be a general comment on the data.  If @code{@var{header}}
is a string, then it is chopped into 70-character parts and each part is
written to its own FITS record after a @code{comment =} keyword.  If
@code{@var{header}} is a string array, then each element is written to
one or more of its own @code{comment} lines.

@c -------------------------------------
@node fits_xread, fix, fits_write, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fits_xread
@findex fits_xread

@code{fits_xread(@var{x}, @var{file} [, @var{header}, @var{ext_header},
@var{offset}, @var{extvar_preamble}])}

Tries to read the FITS file with the name indicated by
@code{@var{file}}.  The data is read into @code{@var{data}}, and the
header into @code{@var{header}}, if specified.

If the file includes a FITS extension, then its header is read into
@code{@var{ext_header}}, if specified, and the byte offset of the
extension data from the start of the file in @code{@var{offset}}, if
specified.  If @code{@var{extvar_preamble}} is specified, then it must
be a @code{string} containing a preamble to use for the creation of
variables corresponding to data contained in the extension.

Upon success, this function returns a @code{1}, otherwise a @code{0}.

See also: @ref{fits_header}, @ref{fits_read}

@c -------------------------------------
@node fix, fk52h, fits_xread, Internal Routines
@subsection fix
@findex fix

@code{fix(@var{x})}

@code{fix, @var{x} [, @dots{}]}

Converts the arguments to data type @code{long} by truncating at the
decimal point (if any).  The function returns a converted copy and
leaves @code{@var{x}} itself alone.  The subroutine modifies
@code{@var{x}} itself.

Alias: @ref{long}

See also: @ref{Number Conversion}

@c -------------------------------------
@node fk52h, fk5hip, fix, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fk52h
@findex fk52h

@code{fk52h, @var{ra5}, @var{dec5}, @var{dra5}, @var{ddec5},
@var{px5}, @var{rv5}, @var{rah}, @var{dech}, @var{drah}, @var{ddech},
@var{pxh}, @var{rvh}}

[SOFA] Transforms FK5 (J2000.0) star data into the Hipparcos system.
The input FK5 data is: right ascension @code{@var{ra5}} (radians),
declination @code{@var{dec5}} (radians), proper motion in right
ascension @code{@var{dra5}} (dRA/dt, radians per Julian year), proper
motion in declination @code{@var{ddec5}} (ddec/dt, radians per Julian
year), parallax @code{@var{px5}} (arcseconds), radial velocity
@code{@var{rv5}} (km/s, positive receding).  The output Hipparcos data
is: right ascension @code{@var{rah}}, declination @code{@var{dech}},
proper motion in right ascension @code{@var{drah}}, proper motion in
declination @code{@var{ddech}}, parallax @code{@var{pxh}}, radial
velocity @code{@var{rvh}} -- with the same units as for the FK5
coordinates.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fk5hip, fk5hz, fk52h, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fk5hip
@findex fk5hip

@code{fk5hip, @var{r5h}, @var{s5h}}

[SOFA] Returns the FK5-to-Hipparcos rotation @code{@var{r5h}} and spin
@code{@var{s5h}}.  @code{p_Hipparcos = @var{r5h} p_fk5}, where
@code{p_Hipparcos} is a p-vector in the Hipparcos frame and
@code{p_fk5} is the equivalent FK5 p-vector.  @code{@var{s5h}} is the
time derivative of the FK5-to-Hipparcos rotation, measured in radians
per Julian TDB year.  @code{@var{r5h}} has 3 by 3 elements,
@code{@var{s5h}} has 3 elements.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fk5hz, float, fk5hip, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fk5hz
@findex fk5hz

@code{fk5hz, @var{ra5}, @var{dec5}, @var{jdtdb}, @var{rah},
@var{dech}}

[SOFA] Transforms an FK5 (J2000.0) star position (right ascension
@code{@var{ra5}} in radians, declination @code{@var{dec5}} in radians)
determined at TDB Julian Date @code{@var{jdtdb}} into the system of
the Hipparcos catalog, assuming zero Hipparcos proper motion.  The
returned coordinates in the Hipparcos system are right ascension
@code{@var{rah}} and declination @code{@var{dech}}, both measured in
radians.  All input and output variables (must) have the same
dimensions.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node float, floor, fk5hz, Internal Routines
@subsection float
@findex float

@code{float(@var{x})}

@code{float, @var{x} [, @dots{}]}

Converts the arguments to data type @code{float}.  The function returns
a converted copy and leaves @code{@var{x}} itself alone.  The subroutine
modifies @code{@var{x}} itself.

See also: @ref{Number Conversion}

@c -------------------------------------
@node floor, fltarr, float, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection floor
@findex floor

@code{floor(@var{x})}

Returns the integer at or next below @code{@var{x}} (i.e., closer to
minus infinity).

See also: @ref{ceil}, @ref{fix}, @ref{rfix}

@c -------------------------------------
@node fltarr, fltfarr, floor, Internal Routines
@subsection fltarr
@findex fltarr

@code{fltarr(@var{dimensions})}

Return a @code{float} array of the specified @code{@var{dimensions}}.
The latter may be an array containing the dimensions, or a list of up to
@code{#max_dims} dimensions.

See also: @ref{array}, @ref{bytarr}, @ref{intarr}, @ref{lonarr},
@ref{dblarr}, @ref{#max_dims}

@c -------------------------------------
@node fltfarr, fmap, fltarr, Internal Routines
@subsection fltfarr
@findex fltfarr

@code{fltfarr(@var{file}, @var{dimensions} [, offset=@var{offset},
/readonly, /swap])}

Links a @code{float} array dimensional structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or a list of up to ten
dimensions.  The file need not exist.  @code{@var{offset}} indicates the
length in bytes of a header after which the array data is to be found.
It defaults to zero.  Keyword @code{/readonly} disallows writing to the
disk file through the file array.  Keyword @code{/swap} indicates that
the data should be byte-swapped after reading (for input only).

See also: @ref{File Arrays}, @ref{array}

@c -------------------------------------
@node fmap, format_set, fltfarr, Internal Routines
@subsection fmap
@findex fmap

@code{fmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{float} array.

See also: @ref{smap}, @ref{bmap}, @ref{wmap}, @ref{lmap}, @ref{dmap}

@c -------------------------------------
@node format_set, fprint, fmap, Internal Routines
@subsection format_set
@findex format_set

@code{format_set [, @var{string}]}

Sets (if @code{@var{string}} is specified) or resets (if
@code{@var{string}} is not specified) the format strings
@code{!format_i}, @code{!format_f}, @code{!format_c}, and
@code{!format_s}, used as defaults by @code{print} and @code{printf}.
@code{@var{string}} must be a c-like format string, which will be parsed
for formats suitable for each of the @code{!format@dots{}} strings.

See also: @ref{Output Data Formats}, @ref{fprint}, @ref{!format_c},
@ref{!format_i}, @ref{!format_f}, @ref{!format_s}

@c -------------------------------------
@node fprint, fprintf, format_set, Internal Routines
@subsection fprint
@findex fprint

@code{fprint, @var{format}, @var{arg1} [, @var{arg2} @dots{}] [,
/element]}

Print arguments under guidance of format string @code{@var{format}}.  If
there are more arguments than entries in the format string, then the
last format entry in @code{@var{format}} is repeated as necessary to
service all remaining arguments.  Arguments @code{@var{arg1}},
@code{@var{arg2}} are cast to the type appropriate for the corresponding
format entry.  One format entry is used per argument, unless
@code{/element} is specified, in which case one format entry per output
number is used.  This is only of interest when treating arrays.

See also: @ref{Output Data Formats}, @ref{print}, @ref{printf},
@ref{fprintf} 

@c -------------------------------------
@node fprintf, fratio, fprint, Internal Routines
@subsection fprintf
@findex fprintf

@code{fprintf, @var{lun}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /element]}

Print arguments into the file on logical unit @code{@var{lun}} under
guidance of format string @code{@var{format}}.  If there are more
arguments than entries in the format string, then the last format entry
is repeated as necessary to service all remaining arguments.  Arguments
are cast to the type appropriate for the corresponding format entry.
One format entry is used per argument, unless @code{/element} is
specified, in which case on format entry per output number is used.
This is only of interest for outputting arrays.

See also: @ref{Output Data Formats}, @ref{fprint}, @ref{print}, @ref{openw}

@c -------------------------------------
@node fratio, fread, fprintf, Internal Routines
@subsection fratio
@findex fratio

@code{fratio(@var{f}, @var{nu1}, @var{nu2} [, /complement, /log])}

The f-test distribution.  Returns the probability of exceeding variance
ratio @code{@var{f}} for @code{@var{nu1}} and @code{@var{nu2}} degrees
of freedom, or one minus this number if @code{/complement} is specified.
Minus one is returned for illegal parameter combinations.  If
@code{/log} is specified, then the natural logarithm of the result is
returned instead.

See also: @ref{erf}, @ref{erfc}, @ref{chi2}, @ref{student}, @ref{ibeta}.

@c -------------------------------------
@node fread, freadf, fratio, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fread
@findex fread

@code{fread, @var{format}, @var{arg1} [, @var{arg2} @dots{}] [,
/countspaces]}

Reads arguments from the standard input (usually the keyboard) under
guidance of format string @code{@var{format}}.  The target arguments
must be either named variables, or subscripted named variables.  If
@code{/countspaces} is specified, then whitespace counts against field
width.

Reverse: @ref{fprint}

See also: @ref{!read_count}, @ref{Input Data Formats}, @ref{freadf}

@c -------------------------------------
@node freadf, freads, fread, Internal Routines
@subsection freadf
@findex freadf

@code{freadf, @var{lun}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces]}

@code{freadf(@var{lun}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces])}

Reads arguments from the file on logical unit @code{@var{lun}} under
guidance of format string @code{@var{format}}.  The target arguments
must be either named variables, or subscripted named variables.  If
@code{/countspaces} is specified then whitespace counts against field
width.  The function form returns the number of successfully converted
arguments.

Alias: @ref{scanf}

Reverse: @ref{fprintf}

See also: @ref{!read_count}, @ref{Input Data Formats}, @ref{readf}

@c -------------------------------------
@node freads, fstring, freadf, Internal Routines
@subsection freads
@findex freads

@code{freads, @var{string}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces]}

@code{freads(@var{string}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces])}

Reads arguments from the @code{@var{string}} under guidance of format
string @code{@var{format}}.  The target arguments must be either named
variables, or subscripted named variables.  The function form returns
the number of successfully converted arguments.  If @code{/countspaces}
is specified, then whitespace counts against field width.

Alias: @ref{sscanf}

See also: @ref{!read_count}, @ref{Input Data Formats}, @ref{readf},
@ref{freadf}

@c -------------------------------------
@node fstring, fsum, freads, Internal Routines
@subsection fstring
@findex fstring

@code{fstring(@var{format}, @var{argument1} [, @var{argument2} @dots{},
/skip_undefined])}

Transforms the arguments to an ascii string under guidance of c-format
string @code{@var{format}}.  The arguments are modified to suit the data
types expected according to the format.  If keyword
@code{/skip_undefined} is specified, then undefined arguments (and the
format entries corresponding to them) are skipped.  This is useful if
the number of arguments to @code{fstring} is not known exactly in
advance.

Alias: @ref{sprintf}

See also: @ref{string}, @ref{fprint}, @ref{Output Data Formats}

@c -------------------------------------
@node fsum, fw2m, fstring, Internal Routines
@subsection fsum
@findex fsum

@code{fsum(@var{x} [, @var{mode}, power=@var{power},
weights=@var{weights}, /double, /keepdims])}

An alias of @code{total}.

See also: @ref{total}, @ref{dsum}, @ref{mean}

@c -------------------------------------
@node fw2m, fw2xy, fsum, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fw2m
@findex fw2m

@code{fw2m(@var{gamma_bar}, @var{phi_bar}, @var{psi}, @var{eps})}

[SOFA] Forms a rotation matrix given the Fukushima-Williams angles
@code{@var{gamma_bar}}, @code{@var{phi_bar}}, @code{@var{psi}}, and
@code{@var{eps}}, all measured in radians.  All parameters must have
the same dimensions.  The result has those same dimensions again, but
with two dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fw2xy, fzarr, fw2m, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fw2xy
@findex fw2xy

@code{fw2xy, @var{gamma_bar}, @var{phi_bar}, @var{psi}, @var{eps},
@var{x}, @var{y}}

[SOFA] Returns CIP @code{@var{x}}, @code{@var{y}}, given the
Fukushima-Williams bias-precession-nutation angles
@code{@var{gamma_bar}}, @code{@var{phi_bar}}, @code{@var{psi}},
@code{@var{eps}}.  All of the input and output parameters are measured
in radians.  They all have the same dimensions.

If @code{e} is the J2000.0 ecliptic pole, @code{p} is the GCRS pole,
@code{e} is the ecliptic pole of the date, and @code{p} is the CIP,
then the four Fukushima-Williams angles are: @code{gamma_bar = epE},
@code{phi_bar = pE}, @code{psi = pEP}, and @code{eps = ep}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node fzarr, fzh, fw2xy, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fzarr
@findex fzarr

@code{fzarr(@var{filename} [, /readonly])}

Returns a file array appropriate for accessing the fz file with name
@code{@var{filename}}.  Keyword @code{/readonly} disallows writing into
the fz file through the file array.

@c -------------------------------------
@node fzh, fzhead, fzarr, Internal Routines
@subsection fzh
@findex fzh

@code{fzh, @var{file} [, @var{header}]}

@code{fzh(@var{file} [, @var{header}])}

Reads header string of fz @code{@var{file}}, and displays it or stores
it in @code{@var{header}}.  The function form returns @code{1} when
successful, @code{0} otherwise.

See also: @ref{f0read}, @ref{f0write}, @ref{fcwrite}

Alias: @ref{f0h}, @ref{f0head}, @ref{fzhead}

@c -------------------------------------
@node fzhead, fzinspect, fzh, Internal Routines
@subsection fzhead
@findex fzhead

@code{fzhead, @var{file} [, @var{header}]}

@code{fzhead(@var{file} [, @var{header}])}

Reads header string of fz @code{@var{file}}, and displays it or stores
it in @code{@var{header}}.  The function form returns @code{1} when
successful, @code{0} otherwise.

See also: @ref{f0read}, @ref{f0write}, @ref{fcwrite}

Alias: @ref{f0h}, @ref{fzh}, @ref{f0head}

@c -------------------------------------
@node fzinspect, fzr, fzhead, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection fzinspect
@findex fzinspect

@code{fzinspect, @var{name}, @var{params} [, @var{header}]}

Returns info about the fz file with name @code{@var{name}}.  The file
size is returned in @code{@var{params}(0)}, the data type in
@code{@var{params}(1)}, the number of dimensions in
@code{@var{params}(2)}, and the dimensions in @code{@var{params}(3)}
through @code{@var{params}(10)}.  Optionally, the file header is
returned in @code{@var{header}}.

If the file is not an fz file, then @code{@var{params}(0)} is set to
@minus{}1 but no error is generated.  If @code{@var{name}} is not a
@code{string}, then an error is generated.

See also: @ref{fzread}, @ref{fzwrite}, @ref{fzhead}

@c -------------------------------------
@node fzr, fzread, fzinspect, Internal Routines
@subsection fzr
@findex fzr

@code{fzr, @var{var}, @var{file} [, @var{header}, /printheader]}

@code{fzr(@var{var}, @var{file} [, @var{header}, /printheader])}

Retrieves @code{@var{var}} and @code{@var{header}} from (compressed or
uncompressed) fz @code{@var{file}}.  If @code{@var{header}} is not
specified, then the header is displayed on the screen unless
@code{/noprintheader} was specified.  The function form returns 1 if
successful, otherwise 0.

See also: @ref{fzhead}, @ref{fzwrite}, @ref{fcwrite}

Alias: @ref{fzread}, @code{@var{f0r}}, @code{@var{f0read}}

@c -------------------------------------
@node fzread, fzw, fzr, Internal Routines
@subsection fzread
@findex fzread

@code{fzread, @var{var}, @var{file} [, @var{header}, /printheader]}

@code{fzread( @var{var}, @var{file} [, @var{header}, /printheader])}

Retrieves @code{@var{var}} and @code{@var{header}} from (compressed or
uncompressed) fz @code{@var{file}}.  If @code{@var{header}} is not
specified, then the header is displayed on the screen, unless
@code{/noprintheader} was specified.  The function form returns @code{1}
if successful, otherwise @code{0}.

See also: @ref{fzhead}, @ref{fzwrite}, @ref{fcwrite}

Alias: @ref{fzr}, @code{@var{f0r}}, @code{@var{f0read}}

@c -------------------------------------
@node fzw, fzwrite, fzread, Internal Routines
@subsection fzw
@findex fzw

@code{fzw, @var{var}, @var{file} [, @var{header}]}

@code{fzw(@var{var}, @var{file} [, @var{header}])}

Writes array @code{@var{var}} and @code{@var{header}} string into
uncompressed fz @code{@var{file}}.  The function version returns
@code{1} on success, @code{0} on failure, and no error messages.

See also: @ref{fcwrite}, @ref{fzread}, @ref{fzhead}

Alias: @ref{fzwrite}, @ref{f0w}, @ref{f0write}

@c -------------------------------------
@node fzwrite, gamma, fzw, Internal Routines
@subsection fzwrite
@findex fzwrite

@code{fzwrite, @var{var}, @var{file} [, @var{header}]}

@code{fzwrite(@var{var}, @var{file} [, @var{header}])}

Writes array @code{@var{var}} and also @code{@var{header}} (which may be
a string or a string array) into uncompressed fz @code{@var{file}}.  The
function version returns @code{1} on success, @code{0} on failure, and
no error messages.

See also: @ref{fcwrite}, @ref{fzread}, @ref{fzhead}

Alias: @ref{fzw}, @ref{f0w}, @ref{f0write}

@c -------------------------------------
@node gamma, gc2gd, fzwrite, Internal Routines
@subsection gamma
@findex gamma

@code{gamma(@var{x} [, /log])}

Returns values of the gamma function.  If the @code{/log} keyword is
specified, then the natural logarithm of the absolute value of the gamma
function is returned.

See also: @ref{igamma}, @ref{beta}

@c -------------------------------------
@node gc2gd, gc2gde, gamma, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gc2gd
@findex gc2gd

@code{gc2gd(@var{ellid}, @var{xyz})}

[SOFA] Returns geodetic coordinates (eastward longitude in radians,
northward latitude in radians, height above the ellipsoid in meters)
corresponding to geocentric coordinates @code{@var{xyz}} (in meters)
using the specified reference ellipsoid @code{@var{ellid}} (1 = wgs84,
2 = grs80, 3 = wgs72).  @code{@var{xyz}} must have 3 elements in its
first dimension, and @code{@var{ellid}} must have a single element.
The result has the same dimensions as @code{@var{xyz}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gc2gde, gcommand, gc2gd, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gc2gde
@findex gc2gde

@code{gc2gde(@var{xyz}, @var{a}, @var{f})}

[SOFA] Returns geodetic coordinates (eastward longitude in radians,
northward latitude in radians, height above the ellipsoid in meters)
corresponding to geocentric coordinates @code{@var{xyz}} using a
reference ellipsoid with equatorial radius @code{@var{a}} and
flattening @code{@var{f}}.  @code{@var{xyz}} and @code{@var{a}} must
be in the same units, and the returned height is given in that same
unit, too.  @code{@var{xyz}} must have 3 elements in its first
dimension.  @code{@var{a}} and @code{@var{f}} must each have a single
element.  The result has the same dimensions as @code{@var{xyz}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gcommand, gcontour, gc2gde, Internal Routines
@subsection gcommand
@findex gcommand

@code{gcommand, @code{@var{command}}}

Sends the @code{@var{command}} text to the gnuplot program.

@c -------------------------------------
@node gcontour, gd2gc, gcommand, Internal Routines
@subsection gcontour
@findex gcontour

@code{gcontour, @code{@var{x} [, /equalxy, /image]}}

Displays a contour plot of 2D data set @code{@var{x}} via the
gnuplot program.

@code{/equalxy} says to give the plot the same aspect ratio as the
dimensions of @code{@var{x}}.

@code{/image} says to display @code{@var{x}} as an image with the
contours on top.

@c -------------------------------------
@node gd2gc, gd2gce, gcontour, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gd2gc
@findex gd2gc

@code{gd2gc(@var{ellid}, @var{eph})}

[SOFA] Returns geocentric coordinates (x, y, z) in meters
corresponding to geodetic coordinates @code{@var{eph}} (east longitude
in radians, north latitude in radians, height in meters) for the
specified reference ellipsoid @code{@var{ellid}} (1 = wgs84, 2 =
grs80, 3 = wgs72). @code{@var{eph}} must have 3 elements in its first
dimension, and @code{@var{ellid}} must have a single element.  The
result has the same dimensions as @code{@var{eph}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gd2gce, ge, gd2gc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gd2gce
@findex gd2gce

@code{gd2gce(@var{eph}, @var{a}, @var{f})}

[SOFA] Returns geocentric coordinates (x, y, z) corresponding to
geodetic coordinates @code{@var{eph}} (east longitude in radians,
north latitude in radians, height) for the reference ellipsoid with
equatorial radius @code{@var{a}} and flattening @code{@var{f}}.
@code{@var{a}}, the height, and the returned coordinates x, y, z are
all in the same units.  @code{@var{eph}} must have 3 elements in its
first dimension.  @code{@var{a}} and @code{@var{f}} must have exactly
one element.  The result has the same dimensions as @code{@var{eph}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ge, getdirectories, gd2gce, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ge
@findex ge

a binary logical operator that works on numerical or string arguments
@code{x} and @code{y} and that returns @code{1} for every element of
@code{x} that is greater than or equal to the corresponding element of
@code{y}, and @code{0} otherwise.  String arguments are compared
character by character, according to the positions of the characters in
the character set.  @code{'AB' ge 'AAA'} yields @code{1}, and @code{'A'
ge 'AA'} yields @code{0}.

See also: @ref{eq}, @ref{ne}, @ref{gt}, @ref{lt}, @ref{le}

@c -------------------------------------
@node getdirectories, getdirects, ge, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getdirectories
@findex getdirectories

@code{getdirectories(@var{directory} [, @var{maxfiles}])}

Returns, in a string array, a list of names of subdirectories that
reside in the @code{@var{directory}}.  If @code{@var{maxfiles}} is
specified, then at most that many subdirectories are returned.
Otherwise, at most 100 names are returned.  If no subdirectories are
found, then scalar @code{0} is returned.

Alias: @ref{getdirects}

See also: @ref{findfile}, @ref{getfiles}, @ref{getmatchedfiles}

@c -------------------------------------
@node getdirects, getenv, getdirectories, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getdirects
@findex getdirects

@code{getdirects(@var{directory} [, @var{maxfiles}])}

Returns, in a string array, a list of names of subdirectories that
reside in the @code{@var{directory}}.  If @code{@var{maxfiles}} is
specified, then at most that many subdirectories are returned.
Otherwise, at most 100 names are returned.  If no subdirectories are
found, then scalar @code{0} is returned.

Alias: @ref{getdirectories}

See also: @ref{findfile}, @ref{getfiles}, @ref{getmatchedfiles}

@c -------------------------------------
@node getenv, getfiles, getdirects, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getenv
@findex getenv

@code{getenv(@var{name})}

Returns the translation of the environment variable specified in string
@code{@var{name}}, if any, or else an empty string.

@c -------------------------------------
@node getfiles, getfiles_r, getenv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getfiles
@findex getfiles

@code{getfiles(@var{directory} [, @var{maxfiles}])}

Returns, in a string array, a list of names of files from the
@code{@var{directory}}.  Names of subdirectories or of files in
subdirectories are not included.  If @code{@var{maxfiles}} is specified,
then at most that many file names are returned.  If it was not
specified, then at most 100 file names are returned.  The file names are
absolute, i.e., include specification of the exact directory where they
were found.  If no files are found, then scalar @code{0} is returned.

See also: @ref{findfile}, @ref{getfiles_r}

@c -------------------------------------
@node getfiles_r, getmatchedfiles, getfiles, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getfiles_r
@findex getfiles_r

@code{getfiles_r(@var{directory} [, @var{maxfiles}])}

Returns, in a string array, a list of names of files from the
@code{@var{directory}} and its subdirectories.  Names of subdirectories
are not included.  If @code{@var{maxfiles}} is specified, then at most
that many file names are returned.  If it was not specified, then at
most 100 file names are returned.  The file names are absolute, i.e.,
include specification of the exact directory where they were found.  If
no file names are found, then scalar @code{0} is returned.

See also: @ref{findfile}, @ref{getfiles}

@c -------------------------------------
@node getmatchedfiles, getmatchedfiles_r, getfiles_r, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getmatchedfiles
@findex getmatchedfiles

@code{getmatchedfiles(@var{regexp}, @var{directory} [, @var{maxfiles}])}

@code{[regex_h]} Returns, in a string array, a list of names of files
from the @code{@var{directory}} that match the pattern
@code{@var{regexp}}.  At most @code{@var{maxfiles}} files are returned,
which defaults to 100.  If no files are found, then scalar 0 is
returned.

The pattern is a regular expression.  Matches to parts of the file names
are accepted.  Regular expressions consist of ordinary characters (which
must be matched as is) and special characters.  Some of the special
characters and their meanings are:
@table @code
@item .
Matches any single character.
@item [...]
Matches any single character from the set listed between the square
brackets.
@item [^...]
Matches any single character except those from the set listed between
the square brackets.
@item *
Matches zero or more successive occurrences of the preceding regular
expression. 
@item ^
Matches the beginning of the line (if it is the first character in the
pattern).
@item $
Matches the end of the line (if it is the last character in the
pattern).
@item \@{m,n\@}
Matches between @code{m} and @code{n} successive occurrences of the
preceding regular expression; @code{\@{m\@}} matches exactly @code{m}
occurrences, and @code{\@{m,\@}} matches at least @code{m} occurrences.
@item \
Removes the special status from the following character; i.e., @code{\*}
stands for an asterisk.
@end table

This routine is only available if your computer platform supports it.

See also: @ref{getfiles}, @ref{getmatchedfiles_r}

@c -------------------------------------
@node getmatchedfiles_r, getmin9, getmatchedfiles, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection getmatchedfiles_r
@findex getmatchedfiles_r

@code{getmatchedfiles_r(@var{regexp}, @var{directory} [,
@var{maxfiles}])}

@code{[regex_h]} Returns, in a string array, a list of names of files
from in or below the @code{@var{directory}} that match the pattern
@code{@var{regexp}}.  At most @code{@var{maxfiles}} files are returned,
which defaults to 100.  If no files are found, then scalar @code{0} is
returned.

This routine is only available if your computer platform supports it.

See also: @ref{getfiles_r}, @ref{getmatchedfiles}

@c -------------------------------------
@node getmin9, get_lun, getmatchedfiles_r, Internal Routines
@subsection getmin9
@findex getmin9

@code{getmin9, @var{array}, @var{x}, @var{y}}

Returns the position of the interpolated minimum of 3 by 3 element
@code{@var{array}} in @code{@var{x}} and @code{@var{y}}.

@c -------------------------------------
@node get_lun, gifread, getmin9, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection get_lun
@findex get_lun

@code{get_lun()}

Return the number of a logical unit that is currently unused.

See also: @ref{openr}

@c -------------------------------------
@node gifread, gifwrite, get_lun, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gifread
@findex gifread

@code{gifread, @var{image}, @var{file} [, @var{colormap}]}

Reads a gif @code{@var{image}} and (optionally) the
@code{@var{colormap}} from the named @code{@var{file}} (a
@code{string}).

See also: @ref{gifwrite}

@c -------------------------------------
@node gifwrite, gmst00, gifread, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gifwrite
@findex gifwrite

@code{gifwrite, @var{image}, @var{file} [, @var{colormap}]}

Writes the @code{@var{image}} and (optionally) @code{@var{colormap}} to
the @code{@var{file}} in the gif format.  @code{@var{colormap}} must be
a 3 by 256 element @code{byte} array containing rgb triplets.

See also: @ref{gifread}

@c -------------------------------------
@node gmst00, gmst06, gifwrite, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gmst00
@findex gmst00

@code{gmst00(@var{jdut}, @var{jdtt})}

[SOFA] Returns Greenwich mean sidereal time in radians according to a
model consistent with IAU 2000 resolutions.  @code{@var{jdut}} is the
Julian Date (UT1).  @code{@var{jdtt}} is the Julian Date (TT) of the
same instant.  @code{@var{jdut}} is needed to predict the Earth
rotation, and TT to predict the effects of precession.  If
@code{@var{jdtt}} is set equal to @code{@var{jdut}} then errors of
order 100 microarcseconds result.  Both parameters must have the same
dimensions, and the result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gmst06, gmst82, gmst00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gmst06
@findex gmst06

@code{gmst06(@var{jdut}, @var{jdtt})}

[SOFA] Returns Greenwich mean sidereal time in radians according to a
model that is consistent with IAU 2006 precession.  @code{@var{jdut}}
is the Julian Date (UT1).  @code{@var{jdtt}} is the Julian Date (TT)
of the same instant. @code{@var{jdut}} is needed to predict the Earth
rotation, and TT to predict the effects of precession.  If
@code{@var{jdtt}} is set equal to @code{@var{jdut}} then errors of
order 100 microarcseconds result.  Both parameters must have the same
dimensions, and the result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gmst82, goplot, gmst06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gmst82
@findex gmst82

@code{gmst82(@var{jdut})}

[SOFA] Returns Greenwich mean sidereal time in radians for the given
UT1 Julian Date @code{@var{jdut}}, according to the IAU 1982 model.
The result has the same dimensions as @code{@var{jdut}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node goplot, gplot, gmst82, Internal Routines
@subsection goplot
@findex goplot

@code{goplot[,@var{x}],@var{y}[,dashtype=@var{dashtype},legend=@var{legend}]}

Adds the graph of @code{@var{y}} versus @code{@var{x}} to the previous
plot created using @code{gplot} or @code{goplot}, through the external
"gnuplot" program, if that program is available.

If only one of @code{@var{x}} and @code{@var{y}} are specified, then
it is interpreted as @code{@var{y}} and provides the y coordinates of
the data points to plot, with default x coordinates.  If both are
specified, then they must have the same dimensional structure.  Then
the x coordinates are taken from @code{@var{x}} and the y coordinates
are taken from @code{@var{y}}.

@code{@var{dashtype}} is a non-negative integer that selects the kind
of dashes to use to draw the lines.

@code{@var{legend}} specifies the text with which to identify the
graph in the legend in the plot.

@c -------------------------------------
@node gplot, gplot3d, goplot, Internal Routines
@subsection gplot
@findex gplot

@code{gplot[,@var{x}],@var{y}[,@var{z}]
        [,dashtype=@var{dashtype}]
        [,xtitle=@var{xtitle},ytitle=@var{ytitle},ztitle=@var{ztitle}]
        [,title=@var{title}]
        [,legend=@var{legend}]
        [,/lii,/loi,/lio,/loo]
        [,/liii,/loii,/lioi,/looi,/liio,/loio,/lioo,/looo]}

Plots @code{@var{y}} versus @code{@var{x}}, or @code{@var{z}} versus
@code{@var{x}} and @code{@var{y}} through the external "gnuplot"
program, if that program is available.

If only one of @code{@var{x}}, @code{@var{y}}, @code{@var{z}} are
specified, then it is interpreted as @code{@var{y}} and provides the y
coordinates of the data points to plot, with default x coordinates.
If @code{@var{x}} and @code{@var{y}} are specified, then they must
have the same dimensional structure.  Then the x coordinates are taken
from @code{@var{x}} and the y coordinates are taken from
@code{@var{y}}.  If @code{@var{x}}, @code{@var{y}}, and @code{@var{z}}
are specified, then all three must have the same dimensional structure
and provide the x, y, and z coordinates of the points to plot.

@code{@var{dashtype}} is a non-negative integer that selects the kind
of dashes to use to draw the lines.

@code{@var{xtitle}} provides the title for the x axis.

@code{@var{ytitle}} provides the title for the y axis.

@code{@var{ztitle}} provides the title for the y axis.

@code{@var{title}} provides the main title, displayed above the plot.

@code{@var{legend}} specifies the text with which to identify the
graph in the legend in the plot.

Mode parameters @code{/lii /loi /lio /loo} specify whether the x and y
axes are linear (@code{i}) or logarithmic (@code{o}) for the x (first
@code{i} or @code{o}) and y (second @code{i} or @code{o}) axes.  Mode
parameters @code{/liii /loii /lioi /looi /liio /loio /lioo /looo}
similarly specify for the x, y, and z axes.

@c -------------------------------------
@node gplot3d, gridmatch, gplot, Internal Routines
@subsection gplot3d
@findex gplot3d

@code{gplot3d[, @code{@var{x}}, @code{@var{y}}], @code{@var{z}}
  [,xtitle=@var{xtitle},ytitle=@var{ytitle},ztitle=@var{ztitle},title=@var{title}]
  [,rotx=@var{rotx},roty=@var{roty}]
  [,contours=@var{contours}][,/flat]
  [,/lii,/lio,/loi,/loo]}

Displays a 3D plot of 2D data set @code{@var{z}} via the gnuplot
program.

If @code{@var{x}} and @code{@var{y}} are specified, then they provide
the x and y coordinates for the columns and rows of @code{@var{z}}.
They must be 1D data sets, with @code{@var{x}} having as many elements
as the first dimension of @code{@var{z}}, and @code{@var{y}} having as
many elements as the second dimension of @code{@var{z}}.

@code{@var{xtitle}} is the title for the x axis.

@code{@var{ytitle}} is the title for the y axis.

@code{@var{ztitle}} is the title for the z axis.

@code{@var{title}} is the main title, displayed above the plot.

@code{@var{rotx}} is the rotation angle (in degrees) around the x
axis.

@code{@var{rotz}} is the rotation angle (in degrees) around the z axis
(after applying the rotation around the x axis, if any).

@code{@var{contours}} specifies contour levels.  If
@code{@var{contours}} is a scalar equal to integer 1 (e.g.,
@code{/contours}), then it says to show automatically selected
contours.  Otherwise, if @code{@var{contours}} is a real scalar, then
it specifies the desired number of contours to display, but the levels
are selected automatically.  Otherwise, if @code{@var{contours}} is an
array, then it specifies the contour levels to use.

@code{/flat} requests an orthographic view from above; i.e., a flat
image.

@code{/lii} requests linear x and y axes; @code{/loi} requests
logarithmic x and linear y axes; @code{/lio} requests linear x and
logarithmic y axes; @code{/loo} requests logarithmic x and y axes.

@c -------------------------------------
@node gridmatch, gsmooth, gplot3d, Internal Routines
@subsection gridmatch
@findex gridmatch

@code{gridmatch(@var{image1}, @var{image0}, @var{grid_x}, @var{grid_y},
@var{window_x}, @var{window_y}, @var{gausswidth} [, @var{mode}] [,
/vocal])}

Determines and returns displacement of one image compared to another.

@table @var
@item image1
is image under investigation.
@item image0
is the reference image.
@item grid_x grid_y
are the coordinates of the grid of (centers of) subimages for which
displacements are returned. 
@item window_x window_y
are the dimensions of the subimages.
@item gausswidth
is the width of the gaussian window applied to the subimages to reduces
edge effects.
@item mode
is a flag.  If it is set, then a quality parameter is also returned, as
the third coordinate of the result.
@end table

Keyword @code{/vocal} enables display of various warning messages.

@c -------------------------------------
@node gsmooth, gst00a, gridmatch, Internal Routines
@subsection gsmooth
@findex gsmooth

@code{gsmooth(@var{data} [[, @var{axis}], @var{width}, /normalize,
/fullnorm, /balanced, /all])}

Returns a smoothed version of @code{@var{data}}, with a gaussian
smoothing kernel with a FWHM of @code{@var{width}} elements along axes
@code{@var{axis}}.  Both @code{@var{axis}} and @code{@var{width}} may
have more than one element, in which case multiple smoothing passes are
performed using subsequent values of these arguments.

Keyword @code{/fullnorm} specifies that the weighted sum of data values
is always normalized with the full sum of weights in the kernel: it adds
in data values beyond the edges of @code{@var{data}} as zeros.

Keyword @code{/balanced} reduces the width of the included data set so
that the weighted and included data is always balanced around the
central point: in this way, a smoothed version of a straight line is
also a straight line.

Keyword @code{/all} specifies that all axes must be smoothed along, but
is ignored if @code{@var{axis}} is specified.

See also: @ref{smooth}, @ref{esmooth}


@c -------------------------------------
@node gst00a, gst00b, gsmooth, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gst00a
@findex gst00a

@code{gst00a(@var{jdut}, @var{jdtt})}

[SOFA] Returns Greenwich apparent sidereal time in radians consistent
with IAU 2000 resolutions.  @code{@var{jdut}} is the Julian Date
(UT1).  @code{@var{jdtt}} is the Julian Date (TT) of the same
instant. @code{@var{jdut}} is needed to predict the Earth rotation,
and TT to predict the effects of precession.  If @code{@var{jdtt}} is
set equal to @code{@var{jdut}} then errors of order 100
microarcseconds result.  Both parameters must have the same
dimensions, and the result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gst00b, gst06, gst00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gst00b
@findex gst00b

@code{gst00b(@var{jdut})}

[SOFA] Returns Greenwich apparent sidereal time in radians consistent
with IAU 2000 resolutions but using the truncated nutation model IAU
2000B.  @code{@var{jdut}} is the Julian Date (UT1).  The result has
those same dimensions as @code{@var{jdut}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gst06, gst06a, gst00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gst06
@findex gst06

@code{gst06(@var{jdut}, @var{jdtt}, @var{rnpb})}

[SOFA] Returns Greenwich apparent sidereal time in radians consistent
with IAU 2006 resolutions, given the nutation-precession-bias matrix
@code{@var{rnpb}}. @code{@var{jdut}} is the Julian Date (UT1).
@code{@var{jdtt}} is the Julian Date (TT) of the same
instant. @code{@var{jdut}} is needed to predict the Earth rotation,
and TT to predict the effects of precession.  If @code{@var{jdtt}} is
set equal to @code{@var{jdut}} then errors of order 100
microarcseconds result.  @code{@var{jdut}} and @code{@var{jdtt}} must
have the same dimensions.  @code{@var{rnpb}} must have those
dimensions, too, with two extra dimensions equal to 3 prefixed.  The
result has the same dimensions as @code{@var{jdut}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gst06a, gst94, gst06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gst06a
@findex gst06a

@code{gst06a(@var{jdut}, @var{jdtt})}

[SOFA] Returns Greenwich apparent sidereal time in radians consistent
with IAU 2000 and 2006 resolutions.  @code{@var{jdut}} is the Julian
Date (UT1).  @code{@var{jdtt}} is the Julian Date (TT) of the same
instant. @code{@var{jdut}} is needed to predict the Earth rotation,
and TT to predict the effects of precession.  If @code{@var{jdtt}} is
set equal to @code{@var{jdut}} then errors of order 100
microarcseconds result.  @code{@var{jdut}} and @code{@var{jdtt}} must
have the same dimensions.  The result has those same dimensions as
well.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gst94, gt, gst06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gst94
@findex gst94

@code{gst94(@var{jdut})}

[SOFA] Returns Greenwich apparent sidereal time in radians for the
given UT1 Julian Date @code{@var{jdut}}, consistent with IAU 1982/94
resolutions.  The result has the same dimensions as @code{@var{jdut}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node gt, gtv, gst94, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gt
@findex gt

@code{x gt y}

a binary logical operator that works on numerical or string arguments
@code{x} and @code{y} and that returns @code{1} for every element of
@code{x} that is greater than the corresponding element of @code{y}, and
@code{0} otherwise.  String arguments are compared character by
character, according to the positions of the characters in the character
set.

See also: @ref{ne}, @ref{eq}, @ref{ge}, @ref{lt}, @ref{le}

@c -------------------------------------
@node gtv, h2fk5, gt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection gtv
@findex gtv

@code{gtv, @var{x}}

Displays the image @code{@var{x}} through the gnuplot program.

@c -------------------------------------
@node h2fk5, hairs, gtv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection h2fk5
@findex h2fk5

@code{h2fk5, @var{rah}, @var{dech}, @var{drah}, @var{ddech},
@var{pxh}, @var{rvh}, @var{ra5}, @var{dec5}, @var{dra5}, @var{ddec5},
@var{px5}, @var{rv5}}

[SOFA] Transforms Hipparcos star data into the FK5 (J2000.0) system.
The Hipparcos data is: right ascension @code{@var{rah}} (radians),
declination @code{@var{dech}} (radians), proper motion in right
ascension @code{@var{drah}} (dRA/dt, in radians per Julian year),
proper motion in declination @code{@var{ddech}} (dDec/dt, in radians
per Julian year), parallax @code{@var{pxh}} (arcseconds), radial
velocity @code{@var{rvh}} (km/s receding).  The FK5 data is: right
ascension @code{@var{ra5}}, declination @code{@var{dec5}}, proper
motion in right ascension @code{@var{dra5}}, proper motion in
declination @code{@var{ddec5}}, parallax @code{@var{px5}}, radial
velocity @code{@var{rv5}}, all in the same units as the corresponding
Hipparcos quantities.  All input/output parameter (must) have the same
dimensions.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node hairs, help, h2fk5, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection hairs
@findex hairs

@code{hairs}

@code{[@ref{x11}]} a synonym of @code{xplace}.

See also: @ref{xplace}

@c -------------------------------------
@node help, hex, hairs, Internal Routines
@subsection help
@findex help

@code{help [, @var{topic}]}

Yields information on the specified @code{@var{topic}} (a string).  To
start at the top of the help tree, try @code{help}.
@code{@var{topic}} is case-insensitive.  The information is extracted
from the LUX info files (for built-in routines and features of the LUX
language) and @file{$LUX_path/*} (for user-defined subroutines and
functions).

@c ------------------------------------
@node hex, hfk5z, help, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection hex
@findex hex

@c -------------------------------------
@node hfk5z, hilbert, hex, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection hfk5z
@findex hfk5z

@code{hfk5z, @var{rah}, @var{dech}, @var{jdtdb}, @var{ra5},
@var{dec5}, @var{dra5}, @var{ddec5}}

[SOFA] Transforms a Hipparcos star position (right ascension
@code{@var{rah}} in radians, declination @code{@var{dech}} in radians)
determined at TDB Julian Date @code{@var{jdtdb}} into the FK5
(J2000.0) system, assuming zero Hipparcos proper motion.  The returned
coordinates in the FK5 system are right ascension @code{@var{ra5}}
(radians), declination @code{@var{dec5}} (radians), FK5 right
ascension proper motion @code{@var{dra5}} (dRA/dt, radians per year),
and FK5 declination proper motion @code{@var{ddec5}} (dDec/dt, radians
per year).

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node hilbert, hist, hfk5z, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection hilbert
@findex hilbert

@code{hilbert(@var{data} [, @var{axes}, @var{direction}, /back, /all,
/avgkeep, /highkeep])}

Returns a discrete Hilbert transform of the @code{@var{data}} along the
indicated @code{@var{axes}} in the indicated @code{@var{direction}}.
The Hilbert transform changes the phases of the Fourier components in
the data by 90 degrees, replacing sines by cosines and cosines by sines
(with appropriate signs).  By default, the phases are shifted forward in
the first dimension.

If @code{@var{direction}} (after transformation to an integer) is
negative, then the phases are shifted back.  If @code{@var{direction}}
is zero or positive, then the phases are shifted forward.  If
@code{@var{direction}} is not specified, then @code{/back} implies the
backward shift.

If @code{@var{axes}} is specified, then it is taken to contain the axes
along which transformation is to be done.  No axis may appear more than
once.  The axes need not be in any specific order.  If @code{@var{axes}}
is not specified, then if @code{/all} is specified, all axes are
treated.  If neither @code{@var{axes}} nor @code{/all} are specified,
then the first axis is assumed.

By default, the forward and backward transforms are almost each other's
inverse: If you apply the one and the equivalent other in succession,
then you get the original data back, except that the Hilbert transform
sets averages to zero and also removes the very highest frequency from
the data (which by definition always has its sine component equal to
zero).  However, keyword @code{/avgkeep} retains the average, and
keyword @code{/highkeep} retains the highest frequency.

The power spectrum of the default Hilbert transform of @code{x} is equal
to the power spectrum of @code{x} itself, except at zero frequency
(corresponding to the average) and at the very highest frequency.

See also: @ref{fft}, @ref{sc}, @ref{scb}


@menu
* hilbert Details::
@end menu
@c -------------------------------------
@node hilbert Details,  , hilbert, hilbert
@comment  node-name,  next,  previous,  up
@subsubsection hilbert Details

@code{hilbert} is implemented using some routines from Paul
n. Schwarztrauber's fftpack version 4, obtained from the Netlib cd-rom
(2nd edition).

@c -------------------------------------
@node hist, histr, hilbert, Internal Routines
@subsection hist
@findex hist

@code{hist(@var{x} [, @var{l}] [, /first, /ignorelimit, /increaselimit,
/silent])}

Returns the histogram (binsize 1) of @code{@var{x}}.  If @code{@var{l}}
is not specified, then the histogram runs between values @code{!histmin}
(zero or negative) and @code{!histmax}, and cannot exceed
@code{!maxhistsize} bins, unless @code{/ignorelimit} or
@code{/increaselimit} are specified.  @code{/ignorelimit} causes the
limit to be ignored, so that histograms of arbitrary (possibly very
large!) size are allowed.  @code{/increaselimit} increases the value of
@code{!maxhistsize} if necessary to accomodate the current histogram.
If @code{/first} is specified and @code{@var{x}} is multidimensional,
then histograms along the first dimension are returned.  By default, a
single histogram of the whole array is returned.

By default, a warning is issued if @code{@var{x}} contains negative
values (so that the first element of the histogram does not refer to
value 0 from @code{@var{x}} but to the most negative value).  If
@code{/silent} is specified, then the warning is suppressed.

If @code{@var{l}} is specified, then in it a list of unique values in
@code{@var{x}} is returned, in ascending order, and the return value of
the function is the corresponding frequency table.  In this case, the
keywords are ignored, and there is no specific limit on the size of the
histogram.  This form of the function is useful if one expects that the
histogram is large yet sparsely occupied.

See also: @ref{histr}, @ref{distr}, @ref{!histmin}, @ref{!histmax},
@ref{!maxhistsize}

@c -------------------------------------
@node histr, ibeta, hist, Internal Routines
@subsection histr
@findex histr

@code{histr(@var{x} [, /first, /silent])}

Returns the normalized (to between 0 and 1) running sum of the histogram
of @code{@var{x}}.  The histogram runs between values @code{!histmin}
(zero or negative) and @code{!histmax}, and cannot exceed
@code{!maxhistsize} bins.  If @code{/first} is specified and
@code{@var{x}} is multidimensional, then histograms along the first
dimension are returned.  By default, a single histogram of the whole
array is returned.

By default, a warning is issued if @code{@var{x}} contains negative
values (so that the first element of the histogram does not refer to
value 0 from @code{@var{x}} but to the most negative value).  If
@code{/silent} is specified, then the warning is suppressed.

See also: @ref{hist}

@c -------------------------------------
@node ibeta, idlread, histr, Internal Routines
@subsection ibeta
@findex ibeta

@code{ibeta(@var{x}, @var{a}, @var{b} [, /complement])}

Returns the incomplete beta function: integral over @code{t} from 0 to
@code{@var{x}} of @code{t^(@var{a}-1) (1 - t)^(@var{b}-1) /
beta(@var{a},@var{b})}, for @code{@var{x}} between 0 and 1 (inclusive)
and @code{@var{a}}, @code{@var{b}} positive.  If keyword
@code{/complement} is specified, then one minus this value is returned.
Minus one is returned for illegal parameter combinations.

See also: @ref{beta}

@c -------------------------------------
@node idlread, idlrestore, ibeta, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection idlread
@findex idlread

@code{idlread(@var{var}, @var{filename})}

This function reads the contents of the first variable from the idl Save
file with name @code{@var{filename}} and stores the result in
@code{@var{var}}.  Currently, only scalars (@ref{Scalars}), strings
(@ref{Strings}), and numerical arrays (@ref{Arrays}) are supported.  The
function returns @code{0} if a variable of a different class is
encountered, or if any other kind of error is encountered.  The function
returns @code{1} on success.

See also: @ref{idlrestore}, @ref{arestore}

@c -------------------------------------
@node idlrestore, igamma, idlread, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection idlrestore
@findex idlrestore

@code{idlrestore, @var{filename}}

This routine restores variables from the idl Save file with name
@code{@var{filename}}.  The variables are restored with the names they
had in idl.  Currently, only scalars (@ref{Scalars}), strings
(@ref{Strings}), and numerical arrays (@ref{Arrays}) are supported.  If
a variable of a different class is encountered, then an error is
generated.

See also: @ref{idlread}, @ref{arestore}

@c -------------------------------------
@node igamma, ignore, idlrestore, Internal Routines
@subsection igamma
@findex igamma

@code{igamma(@var{a}, @var{x} [, /complement, /log])}

Returns the lower normalized incomplete gamma function: integral over
@code{t} from 0 to @code{@var{x}} of
@code{exp(-t)*t^(@var{a}-1)/gamma(@var{a})}, for @code{@var{a}} positive
and @code{@var{x}} nonnegative.  If keyword @code{/complement} is
specified, then one minus the integral is returned.  If keyword
@code{/log} is specified, then the natural logarithm of the result is
returned instead.

See also: @ref{gamma}, @ref{chi2}

@c -------------------------------------
@node ignore, imaginary, igamma, Internal Routines
@subsection ignore
@findex ignore

@code{ignore}

When this command is issued, all following commands are ignored, except
for the @code{resume} command.  This can be used to comment out large
chunck of code.  Nested @code{ignore}s are supported, i.e. code is only
then again interpreted when as many @code{resume}s have been issued as
@code{ignore}s.

See also: @ref{resume}

@c -------------------------------------
@node imaginary, index, ignore, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection imaginary
@findex imaginary

@code{imaginary(@var{x})}

Returns the imaginary part of numerical argument @var{x}.  For real
data, this is equivalent to @code{zero(@var{x})}.

See also: @ref{abs}, @ref{arg}, @ref{conjugate}, @ref{real}, @ref{zero},
@ref{Complex Numbers}

@c -------------------------------------
@node index, indgen, imaginary, Internal Routines
@subsection index
@findex index

@code{index(@var{array} [, /axis])}

Returns an index array of a sorted version of @code{@var{array}}, i.e.
@code{@var{array}(index(@var{array}))} is sorted in ascending order.  If
keyword @code{/axis} is specified, then indexing occurs along the first
dimension, otherwise the array is treated as a large 1-dimensional one.

See also: @ref{sort}

@c -------------------------------------
@node indgen, info, index, Internal Routines
@subsection indgen
@findex indgen

@code{indgen(@var{x} [, @var{coordinate}])}

Replaces each element of @code{@var{var}} with its index (or the
specified @code{@var{coordinate}} of the element).  Complex arguments
are supported.

See also: @ref{zero}, @ref{one}

@c -------------------------------------
@node info, inpolygon, indgen, Internal Routines
@subsection info
@findex info

@code{info [, /table, /time, /platform, /packages, /warranty, /copy,
/bugs, /all]}

Displays information about this version of LUX.

@table @code
@item /table
shows the size of various symbol tables.
@item /time
shows the date and time that this version was compiled.
@item /platform
shows the current platform (machine, vendor, operating system).
@item /packages
shows which packages of routines were included beyond the standard ones.
@item /warranty
displays full information about the absence of any warranty for LUX.
@item /copy
displays full information about the conditions for copying and
redistributing LUX
@item /bugs
displays information about what to do when you find a bug.
@item /all
is like specifying all mentioned keywords.
@end table

@c -------------------------------------
@node inpolygon, insert, info, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection inpolygon
@findex inpolygon

@code{inpolygon(@var{x}, @var{y}, @var{lx}, @var{ly})}

Returns indices to @code{@var{x}} and @code{@var{y}} of those points
that lie within the polygon defined by coordinates @code{@var{lx}} and
@code{@var{ly}}, or scalar @minus{}1 if no such points were found.

@c -------------------------------------
@node insert, int, inpolygon, Internal Routines
@subsection insert
@findex insert

@code{insert, @var{target}, @var{source} [, @var{x}, ...]}

Inserts @code{@var{source}} in @code{@var{target}} starting at the
position indicated by the coordinates indicated by @code{@var{x}} and
the following arguments, which must all be real scalars.

If there is a single coordinate argument, then @code{@var{target}} and
@code{@var{source}} are regarded as one-dimensional arrays and
@code{@var{x}} indicates the offset into @code{@var{target}} at which
the contents of @code{@var{source}} is to be inserted.

If there is more than one coordinate argument, then there must be one
coordinate argument for each dimension of @code{@var{target}}, and
@code{@var{source}} must have the same number of dimensions as
@code{@var{target}}.  The @code{@var{source}} data is then inserted into
the @code{@var{target}} starting at the indicated coordinates, taking
into account the dimensional structure of both.

If any element of @code{@var{source}} would be "inserted" beyond the
boundaries of @code{@var{target}}, then an error is generated before any
insertions have been done.

Note: @code{insert} is mostly obsolete, because insertion using
subscripts (@ref{Insertion}) can do everything that @code{insert} can
do, and is more versatile as well.  @code{insert} is kept around
because it was written be fore insertion through subscripts became
available and might still be used in ANA scripts converted to LUX.

@c -------------------------------------
@node int, int64, insert, Internal Routines
@subsection int
@findex int

@code{int(@var{x})}

@code{int, @var{x} [, @dots{}]}

Converts the arguments to data type @code{word} by truncating at the
decimal point (if any) and then discarding all but the two least
significant bytes.  The function returns a converted copy and leaves
@code{@var{x}} itself alone.  The subroutine modifies @code{@var{x}}
itself.

Alias: @ref{word}

See also: @ref{Number Conversion}

@c -------------------------------------
@node int64, int64arr, int, Internal Routines
@subsection int64
@findex int64

@code{int64(@var{x})}

@code{int64, @var{x} [, @dots{}]}

Converts the arguments to data type @code{int64} by truncating at the
decimal point (if any).  The function returns a converted copy and
leaves @code{@var{x}} itself alone.  The subroutine modifies
@code{@var{x}} itself.

See also: @ref{Number Conversion}

@c -------------------------------------
@node int64arr, int64farr, int64, Internal Routines
@subsection int64arr
@findex int64arr

@code{int64arr(@var{dimensions})}

Returns a @code{int64} array of the specified @code{@var{dimensions}}.
The latter may be an array containing the dimensions, or a list of up
to @code{#max_dims} dimensions.

See also: @ref{array}, @ref{bytarr}, @ref{lonarr}, @ref{fltarr},
@ref{dblarr}, @ref{#max_dims}

@c -------------------------------------
@node int64farr, int64map, int64arr, Internal Routines
@subsection int64farr
@findex int64farr

@code{int64farr(@var{file}, @var{dimensions} [, offset = @var{offset},
/readonly, /swap])}

Links an @code{int64} array structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or a list of up to ten
dimensions.  The file need not exist.  @code{@var{offset}} indicates
the length in bytes of a header after which the array data is to be
found.  It defaults to zero.  Keyword @code{/readonly} disallows
writing into the file through the file array.  Keyword @code{/swap}
indicates that the data should be byte-swapped after reading (for
input only).

See also: @ref{File Arrays}, @ref{array}, @ref{int64arr}

@c -------------------------------------
@node int64map, intarr, int64farr, Internal Routines
@subsection int64map
@findex int64map

@code{int64map(@var{x})}

Maps @code{@var{x}} byte for byte into an @code{int64} array.

See also: @ref{smap}, @ref{bmap}, @ref{wmap}, @ref{fmap}, @ref{dmap}

@c -------------------------------------
@node intarr, intfarr, int64map, Internal Routines
@subsection intarr
@findex intarr

@code{intarr(@var{dimensions})}

Returns a @code{word} (2-byte) array of the specified
@code{@var{dimensions}}.  The latter may be an array containing the
dimensions, or a list of up to @code{#max_dims} dimensions.

See also: @ref{array}, @ref{bytarr}, @ref{int64arr}, @ref{lonarr},
@ref{fltarr}, @ref{dblarr}, @ref{#max_dims}

@c -------------------------------------
@node intfarr, ir, intarr, Internal Routines
@subsection intfarr
@findex intfarr

@code{intfarr(@var{file}, @var{dimensions} [, offset = @var{offset},
/readonly, /swap])}

Links a @code{word} (2-byte) array structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or a list of up to ten
dimensions.  The file need not exist.  @code{@var{offset}} indicates the
length in bytes of a header after which the array data is to be found.
It defaults to zero.  Keyword @code{/readonly} disallows writing into
the file through the file array.  Keyword @code{/swap} indicates that
the data should be byte-swapped after reading (for input only).

See also: @ref{File Arrays}, @ref{array}, @ref{intarr}

@c -------------------------------------
@node ir, isarray, intfarr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ir
@findex ir

@code{ir()}

[SOFA] Returns a 3-by-3-element identity r-matrix.

@c -------------------------------------
@node isarray, isnan, ir, Internal Routines
@subsection isarray
@findex isarray

@code{isarray(@var{var})}

Returns @code{1} if @code{@var{var}} is an array, @code{0} otherwise.

See also: @ref{isscalar}, @ref{isstring}, @ref{symdtype}, @ref{symclass}

@c -------------------------------------
@node isnan, isscalar, isarray, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection isnan
@findex isnan

@code{isnan(@var{data})}

Returns 1 for each numerical value in @code{@var{data}} that is not a
number (@code{NaN}).  Such values are returned on machines that comply
with the ieee standard in that respect for illegal mathematical
operations, such as taking the square root of a negative number, or the
arc sine of a number that is greater than 1, if complex results are not
allowed.

See also: @ref{zeronans}

@c -------------------------------------
@node isscalar, isstring, isnan, Internal Routines
@subsection isscalar
@findex isscalar

@code{isscalar(@var{var})}

Returns @code{1} if @code{@var{var}} is a scalar, @code{0} otherwise.

See also: @ref{isarray}, @ref{isstring}, @ref{symdtype}, @ref{symclass}

@c -------------------------------------
@node isstring, ist, isscalar, Internal Routines
@subsection isstring
@findex isstring

@code{isstring(@var{var})}

Returns @code{1} if @code{@var{var}} is a string, @code{0} otherwise.

See also: @ref{isarray}, @ref{isscalar}, @ref{symdtype}, @ref{symclass}

@c -------------------------------------
@node ist, istring, isstring, Internal Routines
@subsection ist
@findex ist

@code{ist(@var{x} [, @var{n}, @var{mode}])}

Returns number @code{@var{x}} as a right-aligned string.  If
@code{@var{mode}} equals @code{0}, then the string is padded with
blanks.  If @code{@var{mode}} equals @code{1}, then the string is padded
with zeros.  For these modes, @code{@var{n}} indicates the length of the
string.  If @code{@var{mode}} equals @code{2}, then the string is as
short as possible.

Alias: @ref{istring}

See also: @ref{fstring}

@c -------------------------------------
@node istring, jd2cal, ist, Internal Routines
@subsection istring
@findex istring

@code{istring(@var{x} [, @var{n}, @var{mode}])}

Returns number @code{@var{x}} as a right-aligned string.  If
@code{@var{mode}} equals @code{0}, then the string is padded with
blanks.  If @code{@var{mode}} equals @code{1}, then the string is padded
with zeros.  For these modes, @code{@var{n}} indicates the length of the
string.  If @code{@var{mode}} equals @code{2}, then the string is as
short as possible.

Alias: @ref{ist}

See also: @ref{fstring}

@c -------------------------------------
@node jd2cal, jpegread, istring, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection jd2cal
@findex jd2cal

@code{jd2cal(@var{jd})}

[SOFA] Returns the Gregorian calendar dates corresponding to the
specified Chronological Julian Day Numbers @code{@var{jd}}.  The
result has the same type as @code{@var{jd}} but not less than
@code{long}, and has the same dimensions as @code{@var{jd}} but with
one extra dimension of size 3 prefixed, for the year, month, and day,
respectively.  Unexpected results may be given if CJDNs outside of the
supported range are specified.  Julian day numbers before -68569.5 or
after 1e9 yield zeros for the year, month, and day.  CJDNs between
536802342 and 1000000000 inclusive yield nonzero yet erroneous results
on systems with 32-bit ints.

@c -------------------------------------
@node jpegread, jpegwrite, jd2cal, Internal Routines
@subsection jpegread
@findex jpegread

@code{jpegread, @var{var}, @var{file} [, @var{header},
shrink=@var{shrink}] [, /greyscale]}

@code{jpegread(@var{var}, @var{file} [, @var{header},
shrink=@var{shrink}] [, /greyscale])}

@code{[jpeg]} Retrieves @code{@var{array}} and @code{@var{header}} from
jpeg-compressed @code{@var{file}}.  If @code{@var{header}} is not
specified, then any header is displayed on the screen.  If
@code{@var{shrink}} is specified, then the image is shrunk by the
indicated factor (which must be 1, 2, 4, or 8) before being returned.
If @code{/greyscale} is selected, then a greyscale image is returned
even if the file contains a color image.  Specifying @code{/greyscale}
and specifying a non-unit value for @code{shrink} decreases the amount
of time that the reading and decompression takes.  rgb values are
returned in a three-dimensional array, with the first dimension (of size
three) selecting the color and the remaining dimensions selecting
location.  Greyscale values are returned in a two-dimensional array.

The function returns @code{1} on success, @code{0} on failure.  The
subroutine generates an error on failure.

LUX uses version 6b of the Independent jpeg Group's jpeg library to
implement this routine.

See also: @ref{jpegwrite}, @ref{fzread}, @ref{gifread}

@c -------------------------------------
@node jpegwrite, kepler, jpegread, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection jpegwrite
@findex jpegwrite

@code{jpegwrite, @var{var}, @var{file} [, @var{header}, @var{quality}]}

@code{jpegwrite(@var{var}, @var{file} [, @var{header}, @var{quality}])}

@code{[jpeg]} Writes 2D @code{byte} array @code{@var{var}} and string
@code{@var{header}} to @code{@var{file}} in jpeg-compressed format with
compression quality parameter @code{@var{quality}}, which must range
between 0 and 100 and defaults to 75.  jpeg compression discards part of
the resolution, and can reach high degrees of compression that way.  The
higher @code{@var{quality}} is, the larger the file size and the less
information is lost in the compression.  You may omit
@code{@var{header}} or @code{@var{quality}} or both.

The function form returns @code{1} on success, and @code{0} on failure.

LUX uses version 6b of the Independent jpeg Group's jpeg library to
implement this routine.

See also: @ref{jpegread}, @ref{fcwrite}, @ref{fzwrite}, @ref{gifwrite}

@c -------------------------------------
@node kepler, ksmooth, jpegwrite, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection kepler
@findex kepler

@code{@var{out} = kepler(@var{in}, @var{e} [, /meananomaly,
/perifocalanomaly] [, /trueanomaly, /eccentricanomaly, /tau]}

Solves Kepler's equation.  @code{@var{e}} is the eccentricity of the
orbit.  @code{@var{in}} is the input quantity, which is the mean
anomaly by default or when @code{/meananomaly} is specified, or is the
perifocal anomaly when @code{/perifocalanomaly} is specified.  The
perifocal anomaly is similar to the mean anomaly, but is based on the
perifocal distance instead of the length of the semimajor axis of the
orbit.

The returned value is the true anomaly by default or when
@code{/trueanomaly} is specified, or is the eccentric anomaly when
@code{/eccentricanomaly} is specified, or is the tangent of half of
the true anomaly when @code{/tau} is specified.

@c -------------------------------------
@node ksmooth, le, kepler, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ksmooth
@findex ksmooth

@c -------------------------------------
@node le, legendre, ksmooth, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection le
@findex le

@code{x le y}

a binary logical operator that works on numerical or string arguments
@code{x} and @code{y} and that returns @code{1} for every element of
@code{x} that is less than or equal to the corresponding element of
@code{y}, and @code{0} otherwise.  String arguments are compared
character by character, according to the positions of the characters in
the character set.

See also: @ref{ne}, @ref{eq}, @ref{ge}, @ref{gt}, @ref{lt}

@c -------------------------------------
@node legendre, limits, le, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection legendre
@findex legendre

@code{legendre( @var{x}, @var{lmax} [, /normalize])}

Calculates values of the associated Legendre polynomials of orders
@code{l} from zero through @code{@var{lmax}} and degrees @code{m} from
zero through @code{l}, at ordinate @code{@var{x}}.  @code{@var{x}} must
be between @code{-1} and @code{+1}, inclusive, and @code{@var{lmax}}
must be positive.

The associated Legendre polynomial of order @code{l} and degree @code{m}
is defined as
@ifinfo
@code{p(l,m;x) = [(-1)^m (1 - x^2)^(m/2)]/(2^l l!)} times the
@code{l+m}th derivative of @code{(x^2 - 1)^l} with respect to @code{x}.
@end ifinfo
@tex
$ p_l^m(x) = {{(-1)^m} \over {2^l l!}} (1 - x^2)^{m/2} {{{\rm d}^{l+m}
(x^2 - 1)^l} \over {{\rm d}x^{l+m}}}. $
@end tex

The values for the associated Legendre polynomials can get very large.
In particular, the magnitude of the associated Legendre polynomial of
degree and order @code{l} is approximately equal to the square root of
the factorial of @code{l} (@code{sqrt(gamma(l + 1))}), which is too
great to fit in even a double-precision (@code{double}) variable on a
32-bit computer when @code{l} exceeds about 170.

If @code{/normalize} is specified, then the values of the associated
Legendre polynomials are normalized appropriately for the derivation of
the related spherical harmonics.  In that case, the returned values are
defined as
@ifinfo
@code{y(l,m;x) = sqrt((2 l - 1)/(4 pi) * ((l - m)!)/((l + m)!))
p(l,m;x)}
@end ifinfo
@tex
$ y_l^m(x) = \sqrt{{{2l + 1}\over{4\pi}} {{(l - m)!}\over{(l + m)!}}}
p_l^m(x) $
@end tex
which are of order unity or less.  In terms of these values, the
spherical harmonics are defined as
@ifinfo
@code{y(l,m; theta, phi) = y(l,m; cos(theta)) exp(i m phi)}.
@end ifinfo
@tex
$ y_l^m(\theta,\phi) = y_l^m(\cos\theta) e^{i m \phi} $.
@end tex

The calculated values are returned in a @code{double} array.  The values
are sorted by increasing order @code{l}, and secondarily by increasing
degree @code{m}.  The number of returned values is equal to
@code{(@var{lmax} + 1)*(@var{lmax} + 2)/2}.  The @code{l + 1} values for
order @code{l} start at index @code{l*(l + 1)/2}.

@c -------------------------------------
@node limits, list, legendre, Internal Routines
@subsection limits
@findex limits

@code{limits [, @var{xlow}, @var{xhigh}, @var{ylow}, @var{yhigh},
@var{zlow}, @var{zhigh}]}

Sets (with arguments) or shows (without arguments) limits on the
coordinate ranges shown in the next plot. 

@c -------------------------------------
@node list, llsq, limits, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection list
@findex list

@code{list, @var{symbol}}

Shows the definition of the user-defined subroutine, function, or block
routine that has symbol number @code{@var{symbol}} (if
@code{@var{symbol}} is a @code{scalar}), or name @code{@var{symbol}} (if
@code{@var{symbol}} is a @code{string}).

See also: @ref{dump}, @ref{show_func}, @ref{show_subr}

@c -------------------------------------
@node llsq, lmap, list, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection llsq
@findex llsq

@code{llsq( @var{x}, @var{y} [, @var{axis}, fwhm=@var{fwhm},
weights=@var{weights}, cov=@var{cov}, err=@var{err}, chisq=@var{chisq}]
[, /formal, /reduce])}



@c -------------------------------------
@node lmap, local_max, llsq, Internal Routines
@subsection lmap
@findex lmap

@code{lmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{long} (4-byte) array.

See also: @ref{smap}, @ref{bmap}, @ref{wmap}, @ref{fmap}, @ref{dmap},
@ref{int64map}

@c -------------------------------------
@node local_max, local_maxloc, lmap, Internal Routines
@subsection local_max
@findex local_max

@code{local_max(@var{array}, @var{position} [, /subgrid, /bound])}

Finds position and value of local maxima in @code{@var{array}}, starting
at the positions (indices) in @code{@var{position}} and walking along
the steepest gradient.  @code{@var{position}} must be a scalar or array
of indices to @code{@var{array}}.  By default, a local maximum on the
grid is returned.  Keyword @code{/subgrid} requests the estimated value
at the subgrid position, as determined from a quadratic fit near the
integer position, with the subgrid position forced to be within one px
in any coordinate from the integer position.  Allow far subgrid results
by also specifying @code{/nobound}.  The last found maximum is put in
@code{!lastmax} and @code{!lastmaxloc} (the latter always integer), and
all found values are returned.  If an indicated @code{@var{position}}
falls before the beginning or after the end of the @code{@var{array}}
then the nearest position inside the @code{@var{array}} is used instead.

See also: @ref{local_maxloc}, @ref{local_min}, @ref{local_minloc},
@ref{max}, @ref{maxloc}, @ref{!lastmax}, @ref{!lastmaxloc}

@c -------------------------------------
@node local_maxloc, local_min, local_max, Internal Routines
@subsection local_maxloc
@findex local_maxloc

@code{local_maxloc(@var{array}, @var{position} [, /subgrid, /bound])}

Finds position and value of local maxima in @code{@var{array}}, starting
at the positions (indices) in @code{@var{position}} and walking along
the steepest gradient.  @code{@var{position}} must be a scalar or array
of indices to @code{@var{array}}.  By default, a local maximum on the
grid is returned.  Keyword @code{/subgrid} requests return of the
subgrid position, as determined from a quadratic fit near the integer
position, with the subgrid position forced to be within one px in any
coordinate from the integer position.  Allow far subgrid results by also
specifying @code{/nobound}.  The last found maximum is put in
@code{!lastmax} and @code{!lastmaxloc} (the latter always integer), and
all found positions are returned as coordinates to @code{@var{array}}.
If an indicated @code{@var{position}} falls before the beginning or
after the end of the @code{@var{array}} then the nearest position inside
the @code{@var{array}} is used instead.

See also: @ref{local_max}, @ref{local_min}, @ref{local_minloc},
@ref{max}, @ref{maxloc}, @ref{!lastmax}, @ref{!lastmaxloc}

@c -------------------------------------
@node local_min, local_minloc, local_maxloc, Internal Routines
@subsection local_min
@findex local_min

@code{local_min(@var{array}, @var{position} [, /subgrid, /bound])}

Finds position and value of local minima in @code{@var{array}}, starting
at the positions (indices) in @code{@var{position}} and walking along
the steepest gradient.  @code{@var{position}} must be a scalar or array
of indices to @code{@var{array}}.  By default, a local minimum on the
grid is returned.  Keyword @code{/subgrid} requests the estimated value
at the subgrid position, as determined from a quadratic fit near the
integer position, with the subgrid position forced to be within one px
in any coordinate from the integer position.  Allow far subgrid results
by also specifying @code{/nobound}.  The last found minimum is put in
@code{!lastmin} and @code{!lastminloc} (the latter always integer), and
all found values are returned.  If an indicated @code{@var{position}}
falls before the beginning or after the end of the @code{@var{array}}
then the nearest position inside the @code{@var{array}} is used instead.

See also: @ref{local_minloc}, @ref{local_max}, @ref{local_maxloc},
@ref{min}, @ref{minloc}, @ref{!lastmin}, @ref{!lastminloc}

@c -------------------------------------
@node local_minloc, log, local_min, Internal Routines
@subsection local_minloc
@findex local_minloc

@code{local_minloc(@var{array}, @var{position} [, /subgrid, /bound])}

Finds position and value of local minima in @code{@var{array}}, starting
at the positions (indices) in @code{@var{position}} and walking along
the steepest gradient.  @code{@var{position}} must be a scalar or array
of indices to @code{@var{array}}.  By default, a local minimum on the
grid is returned.  Keyword @code{/subgrid} requests the return of the
subgrid position, as determined from a quadratic fit near the integer
position, with the subgrid position forced to be within one px in any
coordinate from the integer position.  Allow far subgrid results by also
specifying @code{/nobound}.  The last found minimum is put in
@code{!lastmin} and @code{!lastminloc} (the latter as an integer index
to @code{@var{array}}), and and all found positions are returned as
coordinates to @code{@var{array}}.  If an indicated
@code{@var{position}} falls before the beginning or after the end of the
@code{@var{array}} then the nearest position inside the
@code{@var{array}} is used instead.

See also: @ref{local_min}, @ref{local_max}, @ref{local_maxloc},
@ref{min}, @ref{minloc}, @ref{!lastmin}, @ref{!lastminloc}

@c -------------------------------------
@node log, log10, local_minloc, Internal Routines
@subsection log
@findex log

@code{log(@var{x})}

Returns the natural logarithm (base @code{#e}) of @code{@var{x}}.

Reverse: @ref{exp}

Alias: @ref{alog}

See also: @ref{log10}, @ref{log1p}, @ref{#e}

@c -------------------------------------
@node log10, log1p, log, Internal Routines
@subsection log10
@findex log10

@code{log10(@var{x})}

Returns the decimal logarithm (base 10) of @code{@var{x}}.

Alias: @ref{alog10}

See also: @ref{exp}, @ref{log}, @ref{log1p}

@c -------------------------------------
@node log1p, lonarr, log10, Internal Routines
@subsection log1p
@findex log1p

@code{log1p(@var{x})}

Returns the natural logarithm (base @code{#e}) of one more than
@code{@var{x}}.

Reverse: @code{expm1}

See also: @ref{log}, @ref{log10}, @ref{#e}

@c -------------------------------------
@node lonarr, lonfarr, log1p, Internal Routines
@subsection lonarr
@findex lonarr

@code{lonarr(@var{dimensions})}

Returns a @code{long} (4-byte) array of the specified
@code{@var{dimensions}}.  The latter may be an array containing the
dimensions, or a list of up to @code{#max_dims} dimensions.

See also: @ref{array}, @ref{bytarr}, @ref{intarr}, @ref{int64arr},
@ref{fltarr}, @ref{dblarr}, @ref{strarr}, @ref{#max_dims}

@c -------------------------------------
@node lonfarr, long, lonarr, Internal Routines
@subsection lonfarr
@findex lonfarr

@code{lonfarr(@var{file}, @var{dimensions} [, offset=@var{offset},
/readonly, /swap])}

Links a @code{long} (4-byte) array structure with the specified
@code{@var{dimensions}} to the specified @code{@var{file}}.
@code{@var{dimensions}} may be an array, or a list of up to ten
dimensions.  No file checks are made.  @code{@var{offset}} indicates the
length in bytes of a header after which the array data is to be found.
It defaults to zero.  Keyword @code{/readonly} disallows writing into
the file through the file array.  Keyword @code{/swap} indicates that
the data should be byte-swapped after reading (for input only).

See also: @ref{File Arrays}, @ref{array}, @ref{lonarr}

@c -------------------------------------
@node long, lowcase, lonfarr, Internal Routines
@subsection long
@findex long

@code{long(@var{x})}

@code{long, @var{x} [, @dots{}]}

Converts the arguments to data type @code{long} by truncating at the
decimal point (if any).  The function returns a converted copy and
leaves @code{@var{x}} itself alone.  The subroutine modifies
@code{@var{x}} itself.

Alias: @ref{fix}

See also: @ref{Number Conversion}

@c -------------------------------------
@node lowcase, lower, long, Internal Routines
@subsection lowcase
@findex lowcase

@code{lowcase(@var{s})}

Converts all letters in string @code{@var{s}} to lower case.

Alias: @ref{lower}

See also: @ref{upcase}, @ref{upper}

@c -------------------------------------
@node lower, lsmooth, lowcase, Internal Routines
@subsection lower
@findex lower

@code{lower(@var{s})}

Converts all letters in @code{@var{s}} to lower case.

Alias: @ref{lowcase}

See also: @ref{upcase}, @ref{upper}

@c -------------------------------------
@node lsmooth, lsq, lower, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection lsmooth
@findex lsmooth

@code{lsmooth(@var{image}, @var{vx}, @var{vy} [, /boxcar, /gaussian,
/onesided, /twosided, /normalize])}

Returns a directionally smoothed version of @code{@var{image}}.
@code{@var{vx}} and @code{@var{vy}} contain the two coordinates of the
direction at each point.  The direction of the stream vector is the
direction of the streamline through the point, or, if @code{/straight}
is specified, a weighted average or total of data points on the straight
line which is tangential to the streamline through that point.  For each
point, its data value is spread across data points on the streamline
through that point.  The smoothing width is taken from the length of the
stream vector.

By default, or if @code{/onesided} is selected, then the target interval
extends, for each point, to only one side of that point (determined by
the direction of the stream vector).  If @code{/twosided} is selected,
then the target interval extends in both directions from the starting
point (determined by the direction of the stream vector and the exactly
opposite direction).

By default (or if @code{/boxcar} is specified), the spreading is of the
boxcar type, and the total length of the boxcar is equal to the length
of the stream vector (if @code{/twosided} is specified or implied), or
to one half of the length of the stream vector (if @code{/onesided} is
specified).  If @code{/gaussian} is specified, then the spreading is
gaussian instead, with the length of the stream vector indicating the
FWHM of the gaussian kernel.

By default, a value that is spread to a particular data element is
multiplied by the length of the segment of the streamline or straight
line that falls within the data element, and by a gaussian weight (if
@code{/gaussian} was selected), but is not normalized to take into
account the smoothing width.  If @code{/normalize} is specified, then
the spread values are normalized with the smoothing width, too, so that
the total of the smoothed data equals the total of the unsmoothed data
(except for edge effects).

@code{lsmooth} is very similar to @code{dsmooth}, except that in
@code{lsmooth} a particular source value is spread along its associated
streamline (or tangent), whereas in @code{dsmooth} a particular target
value is constructed from source values taken from its associated
streamline (or tangent).

See also: @ref{dsmooth}, @ref{esmooth}, @ref{gsmooth}, @ref{smooth}

@c -------------------------------------
@node lsq, lt, lsmooth, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection lsq
@findex lsq

@code{lsq(@var{x}, @var{y} [, weights=@var{w}, cov=@var{cov},
err=@var{err}, chisq=@var{chisq}, /formal, /reduce])}

Returns a linear least-squares fit of @code{@var{y}} to @code{@var{x}}.
@code{@var{x}} must have either the same dimensional structure as
@code{@var{y}}, or the same plus one more dimension.  In the former
case, the number of parameters to be fitted is taken equal to 1,
otherwise it is equal to the number of elements in the last dimension of
@code{@var{x}}.  The model to be fitted is @code{@var{y} =
@code{@var{a}}(0)*@code{@var{x}}(...,0) +
@code{@var{a}}(1)*@code{@var{x}}(...,1) + ...}, where @code{@var{a}}
stands for the parameters sought from the fit, which are returned by
this function.

Optionally, a weight can be assigned to each data point, in
@code{@var{w}}.  These weights should be equal to the inverse of the
variance associated with each data point.

If @code{@var{cov}} is specified, then by default a covariance matrix of
the parameters of the fit is returned in it, with the variances on the
diagonal and the covariances in the off-diagonal elements.  If
@code{/reduce} is specified, then a reduced covariance matrix is
returned instead, in which the diagonal elements contain the standard
deviations, the off-diagonal part that contains most of the first
dimension contains cross-correlation coefficients, and the off-diagonal
part that contains most of the second dimension contains the covariances
(the same as when @code{/reduce} is not specified).  The matrix is
square in any case.

If @code{@var{err}} is specified, then the weighted root-mean-square
value of the residual errors (after subtraction of the model values) is
returned in it.

If @code{@var{chisq}} is specified, then the chi-square value of the fit
is returned in it.

The magnitudes of the (co)variances in @code{@var{cov}} and of
@code{@var{chisq}} are only meaningful if proper weights were specified
in @code{@var{w}} as described above.  In that case, chi-square should
ideally be equal to the number of data points minus one.  If the
chi-square is much smaller than that, then the variances
@code{1/@var{w}} were apparently overestimated.  If the
chi-square is much greater than that, then either the variances were
underestimated, or the linear model is not suitable for the data.

If no weights were specified, or if the proper normalization of the
values specified in @code{@var{w}} is not known, then you can derive
formal estimates for the errors on the model parameters by specifying
the @code{/formal} keyword.  In that case, the variance on the data
values is assumed equal to @code{@var{err}^2*n/(n - 1)}, where @code{n}
is the number of data points (taken to be equal to the sum of all
elements of @code{@var{w}} if @code{@var{w}} is specified), and the
variances on the model parameters are scaled accordingly.  (The
correction factor involving @code{n} is necessary to get an unbiased
estimator.)  This corresponds to forcing chi-square equal to the ideal
value of @code{n - 1}.

See also: @ref{fit}

@c -------------------------------------
@node lt, match, lsq, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection lt
@findex lt

@code{x lt y}

a binary logical operator that works on numerical or string arguments
@code{x} and @code{y} and that returns @code{1} for every element of
@code{x} that is less than the corresponding element of @code{y}, and 0
otherwise.  String arguments are compared character by character,
according to the positions of the characters in the character set.

See also: @ref{ne}, @ref{eq}, @ref{ge}, @ref{gt}, @ref{le}

@c -------------------------------------
@node match, max, lt, Internal Routines
@subsection match
@findex match

@code{match(@var{target}, @var{set})}

Returns an index to the position in @code{@var{set}} of each member of
@code{@var{target}}, or @code{-1} for the members of @code{@var{target}}
that are not in @code{@var{set}}.  @code{@var{set}} must be sorted in
ascending order.


@c -------------------------------------
@node max, maxdir, match, Internal Routines
@subsection max
@findex max

@code{max(@var{array} [, @var{arg}] [, /keepdims])}

Returns one or more maximum values from the numerical
@code{@var{array}}.  For real data types, the maximum is the value
closest to infinity.  For complex data types, the maximum is the value
with the greatest magnitude.  Generally, @code{@var{arg}} indicates
which dimensions are included in searching for a maximum.  There must
not be any duplicates in the elements of @code{@var{arg}}.  For example,
@code{max(x, 0)} returns the maximum value over all values of the first
dimension, and @code{max(x, [0,1])} returns the maximum over all values
of the first two dimensions.

By default, the result has a number of dimensions equal to the number of
dimensions in @code{array} minus the number of elements of @code{arg}.
If @code{/keepdims} is specified, then the dimensions indicated by
@code{arg} are not omitted but set to 1.

If @code{@var{arg}} is a numerical array with the same number of
elements as @code{@var{array}}, then its elements indicate the class
each corresponding element of @code{@var{array}} belongs to and the
maximum value in each class is returned, with the maximum of class 0 or
the most negative class in the first element of the result.

The last found maximum value is stored in @code{!lastmax} and its index
in @code{!lastmaxloc}, and the corresponding numbers for the minima in
@code{!lastmin} and @code{!lastminloc}.  For complex arrays, the values
stored in @code{!lastmax} and @code{!lastmin} are the magnitudes
of the corresponding extreme values.

e.g. if @code{x = [[[1,7]],[[3,5]]]} then @code{max(x) = 7 max(x,0) =
[7,5] max(x,1) = [3,7]}.

See also: @ref{maxloc}, @ref{min}, @ref{minloc}, @ref{!lastmax},
@ref{!lastmaxloc}, @ref{!lastmin}, @ref{!lastminloc}, @ref{local_max},
@ref{local_maxloc}, @ref{local_min}, @ref{local_minloc},
@ref{find_maxloc}

@c -------------------------------------
@node maxdir, maxfilter, max, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection maxdir
@findex maxdir

@c -------------------------------------
@node maxfilter, maxloc, maxdir, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection maxfilter
@findex maxfilter

@code{maxfilter(@var{x} [[, @var{axes}], @var{widths}])}

Applies a maximum filter to one or more dimensions @code{@var{axes}} of
@code{@var{x}}, over @code{@var{widths}} elements.  If @code{@var{axes}}
is not specified, then @code{@var{x}} is treated as a 1d array.
@code{@var{widths}} must be a scalar or an array with the same number of
elements as @code{@var{widths}} and must contain only positive numbers.
@code{@var{widths}} defaults to scalar @code{3}.  For elements too close
to the edge to yield full-width results, the nearest full-width result
is returned.

@code{ordfilter(/maximum)} yields the same results as
@code{maxfilter()}, but is much slower.

See also:  @code{minfilter}, @code{ordfilter}, @code{medfilter}

@c -------------------------------------
@node maxloc, mdiagonal, maxfilter, Internal Routines
@subsection maxloc
@findex maxloc

@code{maxloc(@var{array} [, @var{arg}] [, /keepdims])}

Returns the location of one or more maximum values from the numerical
@code{@var{array}}, expressed as indices into the array.  For real data
types, the maximum is the value closest to infinity.  For complex data
types, the maximum is the value with the greatest magnitude.  Generally,
@code{@var{arg}} indicates which dimensions are included in searching
for a maximum.  There must not be any duplicates in the elements of
@code{@var{arg}}.  For example, @code{maxloc(x, 0)} returns the location
of maximum value over all values of the first dimension, and
@code{maxloc(x, [0,1])} returns the location of maxima over all values
of the first two dimensions.

By default, the result has a number of dimensions equal to the number of
dimensions in @code{array} minus the number of elements of @code{arg}.
If @code{/keepdims} is specified, then the dimensions indicated by
@code{arg} are not omitted but set to 1.

If @code{@var{arg}} is a numerical array with the same number of
elements as @code{@var{array}}, then its elements indicate the class
each corresponding element of @code{@var{array}} belongs to and the
location of the maximum value in each class is returned, with the
location of the maximum of class 0 or the most negative class in the
first element of the result.

The last found maximum value is stored in @code{!lastmax} and its index
in @code{!lastmaxloc}, and the corresponding numbers for the minima in
@code{!lastmin} and @code{!lastminloc}.  For complex arrays, the values
stored in @code{!lastmax} and @code{!lastmin} are the magnitudes of the
corresponding extreme values.

e.g. if @code{x = [[[1,7]],[[3,5]]]} then @code{max(x) = 7 max(x,0) =
[7,5] max(x,1) = [3,7]}.

See also: @ref{max}, @ref{!lastmax}, @ref{!lastmaxloc}

@c -------------------------------------
@node mdiagonal, mean, maxloc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection mdiagonal
@findex mdiagonal

@code{mdiagonal(@var{values})}

Returns a square matrix with the specified @code{@var{values}} on the
diagonal, and zeros everywhere else.  The matrix has its number of
rows and columns equal to the number of elements in
@code{@var{values}}.

@c -------------------------------------
@node mean, medfilter, mdiagonal, Internal Routines
@subsection mean
@findex mean

@code{mean(@var{x} [, @var{mode}, power=@var{power},
weights=@var{weights}, /float, /double, /keepdims])}

By default, returns the arithmetic average of numerical array
@code{@var{x}}: the sum divided by the number of summed values.

If @code{@var{mode}} is a scalar or an array with a size different from
that of @code{@var{x}}, then it indicates the dimension(s) along which
averages are calculated for each combination of the remaining
coordinates.  In that case, if also @code{/keepdims} is specified, then
the dimension(s) along which the averages are calculated are set to 1 in
the result.  If @code{/keepdims} is not set, then such dimensions are
omitted from the result, and if only a single number is returned, then
it is returned as a scalar.

If @code{@var{mode}} is an array with the same number of elements as
@code{@var{x}}, then each element of @code{@var{mode}} identifies the
(scalar) class to which each corresponding element of @code{@var{x}}
belongs, and then an average is returned for each class.  The first
element of the result refers to class @code{0} (if no class is
negative), or to the most negative class.

If @code{@var{power}} is specified, then it must be an integer scalar
(negative, zero, or positive), and each data value is raised to the
indicated power before being passed on to the calculation of the
arithmetic average.

If @code{@var{weights}} is specified, then it must be a numerical array
with the same dimensions as @code{@var{x}} (or merely the same number of
elements, if deviations are calculated by class), and then each of its
elements indicates the weight of the corresponding element of
@code{@var{x}}, and then weighted averages are returned.  The
@code{@var{weights}} are copied to a version with the same data type as
@code{@var{x}} for the internal calculations (except that the copy is
kept real even if @code{@var{x}} is complex).

Complex numbers are supported.

The data type of the result is at least as great as the data type of
@code{@var{x}}, and not less than @code{long}.  If @code{/float} is
specified, then the result is at least of type @code{float}.  If
@code{/double} is specified, then the result is of type @code{double}
(or @code{cdouble} if @code{@var{x}} is complex).

Examples, with @code{x = [[[6.0, 4, 3]],[[8, 2, 4]]]} and @code{c = [2.0, 2,
2, 2, 1, 1]}:

To print the average along the first dimension (dimension 0, rows) of
@code{x}:
@example
LUX>t,mean(x,0)
      4.333333      4.666667
@end example

And along the second dimension (dimension 1, columns):
@example
LUX>t,mean(x,1)
             7             3           3.5
@end example

To subtract the column average from each column of @code{x}:
@example
LUX>x -= mean(x,1,/keepdims)
LUX>t,x(*,0)
            -1             1          -0.5
LUX>t,x(*,1)
             1            -1           0.5
@end example

To print the arithmetic averages of @code{x} for the classes identified
by @code{c}:
@example
LUX>t,mean(x,c)
             0             3          5.25
@end example
Class 0 yields @code{0} because there are no elements @code{0} in
@code{c}.  Class 1 yields the arithmetic average (@code{3}) of elements
@code{2, 4}, and class 2 yield the average (@code{5.25}) of elements
@code{6, 4, 3, 8}.

To calculate the average of @code{x^2}:
@example
LUX>t,mean(x,power=2)
      48.33333
@end example
In general, @code{mean(x,power=p)} is equivalent to @code{mean(x^p)},
but the first form does not generate a temporary variable for storage of
@code{x^p} and is generally faster because it can take advantage of the
exponent being integral.

Beware that @code{float/cfloat} numbers have only about 6 significant
digits (on a 32-bit machine), so that the relative accuracy of
@code{float/cfloat} results from @code{total} may be as bad as
1e-6*sqrt(@code{@var{n}}) where @code{@var{n}} is the number of data
points!  When in doubt, use @code{total(x, /double)} or @code{dsum},
which have a relative accuracy about a thousand million times better
than @code{float/cfloat} @code{total}.

See also: @ref{hist}, @ref{mean}, @ref{dsum}, @ref{fsum}, @ref{total},
@ref{sdev}

@c -------------------------------------
@node medfilter, median, mean, Internal Routines
@subsection medfilter
@findex medfilter

@code{medfilter(@var{x} [[, @var{axes}], @var{width}])}

Applies a median filter to dimensions @code{@var{axes}} of
@code{@var{x}}, over @code{@var{width}} elements.  @code{@var{axes}} may
be a scalar or an array.  If @code{@var{axes}} is not specified, then
the filter spans all dimensions of @code{@var{x}}.  If
@code{@var{width}} is even then one is subtracted from it.
@code{@var{width}} defaults to @code{3}.  The filter is applied only to
those elements of @code{@var{x}} for which all elements to be considered
by the filter exist.  For elements that are too close to the edge, the
original value is retained.

See also: @ref{ordfilter}, @ref{minfilter}, @ref{maxfilter}

@c -------------------------------------
@node median, memory, medfilter, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection median
@findex median

@code{median(@var{x} [, @var{axes}]}

Calculates the median of numerical @code{@var{x}} along the indicated
@code{@var{axes}}.

See also: @ref{medfilter}, @ref{quantile}

@c -------------------------------------
@node memory, menu, median, Internal Routines
@subsection memory
@findex memory

@code{memory}

For debugging.  Returns the number of bytes that are currently allocated
to LUX.

@c -------------------------------------
@node menu, menuhide, memory, Internal Routines
@subsection menu
@findex menu

@code{menu, @var{menu} [, @var{x}, @var{y}] [, @var{title}, @var{item1}
[, @var{item2} @dots{}]]}

@code{[@ref{x11}]} Define and/or (re)display a menu.  The menu number is
@code{@var{menu}}.  The menu is displayed at position
@code{(@var{x},@var{y})}, or at its old position.  The menu entries are
the old ones, or @code{@var{title}}, @code{@var{item1}}, etc., which
must be strings.  The strings may also be specified in one string array
(i.e., @code{menu,@var{menu},@var{x},@var{y},string_array}).  If the
position is specified, then the menu is created and/or resized.  If only
the text is specified, then the menu is not resized.  If only the menu
number is specified, then the menu is redisplayed.

See also: @ref{menuhide}, @ref{menuitem}, @ref{menuzap},
@ref{checkmenu}, @ref{wait_for_menu}, @ref{menupop}

@c -------------------------------------
@node menuhide, menuitem, menu, Internal Routines
@subsection menuhide
@findex menuhide

@code{menuhide, @var{menu}}

@code{[@ref{x11}]} Hides menu number @code{@var{menu}}.  The menu contents are
preserved, and the menu may be redisplayed at any time with @code{menu}.

See also: @ref{menu}, @ref{menuzap}

@c -------------------------------------
@node menuitem, menupop, menuhide, Internal Routines
@subsection menuitem
@findex menuitem

@code{menuitem, @var{menu}, @var{item}, @var{text}}

@code{[@ref{x11}]} Replaces item number @code{@var{item}} in menu number
@code{@var{menu}} with @code{@var{text}}.  (The first item is number 1.)
The size of the menu is not changed.

See also: @ref{menu}

@c ------------------------------------
@node menupop, menuread, menuitem, Internal Routines
@subsection menupop
@findex menupop

@code{menupop, @var{menu} [, @var{title}, @var{item1} [, @var{item2}
@dots{}]]}

@code{[@ref{x11}]} Define and/or (re)display a menu.  Same as @code{menu}, but
displays menu at current mouse position.

See also: @ref{menu}, @ref{menuhide}, @ref{menuzap}, @ref{checkmenu},
@ref{wait_for_menu}

@c -------------------------------------
@node menuread, menuzap, menupop, Internal Routines
@subsection menuread
@findex menuread

@code{menuread, @var{menu}, @var{menu_item}, @var{query_string},
@var{answer_string}}

@code{[@ref{x11}]} Displays @code{@var{query_string}} in item
@code{@var{menu_item}} of @code{@var{menu}}, accepts a user-typed string
and returns that string in @code{@var{answer_string}}.  The first menu
item has @code{@var{menu_item}} equal to @code{1}.

See also: @ref{menu}, @ref{menuitem}

@c -------------------------------------
@node menuzap, min, menuread, Internal Routines
@subsection menuzap
@findex menuzap

@code{menuzap, @var{menu}}

@code{[@ref{x11}]} Discards menu number @code{@var{menu}}.  The menu contents
are destroyed.

See also: @ref{menu}, @ref{menuhide}

@c -------------------------------------
@node min, minfilter, menuzap, Internal Routines
@subsection min
@findex min

@code{min(@var{array} [, @var{arg}] [, /keepdims])}

Returns one or more minimum values from the numerical
@code{@var{array}}.  For real data types, the minimum is the value
closest to minus infinity.  For complex data types, the minimum is the
value with a magnitude closest to zero.  Generally, @code{@var{arg}}
indicates which dimensions are included in searching for a minimum.
There must not be any duplicates in the elements of @code{@var{arg}}.
For example, @code{min(x, 0)} returns the minimum value over all values
of the first dimension, and @code{min(x, [0,1])} returns the minimum
over all values of the first two dimensions.

By default, the result has a number of dimensions equal to the number of
dimensions in @code{array} minus the number of elements of @code{arg}.
If @code{/keepdims} is specified, then the dimensions indicated by
@code{arg} are not omitted but set to 1.

If @code{@var{arg}} is a numerical array with the same number of
elements as @code{@var{array}}, then its elements indicate the class
each corresponding element of @code{@var{array}} belongs to and the
minimum value in each class is returned, with the minimum of class 0 or
the most negative class in the first element of the result.

The last found maximum value is stored in @code{!lastmax} and its index
in @code{!lastmaxloc}, and the corresponding numbers for the minima in
@code{!lastmin} and @code{!lastminloc}.  For complex arrays, the values
stored in @code{!lastmax} and @code{!lastmin} are the magnitudes
of the corresponding extreme values. 

e.g. if @code{x = [[[1,7]],[[3,5]]]} then @code{min(x) = 7 min(x,0) =
[7,5] min(x,1) = [3,7]}.

See also: @ref{max}, @ref{maxloc}, @ref{minloc}, @ref{!lastmax},
@ref{!lastmaxloc}, @ref{!lastmin}, @ref{!lastminloc}, @ref{local_max},
@ref{local_min}, @ref{local_maxloc}, @ref{local_minloc},
@ref{find_maxloc}

@c -------------------------------------
@node minfilter, minloc, min, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection minfilter
@findex minfilter

@code{minfilter(@var{x} [[, @var{axes}], @var{widths}])}

Applies a minimum filter to one or more dimensions @code{@var{axes}} of
@code{@var{x}}, over @code{@var{widths}} elements.  If @code{@var{axes}}
is not specified, then @code{@var{x}} is treated as a 1d array.
@code{@var{widths}} must be a scalar or an array with the same number of
elements as @code{@var{widths}} and must contain only positive numbers.
@code{@var{widths}} defaults to scalar @code{3}.  For elements too close
to the edge to yield full-width results, the nearest full-width result
is returned.

@code{ordfilter(/minimum)} yields the same results as
@code{minfilter()}, but is much slower.

See also:  @code{maxfilter}, @code{ordfilter}, @code{medfilter}

@c -------------------------------------
@node minloc, mod, minfilter, Internal Routines
@subsection minloc
@findex minloc

@code{minloc(@var{array} [, @var{arg}] [, /keepdims])}

Returns the location of one or more minimum values from the numerical
@code{@var{array}}, expressed as indices into the array.  For real data
types, the maximum is the value closest to infinity.  For complex data
types, the maximum is the value with the greatest magnitude.  Generally,
@code{@var{arg}} indicates which dimensions are included in searching
for a minimum.  There must not be any duplicates in the elements of
@code{@var{arg}}.  For example, @code{minloc(x, 0)} returns the location
of minimum value over all values of the first dimension, and
@code{minloc(x, [0,1])} returns the location of minima over all values
of the first two dimensions.

By default, the result has a number of dimensions equal to the number of
dimensions in @code{array} minus the number of elements of @code{arg}.
If @code{/keepdims} is specified, then the dimensions indicated by
@code{arg} are not omitted but set to 1.

If @code{@var{arg}} is a numerical array with the same number of
elements as @code{@var{array}}, then its elements indicate the class
each corresponding element of @code{@var{array}} belongs to and the
location of the minimum value in each class is returned, with the
location of the minimum of class 0 or the most negative class in the
first element of the result.

The last found minimum value is stored in @code{!lastmax} and its index
in @code{!lastmaxloc}, and the corresponding numbers for the minima in
@code{!lastmin} and @code{!lastminloc}.  For complex arrays, the values
stored in @code{!lastmax} and @code{!lastmin} are the magnitudes of the
corresponding extreme values.

e.g. if @code{x = [[[1,7]],[[3,5]]]} then @code{min(x) = 7 min(x,0) =
[7,5] min(x,1) = [3,7]}.

See also: @ref{min}, @ref{!lastmin}, @ref{!lastminloc}

@c -------------------------------------
@node mod, mproduct, minloc, Internal Routines
@subsection mod
@findex mod

@code{x mod y}

Binary modulus operator.  @code{@var{x} mod @var{y}} yields the
remainder of the division of @code{@var{x}} by @code{@var{y}}.

Alias: @code{%}

See also: @code{smod}

@c -------------------------------------
@node mproduct, multisieve, mod, Internal Routines
@subsection mproduct
@findex mproduct

@code{mproduct(@var{m1}, @var{m2} [, /inner, /outer])}

Returns the matrix product of two- or more-dimensional real-valued
column-major matrices @code{@var{m1}} and @code{@var{m2}}.  The matrix
product is calculated across the first two dimensions only.  The 1st
(column) dimension of @code{@var{m1}} must equal the 2nd (row)
dimension of @code{@var{m2}}.

If @code{@var{m1}} or @code{@var{m2}} have more than two dimensions,
then they can be multiplied in ``inner'' or ``outer'' fashion,
selected by @code{/inner} (the default) or @code{/outer},
respectively.

By default, or if @code{/inner} is selected, then dimensions beyond
the first two must be equal in both arguments, and one matrix product
of the first two dimensions is calculated for each element of
@code{@var{m1}} beyond the first two dimension and for the
corresponding element of @code{@code{m2}}.

For example, if @code{x = indgen(dblarr(2,3,4))} and @code{y =
indgen(dblarr(5,2,4))}, then @code{z = mproduct(x,y)} or @code{z =
mproduct(x,y,/inner)} gets dimensions 5, 3, 4, and @code{z(*,*,i)} is
equal to @code{mproduct(x(*,*,i),y(*,*,i))}.

If @code{/outer} is selected, then dimensions beyond the first two do
not need to be equal in both arguments, and one matrix product of the
first two dimensions is calculated for each possible combination of
one element of @code{@var{m1}} beyond the first two dimensions and one
element of @code{@var{m2}} beyond the first two dimensions.

For example, if @code{x = indgen(dblarr(2,3,4)} and @code{y =
indgen(dblarr(5,2,4)}, then @code{z = mproduct(x,y,/outer)} gets
dimensions 5, 3, 4, 4, and @code{z(*,*,i,j)} is equal to
@code{mproduct(x(*,*,i),y(*,*,j))}.

This functions gets called when the @code{#} operator is used.
@code{x # y} is equivalent to @code{mproduct(x,y)}.

See also: @ref{decomp}, @ref{dsolve}, @ref{svd}

@c -------------------------------------
@node multisieve, name, mproduct, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection multisieve
@findex multisieve

@code{multisieve, @var{x}, @var{y}, @var{list}, @var{index}}

Seeks elements of @code{@var{y}} in @code{@var{x}} and returns
information about the finds in @code{@var{list}} and @code{@var{index}}.
In @code{@var{list}} are returned the indices to @code{@var{x}} of the
found elements from @code{@var{y}}, grouped by element of
@code{@var{y}}.  In @code{@var{index}} are returned the start index of
each group in @code{@var{x}}, and the total number of found elements is
appended at the end.

For element number @code{i} from @code{@var{y}},
@code{@var{list}(@var{index}(i): @var{index}(i + 1) - 1)} is equal to
@code{sieve(@var{x} eq @var{y}(i))}.

See also: @ref{sieve}

@c -------------------------------------
@node name, ncchi2, multisieve, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection name
@findex name

@c -------------------------------------
@node ncchi2, ne, name, Internal Routines
@subsection ncchi2
@findex ncchi2

@code{ncchi2(@var{chi2}, @var{nu}, @var{nc})}

Returns the value of the non-central chi-square function at ordinate
@code{@var{chi2}} for @code{@var{nu}} degrees of freedom at
non-centrality parameter @code{@var{nc}}.

See also: @ref{chi2}

@c -------------------------------------
@node ne, newallocs, ncchi2, Internal Routines
@comment node-name,  next,  previous,  up
@subsection ne
@findex ne

@code{x ne y}

a binary logical operator that returns @code{1} for each element of
@code{x} that is unequal to the corresponding element of @code{y}.

See also: @ref{eq}, @ref{gt}, @ref{lt}, @ref{ge}, @ref{le}

@c -------------------------------------
@node newallocs, noecho, ne, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection newallocs
@findex newallocs

@code{newallocs [, @var{count}, /reset]}

@code{[debug]} Reports on new memory allocations since previous calls to
@code{newallocs}.  If @code{/reset} is not specified, then
@code{@var{count}} indicates how old the new allocations must be to be
reported: at least @code{@var{count}} @code{newalloc}s old.  If
@code{/reset} is specified, then @code{@var{count}} specifies how many
@code{newalloc}s to remember.  This is the maximum value that is
subsequently accepted in @code{newalloc}s without @code{/reset}.  If
@code{@var{count}} is not specified, then 0 is assumed.

@c -------------------------------------
@node noecho, noop, newallocs, Internal Routines
@subsection noecho
@findex noecho

@code{noecho}

Disables echoing of compiling command lines.

Reverse: @code{echo}

@c -------------------------------------
@node noop, not, noecho, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection noop
@findex noop

@code{noop}

a routine that does nothing.  It can be used as breakpoint in debuggers.

@c -------------------------------------
@node not, num00a, noop, Internal Routines
@subsection not
@findex not

@code{not(@var{x})}

Returns a @code{1} for each zero element of @code{@var{x}}, and a
@code{0} otherwise.

@c -------------------------------------
@node num00a, num00b, not, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection num00a
@findex num00a

@code{num00a(@var{jdtt})}

[SOFA] Returns the matrix for nutation for a given TT Julian Date
@code{@var{jdtt}}, according to the IAU 2000A model.  The result has
the same dimensions as @code{@var{jdtt}} with two dimensions equal to
3 prefixed.  The returned matrix @code{m} can be used as follows:
@code{v(true) = m v(mean)} where p-vector @code{v(true)} is with
respect to the true equatorial triad of date and the p-vector
@code{v(mean)} is with respect to the mean equatorial triad of date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node num00b, num06a, num00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection num00b
@findex num00b

@code{num00b(@var{jdtt})}

[SOFA] Returns the matrix for nutation for a given TT Julian Date
@code{@var{jdtt}}, according to the IAU 2000B model.  The result has
the same dimensions as @code{@var{jdtt}} with two dimensions equal to
3 prefixed.  The returned matrix @code{m} can be used as follows:
@code{v(true) = m v(mean)} where p-vector @code{v(true)} is with
respect to the true equatorial triad of date and the p-vector
@code{v(mean)} is with respect to the mean equatorial triad of date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node num06a, numat, num00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection num06a
@findex num06a

@code{num06a(@var{jdtt})}

[SOFA] Returns the matrix for nutation for a given TT Julian Date
@code{@var{jdtt}}, according to the IAU 2006/2000A model.  The result
has the same dimensions as @code{@var{jdtt}} with two dimensions equal
to 3 prefixed.  The returned matrix @code{m} can be used as follows:
@code{v(true) = m v(mean)} where p-vector @code{v(true)} is with
respect to the true equatorial triad of date and the p-vector
@code{v(mean)} is with respect to the mean equatorial triad of date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node numat, num_dim, num06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection numat
@findex numat

@code{numat(@var{epsa}, @var{dpsi}, @var{deps})}

[SOFA] Returns the matrix of nutation based on the mean obliquity of
the date @code{@var{epsa}} (radians) and the nutation components in
longitude @code{@var{dpsi}} and obliquity @code{@var{deps}} (in
radians), with respect to the equinox and ecliptic of date.  The mean
obliquity @code{@var{epsa}} must be consistent with the
precession-nutation models from which @code{@var{dpsi}} and
@code{@var{deps}} were obtained.  The three arguments must have the
same dimensions.  The result has those same dimensions with two extra
dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node num_dim, num_elem, numat, Internal Routines
@subsection num_dim
@findex num_dim

@code{num_dim(@var{x})}

Returns the number of dimensions in @code{@var{x}}.

See also: @ref{num_elem}, @ref{symclass}, @ref{symdtype}

@c -------------------------------------
@node num_elem, nut00a, num_dim, Internal Routines
@subsection num_elem
@findex num_elem

@code{num_elem(@var{x} [, @var{dims}])}

If @code{@var{dims}} is specified, and if @code{@var{x}} is an array or
file array, then this function returns the product of the sizes of the
dimensions indicated in @code{@var{dims}}.  Otherwise, this function
returns the number of elements that are in @code{@var{x}}.  This
function supports arrays, file maps, strings, scalars, compact lists,
and lists.

See also: @ref{num_dim}, @ref{dimen}, @ref{symclass}, @ref{symdtype}

@c -------------------------------------
@node nut00a, nut00b, num_elem, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection nut00a
@findex nut00a

@code{nut00a, @var{jdtt}, @var{dpsi}, @var{deps}}

[SOFA] Returns the nutation for TT Julian Date @code{@var{jdtt}}
according to the IAU 2000A model (MHB2000 luni-solar and planetary
nutation with free core nutation omitted).  @code{@var{dpsi}} and
@code{@var{deps}} are the returned nutation components (luni-solar +
planetary) in radians with respect to the equinox and ecliptic of
date.  The J2000.0 obliquity is assumed to be the Lieske et al. (1977)
value of 84381.448 arcsec.  The output parameters get the same
dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node nut00b, nut06a, nut00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection nut00b
@findex nut00b

@code{nut00b, @var{jdtt}, @var{dpsi}, @var{deps}}

[SOFA] Returns the nutation for TT Julian Date @code{@var{jdtt}}
according to the IAU 2000B model.  @code{@var{dpsi}} and
@code{@var{deps}} are the returned nutation components (luni-solar +
planetary) in radians with respect to the equinox and ecliptic of
date.  The J2000.0 obliquity is assumed to be the Lieske et al. (1977)
value of 84381.448 arcsec.  The errors that result from using this
function with the IAU 2006 value of 84381.406 arcsec can be neglected.
The output parameters get the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node nut06a, nut80, nut00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection nut06a
@findex nut06a

@code{nut06a, @var{jdtt}, @var{dpsi}, @var{deps}}

[SOFA] Returns the nutation for TT Julian Date @code{@var{jdtt}}
according to the IAU 2000A model, with adjustments to match the IAU
2006 precession.  @code{@var{dpsi}} and @code{@var{deps}} are the
returned nutation components (luni-solar + planetary) in radians with
respect to the equinox and ecliptic of date.  The output parameters
get the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node nut80, nutm80, nut06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection nut80
@findex nut80

@code{nut80, @var{jdtt}, @var{dpsi}, @var{deps}}

[SOFA] Returns the nutation for Julian Date @code{@var{jdtt}}
according to the IAU 1980 model.  @code{@var{dpsi}} and
@code{@var{deps}} are the returned nutation components (in longitude
and obliquity) in radians with respect to the ecliptic of date.  The
output parameters get the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node nutm80, obl06, nut80, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection nutm80
@findex nutm80

@code{nutm80(@var{jdtdb})}

[SOFA] Returns the nutation matrix for TDB Julian Date
@code{@var{jdtdb}}, according to the IAU 1980 model.  The result has
the same dimensions as @code{@var{jdtdb}} with two extra dimensions
equal to 3 prefixed.  The returned matrix @code{m} can be used as
follows: @code{v(true) = m v(mean)} where p-vector @code{v(true)} is
with respect to the true equatorial triad of date and the p-vector
@code{v(mean)} is with respect to the mean equatorial triad of date.
 
See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node obl06, obl80, nutm80, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection obl06
@findex obl06

@code{obl06(@var{jdtt})}

[SOFA] Returns the mean obliquity of the ecliptic in radians for TT
Julian Date @code{@var{jdtt}}, according to the IAU 2006 precession
model.  The result has the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node obl80, one, obl06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection obl80
@findex obl80

@code{obl80(@var{jdtt})}

[SOFA] Returns the mean obliquity of the ecliptic in radians for TT
Julian Date @code{@var{jdtt}}, according to the IAU 1980 model.  The
result has the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node one, openr, obl80, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection one
@findex one

@code{one, @var{x} [, @dots{}]}

@code{one(@var{x})}

The function form returns a copy of numerical variable @code{@var{x}} in
which each element is set equal to @code{1}.  The subroutine form
replaces all elements of the numerical variables with the value
@code{1}.  The subroutine form ignores non-numerical arguments; these
generate errors in the function form.

See also: @ref{zero}

@c -------------------------------------
@node openr, openu, one, Internal Routines
@subsection openr
@findex openr

@code{openr, @var{lun}, @var{file} [, /get_lun]}

@code{openr( @var{lun}, @var{file} [, /get_lun])}

Opens @code{@var{file}} (a string) on logical unit number
@code{@var{lun}} for reading.  The @code{/get_lun} switch instructs LUX
to find and use the next free logical unit and to return the found unit
number in @code{@var{lun}}.  The function form returns @code{1} when
successful, @code{0} otherwise.

See also: @ref{openw}, @ref{openu}, @ref{close}, @ref{printf},
@ref{assoc}, @ref{rewind} 

@c -------------------------------------
@node openu, openw, openr, Internal Routines
@subsection openu
@findex openu

@code{openu, @var{lun}, @var{file} [, /get_lun]}

@code{openu(@var{lun}, @var{file} [, /get_lun])}

Opens @code{@var{file}} (a string) on logical unit number
@code{@var{lun}} for updating (i.e. appending at the end).  The
@code{/get_lun} switch instructs LUX to find and use the next free
logical unit and to return the found unit number in @code{@var{lun}}.
The function form returns @code{1} when successful, @code{0} otherwise.

See also: @ref{openw}, @ref{openr}, @ref{close}, @ref{printf},
@ref{assoc}, @ref{rewind} 

@c -------------------------------------
@node openw, oplot, openu, Internal Routines
@subsection openw
@findex openw

@code{openw, @var{lun}, @var{file}, [, /get_lun]}

@code{openw(@var{lun}, @var{file} [, /get_lun])}

Opens @code{@var{file}} (a string) on logical unit number
@code{@var{lun}} for writing.  The @code{/get_lun} switch instructs LUX
to find and use the next free logical unit and to re
urn the found unit
number in @code{@var{lun}}.  The function form returns @code{1} when
successful, @code{0} otherwise.

See also: @ref{openr}, @ref{openu}, @ref{close}, @ref{printf},
@ref{assoc}, @ref{rewind} 

@c -------------------------------------
@node oplot, or, openw, Internal Routines
@subsection oplot
@findex oplot

@code{oplot [, xdata=@var{xdata}], ydata=@var{ydata} [,
symbol=@var{symbol}, line=@var{line}, dashsize=@var{dashsize},
xerrors=@var{xerrors}, yerrors=@var{yerrors}, breaks=@var{breaks},
xbarsize=@var{xbarsize}, ybarsize=@var{ybarsize}] [, /dev, /dvi, /img,
/plt, /rim, /rpl, /whole, /clipbars]}

Draws @code{@var{ydata}} versus @code{@var{xdata}} in the current
window, assuming the current plot window, e.g. to add a curve to the
previous plot.  This routine works the same as @code{plot}, except that
(1) the current window is not erased; (2) no plot window, axes, tick
marks, coordinate labels, axis labels, or plot title are drawn; (3) the
data values corresponding to the plot edges are taken from @code{!mxb},
@code{!mxt}, @code{!myb}, and @code{!myt}, rather than derived from the
data points.

See @ref{plot} for more information.

@c -------------------------------------
@node or, ordfilter, oplot, Internal Routines
@subsection or
@findex or

@code{x or @var{y}}

Logical binary or operator.  @code{x or y} combines the bits of integers
@code{x} and @code{y} such that any bit in the result is set (i.e.,
equal to @code{1}) if the corresponding bits of either @code{@var{x}} or
@code{@var{y}} or both are set.

See also: @ref{and}, @ref{xor}, @ref{andif}, @ref{orif}

@c -------------------------------------
@node ordfilter, orientation, or, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ordfilter
@findex ordfilter

@code{ordfilter( [order=@var{order},] @var{x} [[, @var{axes}],
@var{width}, /median, /minimum, /maximum])}

Applies an order filter to dimensions @code{@var{axes}} of
@code{@var{x}}, over @code{@var{width}} elements.  @code{/median}
selects a median filter, @code{/minimum} a minimum filter, and
@code{/maximum} a maximum filter.  @code{@var{order}} selects a filter
that returns the element that has fraction @code{@var{order}} or less of
the inspected elements below it.  If @code{@var{axes}} is not specified,
then the filter spans all dimensions of @code{@var{x}}.  If
@code{@var{width}} is even then one is subtracted from it.
@code{@var{width}} defaults to @code{3}.  The filter is applied only to
those elements of @code{@var{x}} for which all elements to be considered
by the filter exist.  For elements that are too close to the edge, the
original value is retained.

See also: @ref{medfilter}, @ref{minfilter}, @ref{maxfilter},
@ref{quantile}
@c -------------------------------------
@node orientation, orif, ordfilter, Internal Routines
@subsection orientation
@findex orientation

@code{orientation, @var{data}, @var{widths} [, @var{orientation},
@var{values}, @var{wavenumbers}, @var{grid}, @var{aspect}, @var{order},
/vocal, /getj]}

Determines local orientation in 2D or 3D data employing a method based
on local Fourier Transforms.

@table @var
@item data
The 2D or 3D array in which orientations are to be determined.
@item widths
must be a 2 or 3-element vector containing the FWHM of the Gaussian
smoothing kernels applied in the dimensions (0 means no smoothing).
@item grid
is a 2 or 3-element vector containing the desired dimensions of the
results.  If it is not specified, then the results will have the same
dimensions as @code{@var{data}}.
@item aspect
specifies the dimensions of a pixel, if they do not have an aspect ratio
of 1.
@item order
contains the approximation order of the calculations, a number between 1
and 4 (default, most accurate).
@item orientation
The found orientation is returned in this argument (if specified),
unless @code{/getj} is specified.  The orientation is expressed in the
2d case as an angle in radians measured counterclockwise from the
positive x-axis, and in the 3D case as a 2-element vector containing the
x and y coordinates of the orientation vector relative to a unit z
coordinate.
@item values
The found eigenvalues (measures for the data gradients in the principal
directions) are returned in this argument (if specified), unless
@code{/getj} is specified.  The eigenvalues are returned in descending
order.
@item wavenumber

By default, the determined local wavenumber in the direction of the
found orientation is returned in this argument (if specified), unless
@code{/getj} is specified.  If @code{/perpendicular} is specified, then
-- for two-dimensional data only -- the local wavenumber in the
direction perpendicular to the found orientation is returned instead.
The wavenumber is measured in units of one data element.  A data set
with values equal to sin(x) returns a wavenumber of 1 for the
perpendicular wavenumber, and 0 for the parallel wavenumber.
If a random data set is smoothed over FWHM @code{@var{w}} in one direction,
then the parallel local wavenumber is on average equal to about
1.65/@code{@var{w}}.
@end table
@table @code
@item /getj
If specified, then the unique elements of the inertia tensor are
returned in @code{@var{values}} (the diagonal elements) and
@code{@var{orientation}} (the off-diagonal elements), and the local
power in @code{@var{wavenumber}}.  This keyword is supplied for
debugging purposes and may be withdrawn in the future.
@item /vocal
Induces periodical display of the progress status.
@end table

The returned orientations are ambiguous over 180 degrees.

@menu
* orientation details::
@end menu

@c ---------------------------------------------------------------------
@node orientation details,  , orientation, orientation
@comment  node-name,  next,  previous,  up
@subsubsection orientation details

Conceptually, the orientation is determined by fitting (in least-squares
fashion) a line to the Fourier transform of a small, apodized part of
the data array centered on the point at which the orientation is to be
determined.  The fit can be determined by calculating the eigenvector
corresponding to the smallest eigenvalue of a tensor whose elements are
suitable integrals involving the Fourier transform of the data.  If one
calls the spectral density of the data (i.e., the square of the value of
the Fourier transform) a "mass density", and substitutes "space
coordinate" for "wavenumber" in the integrals, then the tensor is the
inertia tensor of the "mass" distribution, and therefore this method of
calculating orientations is known as the @emph{(inertia) tensor method}.

Fortunately, the calculation of the elements of the inertia tensor can
all be performed in the space domain, by using suitable spatial
derivatives, so no Fourier transforms are actually calculated.  During
the calculations, a spatial differencing scheme is used to approximate
the spatial derivatives.  The order (and accuracy) of the differencing
scheme is governed by argument @code{@var{order}}.

The eigenvalues of the inertia tensor measure the squared gradient of
the data values along the principal axes (indicated by the
eigenvectors).  A zero eigenvalue indicates that the data does not vary
along the corresponding principal axis.  Such a principal axis may then
be said to indicate the orientation of the data.

In practice, the eigenvalues are hardly ever exactly equal to zero, but
if one eigenvalue is much smaller than all other ones, then the
eigenvector corresponding to that eigenvalue can still be said to
indicate the orientation of the data.  In general, the eigenvector
corresponding to the smallest eigenvalue of the inertia tensor is taken
to indicate the orientation, and that orientation is returned by
@code{orientation}.

The square of the returned local wavenumber is equal to the average of
the square of the component of the wavevector that is aligned with the
found orientation, weighted with the square of the spectral density in
each small apodized area around the central pixel.  As for the local
orientation, all local-wavenumber calculations are done completely in
the spatial domain, using suitable spatial derivatives.

The local wavenumber in any of the principal directions is equal to the
sum of all eigenvalues except the eigenvalue corresponding to the chosen
principal direction, and the result divided by the local power (see at
@code{/getj}).

History:

The procedure that is used in LUX for calculating local orientation in
the space domain from an inertia tensor is described by Jahne [a-umlaut]
(1993).  He ascribes the idea of determining local orientation in the
Fourier domain to Bigun [u-umlaut] and Granlund (1987).  The LUX
procedure for calculating the local wavenumber was invented by l. Strous
(1998) analogous to Jahne's [a-umlaut] procedure for local orientation.

Bibliography:

@itemize @minus
@item
"Digital Image Processing: Concepts, Algorithms, and Scientific
Applications", 2nd Edition, by Bernd Jahne [a-umlaut]; Springer-Verlag
(1993) [Sections 7.3, 17.5.2]
@item
"Optimal orientation detection of linear symmetry", by j. Bigun
[u-umlaut] and g. h. Granlund, in Proc. 1st Int. Conf. Comp. Vis.,
London (1987), pp@. 433--438, ieee Computer Society Press, Washington
(1987)
@end itemize

@c -------------------------------------
@node orif, p06e, orientation, Internal Routines
@subsection orif
@findex orif

@code{x orif y}

Logical binary or operator with possible evaluation suppression.
@code{x orif y} yields the same result as @code{x ne 0 or y ne 0}, but
if @code{x} is unequal to zero, then @code{y} is not evaluated.

See also: @ref{and}, @ref{or}, @ref{xor}, @ref{andif}, @code{ne}

@c -------------------------------------
@node p06e, p2s, orif, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection p06e
@findex p06e

@code{p06e, @var{jdtt}, @var{eps0}, @var{psia}, @var{oma},
@var{bpa}, @var{bqa}, @var{pia}, @var{bpia}, @var{epsa}, @var{chia},
@var{za}, @var{zetaa}, @var{thetaa}, @var{pa}, @var{gam}, @var{phi},
@var{psi}}

[SOFA] Returns IAU 2006 equinox-based precession angles for TT Julian
Date @code{@var{jdtt}}.  The returned precession angles are: obliquity
at J2000.0 @code{@var{epsilon_0}}, luni-solar precession
@code{@var{psi_a}}, inclination of equator with respect to J2000.0
ecliptic @code{@var{omega_a}}, ecliptic pole x from the J2000.0
ecliptic triad @code{@var{p_a}}, ecliptic pole -y from the J2000.0
ecliptic triad @code{@var{q_a}}, angle between the moving and J2000.0
ecliptics @code{@var{pi_a}}, longitude of ascending node of the
ecliptic @code{@var{Pi_a}}, obliquity of the ecliptic
@code{@var{epsilon_a}}, planetary precession @code{@var{chi_a}},
equatorial precession -3rd 323 Euler angle @code{@var{z_a}},
equatorial precession -1st 323 Euler angle @code{@var{zeta_a}},
equatorial precession 2nd 323 Euler angle @code{@var{theta_a}},
general precession @code{@var{p_a}}, f-w angle J2000.0 right ascension
difference of ecliptic poles @code{@var{gamma_j2000}}, f-w angle
J2000.0 codeclination of ecliptic pole @code{@var{phi_j2000}}, f-w
angle J2000.0 longitude difference of equator poles
@code{@var{psi_j2000}}.  The returned values are all in radians and
have the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node p2s, pap, p06e, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection p2s
@findex p2s

@code{p2s(@var{p})}

[SOFA] Returns the spherical polar coordinates (longitude in radians,
latitude in radians, radial distance) corresponding to the p-vector
@code{@var{p}}.  The radial distance has the same units as the
coordinates in @code{@var{p}}.  @code{@var{p}} must have 3 elements in
its first dimension.  The result has the same dimensions as
@code{@var{p}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pap, pas, p2s, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pap
@findex pap

@code{pap(@var{ref}, @var{tgt})}

[SOFA] Returns the position angle of p-vector @code{@var{tgt}} from
p-vector @code{@var{ref}}.  It is in the range from minus pi to plus
pi radians.  The vectors @code{@var{ref}} and @code{@var{tgt}} need
not be of unit length.  @code{@var{tgt}} and @code{@var{ref}} must
have the same dimensions, and their first dimension must have 3
elements.  The result has the same dimensions as @code{@var{tgt}}
except that the first dimension (equal to 3) is omitted.

@c -------------------------------------
@node pas, pb06, pap, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pas
@findex pas

@code{pas(@var{al}, @var{ap}, @var{bl}, @var{bp})}

[SOFA] Returns the position angle of b with respect to a.
@code{@var{al}} = longitude of point a in radians, @code{@var{ap}} =
latitude of point a in radians, @code{@var{bl}} = longitude of point b
in radians, @code{@var{bp}} = latitude of point b in radians.  All
arguments must have the same dimensions, which are also the dimensions
of the result.

@c -------------------------------------
@node pb06, pdev, pas, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pb06
@findex pb06

@code{pb06, @var{jdtt}, @var{bzeta}, @var{bz}, @var{btheta}}

[SOFA] Returns three Euler angles @code{@var{bzeta}} (1st rotation,
radians clockwise around z), @code{@var{bz}} (3rd rotation, radians
clockwise around z), @code{@var{btheta}} (2nd rotation, radians
counterclockwise around y) which implement general precesion from
epoch J2000.0, using the IAU 2006 model, for TT Julian Date
@code{@var{jdtt}}.  Frame bias (the offset between ICRS and J2000.0)
is included.  The three output variables get the same dimensions as
@code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pdev, pdp, pb06, Internal Routines
@subsection pdev
@findex pdev

@code{pdev [, @var{device}]}

Sets the plot device, or displays all valid choices.  The current value
is stored in @code{!pdev}.

See also: @ref{!pdev}

@c -------------------------------------
@node pdp, peek, pdev, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pdp
@findex pdp

@code{pdp(@var{a}, @var{b})}

[SOFA] Returns the inner product of the two p-vectors @code{@var{a}}
and @code{@var{b}}, which must have the same dimensions, and must have
3 elements in their first dimension.  The result has the same
dimensions as the arguments except that the first dimension (equal to
3) is omitted.

@c -------------------------------------
@node peek, pen, pdp, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection peek
@findex peek

@code{peek, @var{address} [, @var{number}]}

For debugging.  Shows the contents of @code{@var{number}} bytes starting
at address @code{@var{address}}.

@c -------------------------------------
@node pen, pencolor, peek, Internal Routines
@subsection pen
@findex pen

@code{pen [, @var{width}, @var{gray}] [, /standardgray]}

Shows or sets the (integer) @code{@var{width}} and (floating-point)
@code{@var{gray}} level of the plot pen.  By default, the gray scale is
such that a gray level of 0 corresponds to the gray level of the
background color, and a gray level of 1 to the foreground gray level, so
that just after an @code{erase} plotting something at gray level 0
yields no visible result.  If you specify a gray value between 0 and 1,
then the pen color is set to the color out of the current LUX colormap
that is closest to the requested gray level.

There are separate gray scales for plotting to the Postscript file or to
the screen, so that plotting at a gray level of 1 yields results with
maximum contrast in both cases, even if the background of the images is
black and that of the Postscript file white.

In particular, if @code{set,/whitebackground} is set, then a gray value
of 0 or less corresponds in LUX windows to white and a gray value of 1
or more to black.  If @code{set,/whitebackground} is not set, then a
gray value of 0 or less corresponds to black in a LUX window and a gray
value of 1 or more to white.

a pen change affects output to the Postscript file as well as output in
the current LUX window (indicated by @code{!window}), but not in other
LUX windows. 

If @code{/standardgray} is specified, then the used gray scale always
has the gray level of 0 correspond to black, and a gray level of 1 to
white.

See also: @ref{erase}, @ref{set}, @ref{!window}

@c -------------------------------------
@node pencolor, pfw06, pen, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pencolor
@findex pencolor

@code{pencolor [, @var{color}]}

Sets or displays the pen color.  If @code{@var{color}} is specified, it
must be a string containing a valid color name, or a numerical array
with three elements specifying red, green, and blue components between 0
(absent) and 1 (full presence).

Which color names are valid depends on whether you are connected to an x
server.  If you are connected to an x server (for example, if you are
plotting to a window, or if you have one or more LUX windows open
already, or if you've executed @code{xopen} and not @code{xclose}), then
all color names that x supports are valid, including names such as
@code{black} and @code{blue} (@ref{Incidental Colors}).  If you are not
connected to an x server and you are plotting to a PostScript file
(i.e., @code{!pdev} is equal to 1), then only @code{rgb} and @code{rgbi}
color names are valid (@ref{Incidental Colors}).

See also: @ref{Incidental Colors}, @ref{!pdev}, @ref{pdev}, @ref{xopen},
@ref{xclose}

@c -------------------------------------
@node pfw06, pit, pencolor, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pfw06
@findex pfw06

@code{pfw06, @var{jdtt}, @var{gamb}, @var{phib}, @var{psib},
@var{epsa}}

[SOFA] Returns the IAU 2006 precession angles for TT Julian Date
@code{@var{jdtt}} in Fukushima-Williams 4-angle formulation: f-w angle
gamma_bar in radians @code{@var{gamb}}, f-w angle phi_bar in radians
@code{@var{phib}}, f-w angle psi_bar in radians @code{@var{psib}}, f-w
angle epsilon_a in radians @code{@var{epsa}}.  The four output
variables get the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pit, pixelsto8bit, pfw06, Internal Routines
@subsection pit
@findex pit

@code{pit([@var{x},] @var{y} [, @var{n}])}

Returns the coefficients of @code{@var{n}}th-degree polynomial fit of
@code{@var{y}} to @code{@var{x}}.  @code{@var{n}} defaults to 0,
@code{@var{x}} to @code{indgen(@var{y}/num_elem(@var{y}))}.

@c -------------------------------------
@node pixelsto8bit, plan94, pit, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pixelsto8bit
@findex pixelsto8bit

@code{pixelsto8bit, @var{raw}, @var{pixels8bit}, @var{colormap}}

Interprets @code{@var{raw}} as raw pixel values suitable for the
current visual (i.e., suitable for display through @code{tvraw}), and
returns an 8-bit equivalent (in @code{@var{pixels8bit}}) and the
associated colormap (in @code{@var{colormap}}).  If the image contains
at most 256 distinct colors, then the combination of the two output
parameters is fully equivalent to the input image.  If the image
contains more than 256 distinct colors, then 256 distinct colors are
selected from it at random, and each of the other colors from the
image are represented in the output by the nearest of the 256 chosen
colors.  The colormap has 3 by 256 elements, for the red, green, and
blue color values.

The @code{@var{pixels8bit}} and @code{@var{colormap}} can be passed to
@code{gigwrite}.

See also: @ref{colorstogrey}, @ref{gifwrite}, @ref{show_visuals},
@ref{tvraw}

@c -------------------------------------
@node plan94, plot, pixelsto8bit, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection plan94
@findex plan94

@code{plan94(@var{jdtdb}, @var{planet})}

[SOFA] Returns the approximate heliocentric position and velocity at
TDB Julian Date @code{@var{jdtdb}} of major planet @code{@var{planet}}
(1 = Mercury, 2 = Venus, 3 = emb, 4 = Mars, ..., 8 = Neptune).
@code{@var{planet}} must be a @code{scalar} or an @code{array} with
exactly 1 element.  The result has the same dimensions as
@code{@var{jdtdb}} except that two dimensions equal to 3 and 2 are
prefixed.  If the result is @code{pv}, then @code{pv(*,0,/all)} are
the heliocentric equatorial J2000.0 (mean equator & epoch) cartesian
coordinates in AU, and @code{pv(*,1,/all)} are the corresponding
heliocentric J2000.0 cartesian velocities (AU/d).

The algorithm is due to Simon, Bretagnon et al. (1994).  Comparison
with jpl ephemeris de102 says that during the years 1800 - 2050 the
maximum errors in longitude l (arcsec), in the numerical order of the
planets given above: 4, 5, 6, 17, 71, 81, 86, 11.  The maximum errors
in latitude b (arcsec) are: 1, 1, 1, 1, 5, 13, 7, 1.  The maximum
errors in radial distance r (Mm) are: 0.3, 0.8, 1, 7.7, 76, 267, 712,
253.

During the years 1000 - 3000 the accuracy is no worse than 1.5 times
that over the years 1800 - 2050.

Comparison with the jpl de200 ephemeris give the following rms errors
during the years 1960 - 2025: for position (Mm) 0.334, 1.06, 2.01,
7.69, 71.7, 199, 564, 158; for velocity (m/s) 0.437, 0.855, 0.815,
1.98, 7.7, 19.4, 16.4, 14.4.

Comparison against de200 during the years 1800 - 2100 gave the
following maximum absolute differencs (and essentially the same using
de406):  longitude l (arcsec): 7, 7, 9, 26, 78, 87, 86, 11; latitude b
(arcsec): 1, 1, 1, 1, 6, 14, 7, 2; radial distance r (Mm): 0.5, 1.1,
1.3, 9, 82, 263, 661, 248; radial speed (m/s): 0.7, 0.9, 1.0, 2.5,
8.2, 24.6, 27.4, 21.4.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node plot, plot3d, plan94, Internal Routines
@subsection plot
@findex plot

@code{plot [, xdata=@var{xdata}], ydata=@var{ydata} [,
symbol=@var{symbol}, line=@var{line}, xtitle=@var{xtitle},
ytitle=@var{ytitle}, title=@var{title}, dashsize=@var{dashsize},
xerrors=@var{xerrors}, yerrors=@var{yerrors}, breaks=@var{breaks},
xbarsize=@var{xbarsize}, ybarsize=@var{ybarsize}, xfmt=@var{xfmt},
yfmt=@var{yfmt}] [, /dev, /dvi, /img, /plt, /rim, /rpl]
[, /lii, /lio, /loi, /loo] [, /keep, /whole, /clipbars]}

Produces a plot of @code{@var{ydata}} versus @code{@var{xdata}}.

@table @var
@item xdata ydata
The x and y coordinates of the data points; they must be arrays.  If
@code{@var{xdata}} is not specified, then
@code{indgen(@code{@var{ydata}})} is assumed.  If @code{@var{x}} and
@code{@var{y}} have unequal numbers of elements, then the smallest
number between the two is used, and excess elements are ignored.
@item xerrors yerrors
If @code{@var{xerrors}} is specified, then horizontal error bars are
drawn on all points that have non-zero errors.  Likewise,
@code{@var{yerrors}} yields vertical error bars.  These arguments must
be arrays.  @code{@var{xerrors}} and @code{@var{yerrors}} must have
either as many elements as the smaller of @code{@var{x}} and
@code{@var{y}}, or twice as many.  In the first case, the error bar
extends equally far on either side of the data point.  In the second
case, the errors array is interpreted as a two-dimensional array with 2
elements in its second dimension, and @code{array(*,0)} is taken for the
extent above or to the left of the data point, and @code{array(*,1)} for
the extent below or to the right of the data point.
@item symbol
The number of the symbol type with which the locations of the data
points are indicated.  See below.
@item line
The number of the line style with which the data points are connected.
See below.
@item xbarsize ybarsize
Specify the vertical size of horizontal error bars and the horizontal
size of vertical error bars, respectively.  The values are copied into
@code{!plxerrb} and @code{!plyerrb} and remain in effect until they are
changed again.
@item xtitle ytitle
The labels for the x and y axes (strings).  All strings that
@code{callig} accepts are legal.
@item title
The label that goes above the plot (a string).  All strings that
@code{callig} accepts are legal.
@item breaks
The indices of the data points at which the plotted curve is broken,
i.e. no connecting line is drawn to the next data point.
@item dashsize
scales the size of the dashes in non-solid lines.
@item xfmt yfmt
specifies the output format for the labels along the horizontal and
vertical axes, respectively (@ref{Formatted Input/Output}).  These
formats default to @code{%1g}. 
@end table

Only the relative order of arguments of the same data class (scalar,
array, string) matters; i.e. @code{plot, @var{xtitle}, @var{ydata},
@var{xerrors}, @var{ytitle}} is a valid call.

The first 6 keywords are coordinate system keywords.  The next four
select a particular plot style: linear-linear (@code{/lii}),
linear-logarithmic (@code{/lio}), logarithmic-linear (@code{/loi}), or
logarithmic-logarithmic (@code{/loo}).  The global variable
@code{!pltyp} is adjusted accordingly, so the new plot style remains in
effect until it is explicitly changed again.  @code{/keep} suppresses
clearing the device before drawing the plot.  @code{/whole} suppresses
drawing of lines between points that lie wholly outside of the plot
window (though symbols may still be drawn at the positions where such
lines cross the edges of the plot window).  @code{/clipbars} selects
clipping of error bars if they extend beyond the edges of the plot
window. 

In logarithmic plots, only positive values are considered, the ratio
between the used plot limits is at least 10, labels are displayed at
factors of 10 only, and minor tick marks are displayed at all integer
multiples (up to 9) of the previous labeled tick mark's label.

In bar plots (line style 20), two successive data points are connected
by a horizontal segment at the y value of the first point and a vertical
segment at the x value of the second point, and the last data point gets
a horizontal segment at its y value extending over 1 data unit to the
right of its x value.

See also: @ref{callig}, @ref{oplot}, @ref{!pltyp}, @ref{!plxerrb},
@ref{!plyerrb}

@c -------------------------------------------------------------
@menu
* Plot Styles::
* plot Globals::
@end menu

@node Plot Styles, plot Globals, plot, plot
@comment  node-name,  next,  previous,  up
@subsubsection Plot and Line Styles

The arguments to @code{symbol} and @code{line} must be integers between
@minus{}9 and 29, inclusive.

The symbol and line styles are as follows.  Styles 1 through 9 refer to
symbols at the locations of the data points, connected by lines.  The
symbols are:
@enumerate 1
@item dots (.)
@item plus (+)
@item times (x)
@item box
@item upward-pointing triangle
@item diamond
@item downward-pointing triangle
@item four-line asterisk (+ and x combined)
@item circle
@end enumerate
Styles @minus{}9 to @minus{}1 refer to symbols at the locations of the
data points, without connecting lines.  The symbols are the same as for
the corresponding positive numbers.  Style 0 is invisible.  Styles 10
through 19 refer to variously dotted and dashed lines connecting the
data points.  The styles are:
@enumerate 10
@item short-dashed
@item medium-dashed
@item long-dashed
@item dot-short-dashed
@item dot-medium-dashed
@item dotted
@item dot-dot-dashed
@item dot-dash-dashed
@item dot-dot-dash-dashed
@item short-medium-dashed
@end enumerate
Style 20 refers to a bar-style plot in which successive data points are
connected by a horizontal and a vertical line.  Styles 21 through 29
refer again to symbols at the locations of the data points, connected by
lines.  The symbols are:
@enumerate 21
@item e
@item f
@item g
@item h
@item i
@item j
@item k
@item l
@item m
@end enumerate

You can use @code{line} to select the line style connecting the symbols
selected with a positive @code{symbol}.  By default, the symbols are
connected by solid lines.

See also: @ref{plot}, @ref{oplot}

@c -------------------------------------------------------------
@node plot Globals,  , Plot Styles, plot
@comment  node-name,  next,  previous,  up
@subsubsection Global Variables Associated with plot

The following global variables are associated with and govern some
aspects of a plot:

@table @code
@item !dashsize
a scaling factor for the size of the dashes in the plot lines.  Defaults
to 1.
@item !dlabx, !dlaby
The number of minor tick marks per major (labeled) tick mark on the x
and y axes if these are linear axes.
@item !font
Determines the font to use for the plot labels.  Defaults to 3 (roman
sans serif).
@item !fz, !fzx
If set to zero, then make the x (@code{!fzx}) and y (@code{!fz}) axes
start not higher than at 0 -- unless appropriate explicit plot limits
are set through @code{limits}.  @code{!fz} defaults to @code{0}, and
@code{!fzx} to @code{1}.
@item !fstepx, !fstepy
If set to zero, then the data value range per major tick mark is
determined automatically; otherwise, it is taken from @code{!stepx} and
@code{!stepy}, respectively.
@item !labx, !laby
If unequal to @code{0}, then labels are drawn along the x and y axes.
These default to @code{1}.
@item !mxb, !mxt, !myb, !myt
The data values that correspond to the edges of the last drawn plot: the
x axis ranged between @code{!mxb} and @code{!mxt}, and the y axis
between @code{!myb} and @code{!myt}.
@item !pltyp
Determines whether the plot axes are linear or logarithmic, and whether
a full plot box is drawn or only an x and an y axis.  If @code{!pltyp
mod 4} is equal to @code{0}, then a linear-linear plot is drawn;
@code{1} yields a linear x - logarithmic y plot; @code{2} gives a
logarithmic x - linear y plot; and @code{3} provides a
logarithmic-logarithmic plot.  If @code{!pltyp} is less than 4, then a
full plot box is drawn.  If @code{!pltyp} is greater than 3, then only
the x and y axes are drawn.  
@item !plxerrb, !plyerrb
Determine the size of the vertical (@code{!plxerrb}) and horizontal
(@code{!plyerrb}) error bars, in @code{rpl} coordinates.
@item !rx, !ry
If these are set unequal to @code{0}, and if the plot limits are
determined from the data values, then some extra room is left between
the corresponding plot edges and the nearest data points.  They default
to @code{1}
@item !startx, !starty
The data values that correspond to the first labeled tick mark on the x
and y axes.  If a particular axis was logarithmic, then the
corresponding variable is a logarithm to base 10.
@item !stepx, !stepy
The data values that correspond to the interval between labeled tick
marks on the x and y axes.  If a particular axis was logarithmic, then
the corresponding variable is a logarithm to base 10.
@item !tickx, !ticky
The size of the major tick marks, in @code{dvi} coordinates.  Positive
sizes correspond to tick marks pointing into the plot, negative values
correspond to tick marks pointing out of the plot.  They default to
@code{0.01}.
@item !tickxr, !tickyr
The size of the minor tick marks, relative to the corrsponding major
tick marks.  They default to @code{0.5}.
@item !wxb, !wxt, !wyb, !wyt
The coordinates of the edges of the plot window, measured in @code{dvi}
coordinates.  The lower left-hand corner of the plot window is at
@code{(!wxb,!wyb)} and the upper right-hand corner at
@code{(!wxt,!wyt)}.
@end table

See also: @ref{plot}, @ref{oplot}, @ref{!dashsize}, @ref{!dlabx},
@ref{!dlaby}, @ref{!font}, @ref{!fz}, @ref{!fzx}, @ref{!labx},
@ref{!laby}, @ref{!mxb}, @ref{!mxt}, @ref{!myb}, @ref{!myt},
@ref{!pltyp}, @ref{!plxerrb}, @ref{!plyerrb}, @ref{!rx}, @ref{!ry},
@ref{!startx}, @ref{!starty}, @ref{!stepx}, @ref{!stepy}, @ref{!tickx},
@ref{!ticky}, @ref{!tickxr}, @ref{!tickyr}, @ref{!wxb}, @ref{!wxt},
@ref{!wyb}, @ref{!wyt}

@c -------------------------------------
@node plot3d, pm, plot, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection plot3d
@findex plot3d

@code{plot3d, @var{data} [, /hide, /cube]}

@code{[@ref{develop} package]} Generates a three-dimensional plot of 2d
data array @code{@var{data}}, where each element of @code{@var{data}}
indicates the height of the corresponding data point.  The appearance of
the plot (viewing angle, etcetra) is determined by @code{#p3d} which can
be changed with routine @code{projection}.  By default, the data is
shown as a transparent wire frame.  Keyword @code{/hide} selects use of
a hidden-line algorithm so that the data is shown as an opaque surface
on a wire frame.  Keyword @code{/cube} selects display of the unit cube.

See also: @ref{#p3d}, @ref{projection}, @ref{!wzb}, @ref{!wzt}

@c -------------------------------------
@node pm, pmat00, plot3d, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pm
@findex pm

@code{pm(@var{p})}

[SOFA]  Returns the modulus of the p-vector @code{@var{p}}, which must
have 3 elements in its first dimension.  The result has the same
dimensions as @code{@var{p}} except that the first dimension (equal to
3) is omitted.

@c -------------------------------------
@node pmat00, pmat06, pm, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pmat00
@findex pmat00

@code{pmat00(@var{jdtt})}

[SOFA] Returns the precession matrix (including frame bias) from GCRS
to a specified TT Julian Date @code{@var{jdtt}} according to the IAU
2000 model.  The result has the same dimensions as @code{@var{jdtt}}
except that two dimensions equal to 3 are prefixed.  If the result is
@code{rbp} then @code{v(date) = rbp v(gcrs)} where @code{v(gcrs)} is a
p-vector with respect to the Geocentric Celestial Reference System and
@code{v(date)} is a p-vector with respect to the mean equatorial triad
of the given date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pmat06, pmat76, pmat00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pmat06
@findex pmat06

@code{pmat06(@var{jdtt})}

[SOFA] Returns the precession matrix (including frame bias) from GCRS
to a specified TT Julian Date @code{@var{jdtt}} according to the IAU
2006 model.  The result has the same dimensions as @code{@var{jdtt}}
except that two dimensions equal to 3 are prefixed.  If the result is
@code{rbp} then @code{v(date) = rbp v(gcrs)} where @code{v(gcrs)} is a
p-vector with respect to the Geocentric Celestial Reference System and
@code{v(date)} is a p-vector with respect to the mean equatorial triad
of the given date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pmat76, pn, pmat06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pmat76
@findex pmat76

@code{pmat76(@var{jdtt})}

[SOFA] Returns the precession matrix from J2000.0 to a specified TT
Julian Date @code{@var{jdtt}} according to the IAU 1976 model.  The
result has the same dimensions as @code{@var{jdtt}} except that two
dimensions equal to 3 are prefixed.  If the result is @code{rbp} then
@code{v(date) = rbp v(gcrs)} where @code{v(gcrs)} is a p-vector with
respect to the Geocentric Celestial Reference System and
@code{v(date)} is a p-vector with respect to the mean equatorial triad
of the given date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pn, pn00, pmat76, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pn
@findex pn

@code{pn, @var{p}, @var{r}, @var{u}}

[SOFA] Converts p-vector @code{@var{p}} into a modulus @code{@var{r}}
and unit vector @code{@var{u}}.  @code{@var{p}} must have 3 elements
in its first dimension.  @code{@var{r}} and @code{@var{u}} get the
same dimensions as @code{@var{p}} except that @code{@var{r}} omits the
first dimension (equal to 3).

@c -------------------------------------
@node pn00, pn00a, pn, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pn00
@findex pn00

@code{pn00, @var{jdtt}, @var{dpsi}, @var{deps}, @var{epsa},
@var{rb}, @var{rp}, @var{rbp}, @var{rn}, @var{rbpn}}

[SOFA] Returns precession-nutation according to the IAU 2000 model for
the specified TT Julian Date @code{@var{jdtt}} and nutation in
longitude @code{@var{dpsi}} and obliquity @code{@var{deps}}, both in
radians. The nutation values must be with respect to the equinox and
ecliptic of date.  The output parameters are the mean obliquity
@code{@var{epsa}}, the frame bias matrix @code{@var{rb}}, the
precession matrix @code{@var{rp}}, the bias-precession matrix
@code{@var{rbp}}, the nutation matrix @code{@var{rn}}, and the
GCRS-to-true matrix @code{@var{rbpn}}.  @code{@var{epsa}} gets the
same dimensions as @code{@var{jdtt}}.  The remaining output variables
get those same dimensions plus two extra dimensions equal to 3
prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pn00a, pn00b, pn00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pn00a
@findex pn00a

@code{pn00a, @var{jdtt}, @var{dpsi}, @var{deps}, @var{epsa},
@var{rb}, @var{rp}, @var{rbp}, @var{rn}, @var{rbpn}}

[SOFA] Returns precession-nutation according to the IAU 2000A model
for the specified TT Julian Date @code{@var{jdtt}}. The output
parameters are the nutation in longitude in radians @code{@var{dpsi}},
the nutation in obliquity in radians @code{@var{deps}}, the mean
obliquity @code{@var{epsa}}, the frame bias matrix @code{@var{rb}},
the precession matrix @code{@var{rp}}, the bias-precession matrix
@code{@var{rbp}}, the nutation matrix @code{@var{rn}}, and the
GCRS-to-true matrix @code{@var{rbpn}}.  @code{@var{dpsi}},
@code{@var{deps}}, and @code{@var{epsa}} get the same dimensions as
@code{@var{jdtt}}.  The remaining output variables get those same
dimensions plus two extra dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pn00b, pn06, pn00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pn00b
@findex pn00b

@code{pn00b, @var{jdtt}, @var{dpsi}, @var{deps}, @var{epsa},
@var{rb}, @var{rp}, @var{rbp}, @var{rn}, @var{rbpn}}

[SOFA] Returns precession-nutation according to the IAU 2000B model
for the specified TT Julian Date @code{@var{jdtt}} and nutation in
longitude @code{@var{dpsi}} and obliquity @code{@var{deps}}, both in
radians.  The output parameters are the mean obliquity
@code{@var{epsa}}, the frame bias matrix @code{@var{rb}}, the
precession matrix @code{@var{rp}}, the bias-precession matrix
@code{@var{rbp}}, the nutation matrix @code{@var{rn}}, and the
GCRS-to-true matrix @code{@var{rbpn}}.  @code{@var{dpsi}},
@code{@var{deps}}, and @code{@var{epsa}} get the same dimensions as
@code{@var{jdtt}}.  The remaining output variables get those same
dimensions plus two extra dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pn06, pn06a, pn00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pn06
@findex pn06

@code{pn06, @var{jdtt}, @var{dpsi}, @var{deps}, @var{epsa},
@var{rb}, @var{rp}, @var{rbp}, @var{rn}, @var{rbpn}}

[SOFA] Returns precession-nutation according to the IAU 2006 model for
the specified TT Julian Date @code{@var{jdtt}} and nutation in
longitude @code{@var{dpsi}} and obliquity @code{@var{deps}}, both in
radians. The nutation values must be with respect to the equinox and
ecliptic of date.  The output parameters are the mean obliquity
@code{@var{epsa}}, the frame bias matrix @code{@var{rb}}, the
precession matrix @code{@var{rp}}, the bias-precession matrix
@code{@var{rbp}}, the nutation matrix @code{@var{rn}}, and the
GCRS-to-true matrix @code{@var{rbpn}}.  @code{@var{epsa}} gets the
same dimensions as @code{@var{jdtt}}.  The remaining output variables
get those same dimensions plus two extra dimensions equal to 3
prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pn06a, pnm00a, pn06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pn06a
@findex pn06a

@code{pn06a, @var{jdtt}, @var{dpsi}, @var{deps}, @var{epsa},
@var{rb}, @var{rp}, @var{rbp}, @var{rn}, @var{rbpn}}

[SOFA] Returns precession-nutation according to the IAU 2006/2000A
models for the specified TT Julian Date @code{@var{jdtt}}. The output
parameters are the nutation in longitude in radians @code{@var{dpsi}},
the nutation in obliquity in radians @code{@var{deps}}, the mean
obliquity @code{@var{epsa}}, the frame bias matrix @code{@var{rb}},
the precession matrix @code{@var{rp}}, the bias-precession matrix
@code{@var{rbp}}, the nutation matrix @code{@var{rn}}, and the
GCRS-to-true matrix @code{@var{rbpn}}.  @code{@var{dpsi}},
@code{@var{deps}}, and @code{@var{epsa}} get the same dimensions as
@code{@var{jdtt}}.  The remaining output variables get those same
dimensions plus two extra dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pnm00a, pnm00b, pn06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pnm00a
@findex pnm00a

@code{pnm00a(@var{jdtt})}

[SOFA] Returns the matrix of precession-nutation (including frame
bias) for TT Julian Date @code{@var{jdtt}}, equinox-based, IAU 2000A
model.  The result has the same dimensions as @code{@var{jdtt}} but
with two dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pnm00b, pnm06a, pnm00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pnm00b
@findex pnm00b

@code{pnm00b(@var{jdtt})}

[SOFA] Returns the matrix of precession-nutation (including frame
bias) for TT Julian Date @code{@var{jdtt}}, equinox-based, IAU 2000B
model.  The result has the same dimensions as @code{@var{jdtt}} but
with two dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pnm06a, pnm80, pnm00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pnm06a
@findex pnm06a

@code{pnm06a(@var{jdtt})}

[SOFA] Returns the matrix of precession-nutation (including frame
bias) for TT Julian Date @code{@var{jdtt}}, equinox-based, IAU 2006
precession and IAU 2000A nutation models.  The result has the same
dimensions as @code{@var{jdtt}} but with two dimensions equal to 3
prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pnm80, pointer, pnm06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pnm80
@findex pnm80

@code{pnm80(@var{jdtdb})}

[SOFA] Returns the matrix of precession-nutation (including frame
bias) for Julian Date @code{@var{jdtdb}}, equinox-based, IAU 1976
precession and IAU 1980 nutation models.  The result has the same
dimensions as @code{@var{jdtt}} but with two dimensions equal to 3
prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pointer, polartossfc, pnm80, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pointer
@findex pointer

@code{pointer, @var{pointer}, @var{target} [, /subroutine, /function,
/internal, /main]}

If no keywords are specified, then this routine makes named variable
@code{@var{pointer}} point at @code{@var{target}}, which may be an
expression as long as it evaluates to a named variable.  If
@code{@var{pointer}} is a pointer (class @code{transfer}) already, then
its old link is broken before the new link to @code{@var{target}} is
installed.

If one or more keywords are specified, then @code{@var{target}} must be
a string containing the name of the intended target symbol.
@code{/subroutine} indicates that the target is a subroutine,
@code{/function} that it is a function, and @code{/main} that it is a
variable at the main execution level.  @code{/internal} modifies the
behavior of @code{/subroutine} and @code{/function}: it indicates that
the target is an internal function or subroutine.  If @code{/internal}
is not specified, then the target is a user-defined (but not necessarily
already compiled) subroutine or function.

See also: @ref{symbol}

@c -------------------------------------
@node polartossfc, polate, pointer, Internal Routines
@subsection polartossfc

@code{polartossfc(@var{coords} [, @var{level}])}

Converts polar coordinates to SSFCs (Sierpiński Surface-Filling
Coordinates).  An ssfc (@uref{http://ssfc.quae.nl}) indicates a
position on the surface of a sphere with just one coordinate rather
than with the usual two coordinates.

The @code{@var{coords}} must contain at least two elements in its
first dimension, which are taken to be the latitude and longitude of
the point, measured in radians.  (Multiply by @code{#deg} to convert
from degrees to radians; @ref{#deg}.)

If @code{@var{level}} is specified, then the returned value for each
point is the ssfc index at the indicated level.  The ssfc index ranges
between 0 and @code{2^@var{level} - 1}.  The corresponding real number
is obtained by dividing the ssfc index by @code{2^@var{level}}.  Each
next element of @code{@var{level}} is used for each next data point
from @code{@var{coords}}.  If @code{@var{level}} runs out of elements
before @code{@var{coords}} runs out of points, then the last element
of @code{@var{level}} is reused for the remaining points.

If @code{@var{level}} is not specified, then the returned value for
each point is the decimal ssfc index represented as a @code{double}
number between 0 and 1, to the highest precision that can be expressed
by a @code{double}.

See also: @ref{ssfctopolar}

@c -------------------------------------
@node polate, poly, polartossfc, Internal Routines
@subsection polate
@findex polate

@code{polate(@var{x}, @var{y}, @var{xnew})}

An alias of @code{table}.

See also: @ref{table}

@c -------------------------------------
@node poly, pom00, polate, Internal Routines
@subsection poly
@findex poly

@code{poly(@var{x}, @var{c})}

Evaluate polynomials with coefficients @code{@var{c}} at @code{@var{x}}.

See also: @ref{pit}

@c -------------------------------------
@node pom00, pop, poly, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pom00
@findex pom00

@code{pom00(@var{xp}, @var{yp}, @var{sp})}

[SOFA] Returns the matrix of polar motion, IAU 2000, given the
coordinates @code{@var{xp}}, @code{@var{yp}} of the pole and tio
locator @code{@var{sp}}, all in radians.  The tio locator positions
the Terrestrial Intermediate Origin on the equator.  It is obtained
from polar motion observations, so is in essence unpredictable.  The
current function implements an approximation based on the dominant
secular drift of about 47 microarcseconds per century.  All arguments
must have the same dimensions.  The result has those same dimensions
as well, with two dimensions equal to 3 prefixed.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pop, postimage, pom00, Internal Routines
@subsection pop
@findex pop

@code{pop [, num=@var{num}] , @var{var} [, @var{var2} @dots{}]}

Pops variables from the variables stack @code{#stack} (in last in --
first out order).  If @code{@var{num}} is specified, then it is taken to
contain the number of symbols to pop from the stack; these are restored
to their original locations.  Next, any remaining arguments
@code{@var{var}}, @code{@var{var2}}, etcetera are treated.  Any named
variables receive successive values popped from the stack, and any
unnamed variables are taken to contain numbers of symbols to pop and
restore to their original locations.

See also: @ref{push}, @ref{dump_stack}, @ref{#stack}, @ref{Stack}

@c -------------------------------------
@node postimage, postraw, pop, Internal Routines
@subsection postimage
@findex postimage

@code{postimage, @var{image} [, @var{x1}, @var{x2}, @var{y1}, @var{y2}]}

Writes @code{@var{image}} (or the part with coordinates between
@code{@var{x1}} and @code{@var{x2}}, @code{@var{y1}} and
@code{@var{y2}}) to the file indicated by @code{!ps_file}.

See also: @ref{postrel}, @ref{!ps_file}

@c -------------------------------------
@node postraw, postrel, postimage, Internal Routines
@subsection postraw
@findex postraw

@code{postraw, @var{x}}

Sends string @code{@var{x}} directly to the current PostScript output
file.

See also: @ref{postrel}, @ref{!ps_file}

@c -------------------------------------
@node postrel, postrelease, postraw, Internal Routines
@subsection postrel
@findex postrel

@code{postrel}

Properly finish the current PostScript file.

Alias: @ref{postrelease}

See also: @ref{!ps_file}
@c -------------------------------------
@node postrelease, power, postrel, Internal Routines
@subsection postrelease
@findex postrelease

@code{postrelease}

Properly finish the current PostScript file.

Alias: @ref{postrel}

See also: @ref{!ps_file}
@c -------------------------------------
@node power, pr00, postrelease, Internal Routines
@subsection power
@findex power

@code{power(@var{x} [, @var{axis}, /power, /shape, /onedim])}

Returns the power spectrum of @code{@var{x}} along the indicated
@code{@var{axis}} (which defaults to 0), with power at negative
frequencies transferred to the corresponding positive ones.  By default,
each element of the power spectrum is equal to the square of the
amplitude of the variation at the corresponding frequency, and element
zero is equal to the square of the average value of @code{@var{x}}.  If
you wish to add several elements of such a power spectrum, then you have
to multiply the first and last elements by a factor of 2 first.  This
use is flagged by keyword @code{/power}.  e.g., for this implementation
of @code{power}, Parseval's theorem reads: @code{mean(x^2) =
total(p(1:*-2))/2 + p(0) + p(*-1),} with @code{p = power(x)}, or
@code{mean(x^2) = total(power(x,/power)).}  If you wish to investigate
the shape of the power spectrum, then you need to do the @code{/power}
correction twice to also correct for the absence of a negative frequency
contribution to the first and last elements (whereas all other elements
do have power from a corresponding negative frequency added in).  This
use is flagged by the @code{/shape} keyword.  If you specify
@code{/onedim} but no @code{@var{axis}}, then @code{@var{x}} is regarded
as a one-dimensional array.

See also: @ref{sc}, @ref{scb}

@c -------------------------------------
@node pr00, prec76, power, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pr00
@findex pr00

@code{pr00, @var{jdtt}, @var{dpsipr}, @var{depspr}}

[SOFA] Returns the precession-rate part of the IAU 2000
precession-nutation models (part of MHB2000), for the specified TT
Julian Date @code{@var{jdtt}}.  Returns the nutation in longitude
@code{@var{dpsipr}} and obliquity @code{@var{depspr}} in radians with
respect to the J2000.0 equinox and ecliptic.  The output variables get
the same dimensions as @code{@var{jdtt}}.

The MHB2000 model does not specify which set of Euler angles to use to
express precession.  The most literal and straightforward procedure is
to adopt the 4-rotation @code{epsilon_0}, @code{psi_a},
@code{omega_a}, and @code{xi_a}.  Then @code{@var{dpsipr}} can be
added to @code{psi_a}, and @code{@var{depspr}} to both @code{omega_a}
and @code{eps_a}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node prec76, precess, pr00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection prec76
@findex prec76

@code{prec76, @var{jdtdb1}, @var{jdtdb2}, @var{zeta}, @var{z},
@var{theta}}

[SOFA] Returns the three Euler angles @code{@var{zeta}} (1st rotation,
radians clockwise around z), @code{@var{z}} (3rd rotation, radians
clockwise around z), @code{@var{theta}} (2nd rotation, radians
counterclockwise around y) which implement general precession between
epochs (TDB Julian Dates) @code{@var{jdtdb1}} and @code{@var{jdtdb2}},
using the IAU 1976 model (as for the FK5 catalog).

The precession matrix is @code{r_3(-z) r_2(+theta) r_3(-zeta)}.

The absolute accuracy is better than 0.1 arcsec from year 1960 through
2040, better than 1 arcsec from 1640 through 2360, and remains below 3
arcsec during -500 through 3000.  The errors exceed 10 arcsec outside
-1200 through 3900, exceed 100 arcsec outside -4200 through 5600, and
exceed 1000 arcsec outside -6800 through 8200.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node precess, print, prec76, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection precess
@findex precess

@code{precess(@var{coords}, @var{from}, @var{to} [, /julian,
/besselian])}

Precesses the equatorial coordinates @code{@var{coords}} from the
equinox identified by @code{@var{from}} to the equinox identified by
@code{@var{to}}.  @code{@var{coords}} must be a numerical array and
must have at least two elements in its first dimension, which are
interpreted as the right ascension and declination, measured in
degrees.  @code{@var{from}} and @code{@var{to}} are interpreted as
Julian Dates if no keywords are specified, or as Julian years (e.g.,
2000.0 = J2000.0) if @code{/julian} is specified, or as semi-Besselian
years (e.g., 1950.0 = B1950.0) if @code{/besselian} is specified.
Besselian years are taken to be 365.2421988 days long, and B1950.0
corresponds to JDE 2433282.4235.

See also: @ref{astron}, @ref{calendar}

@c -------------------------------------
@node print, printf, precess, Internal Routines
@subsection print
@findex print

@code{print, @var{x} [, @dots{}, /join]}

Displays the contents of the arguments on the screen.  Up to
@code{#max_args} arguments may be specified.  A newline character is
printed after all arguments are serviced, except when keyword
@code{/join} is specified.

Alias: @ref{t}, @ref{ty}, @ref{type}

See also: @ref{printf}, @ref{In-Line Print Formats}

@c -------------------------------------
@node printf, project, print, Internal Routines
@subsection printf
@findex printf

@code{printf, @var{lun}, @var{x} [, @dots{}]}

@code{printf(@var{lun}, @var{x} [, @dots{}])}

Writes the value of the symbols to the file opened on logical unit
@code{@var{lun}}.  The function form returns @code{1} upon exit when
successful, @code{0} otherwise.

See also: @ref{print}, @ref{Output Data Formats}

@c -------------------------------------
@node project, projection, printf, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection project
@findex project

@code{project(@var{x})}

Projects the coordinates from @code{@var{x}} according to the
projection specified by @code{@var{#p3d}} as defined using
@code{projection}.  @code{@var{x}} must be an array with a multiple of
3 elements.  Each set of 3 elements is taken as the x, y, and z
coordinates of a point.  The projected coordinates are returned.

See also: @ref{projection}, @ref{#p3d}

@code{[@ref{develop} package]}

@c -------------------------------------
@node projection, projectmap, project, Internal Routines
@subsection projection
@findex projection

@code{projection [, @var{matrix}, translate=@var{translate},
rotate=@var{rotate}, scale=@var{scale}, perspective=@var{perspective},
oblique=@var{oblique}] [, /reset, /original]}

@code{[@ref{develop} package]} Sets, resets, or modifies the current
3d-transformation/projection.  The following keywords and arguments are
always treated in the order in which they are mentioned here:

@table @var
@item @code{/reset}
fills transformation matrix @code{#p3d} with the identity
transformation.
@item matrix
is a 16-element (4 by 4) matrix to be entered into @code{#p3d}.
@item translate
is a 3-element vector containing the coordinates of a translation
vector.
@item perspective
for perspective projections is either a 3-element vector containing the
relative screen coordinates of the center of the projection and the
distance that the eye is behind the projection plane, or just the
distance.
@item rotate
is a 3-element vector containing the rotation angles around the x, y, and
z axis.
@item scale
is a 3-element vector containing the scale factors in the x, y, and z
directions.
@item oblique
is a 2-element vector for isometric projections (first element: size,
second element: angle).
@item @code{/original}
selects the original (data-cube related) coordinate system instead of
the current (screen-related) coordinate system.
@end table

All arguments but @code{@var{matrix}} may be specified by keyword.

See also: @ref{#p3d}, @ref{plot3d}
@c -------------------------------------
@node projectmap, psum, projection, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection projectmap
@findex projectmap

@code{projectmap(@var{map}, @var{height} [, hdist=@var{hdist},
angle=@var{angle}, mag=@var{mag}, xmap=@var{xmap}, ymap=@var{ymap},
size=@var{size}])}

Returns a projected version of the two-dimensional @code{@var{map}},
which must be a numerical array.  The eye is @code{@var{height}} units
above the map, measured in units of one map element (as are all linear
measurements in the argument list).  The returned array has the same
data type as @code{@var{map}}.  By default, the returned array has 512
by 512 elements and shows the central @code{@var{height}} by
@code{@var{height}} elements of @code{@var{map}}.

@code{@var{hdist}}, which defaults to 0, indicates the horizontal
distance of the eye from the chosen center of the projection.
@code{@var{angle}}, which defaults to 0, indicates the direction of the
horizontal displacement of the eye, such that an angle of zero yields
the same orientation as @code{tv,@var{map}}, and an increase of the
angle leads to a clockwise rotation of the projection.
@code{@var{mag}}, which defaults to 1, indicates the linear
magnification factor.  A greater @code{@var{mag}} leads to a smaller
fraction of the map being visible in the result.  @code{@var{xmap}} and
@code{@var{ymap}} indicate the map coordinates of the chosen center of
the projection.  This location defaults to the center of the map, i.e.,
to @code{dimen(@var{map})/2}.  @code{@var{size}}, which defaults to 512,
indicates the linear size of the array that is returned.  If
@code{@var{size}} is a scalar, then its value is taken for both
dimensions.  If it is an array, then the first two of its elements are
taken for the dimensions.  If @code{@var{hdist}} is zero, then the
greatest dimension of the output array spans
@code{@var{height}/@var{mag}} elements of the map.

@c -------------------------------------
@node psum, ptoc, projectmap, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection psum
@findex psum

@code{psum(@var{data}, @var{powers} [, @var{axes}, @var{class}, /onedim,
/vnormalize, /cnormalize, /single]}

Returns a weighted sum of @code{@var{data}}.  The weights are equal to
the coordinates in the dimensions given in @code{@var{axes}} to the
integer powers given in @code{@var{powers}}.  @code{@var{powers}} and
@code{@var{axes}} may be scalars or arrays and must have the same number
of elements.  If @code{@var{axes}} is not specified, then
@code{indgen(@var{powers})} is assumed.  If @code{@var{class}} is
defined, then it must contain a class number for each element of
@code{@var{data}} and the results will be gathered for each class
separately.  Keyword @code{/onedim} indicates that @code{@var{data}}
should be treated as a 1d array.  Keyword @code{/vnormalize} forces
normalization with the total of the values for each result, and keyword
@code{/cnormalize} with the total of the coordinate weights for each
results.  Keyword @code{/single} returns a single (weighted) sum - if
@code{@var{axis}} was not specified.  All calculations are performed in
double precision and the result has data type @code{double}.

If @code{w = indgen(data, 0)} then @code{psum(data, n, 0)} is equal to
@code{total(data*w^n,0)}, and @code{psum(data, n, 1, /cnormalize} is
equal to @code{total(data*w^n)/total(w^n)}.

@c -------------------------------------
@node ptoc, push, psum, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ptoc
@findex ptoc

@code{ptoc( @var{im} [, @var{nx}, @var{ny}, @var{x0}, @var{y0}])}

Transforms image @code{@var{im}}, which must be a two-dimensional
@code{float} or @code{double} image, from polar to Cartesian
coordinates, using bicubic interpolation.  The first dimension of
@code{@var{im}} is interpreted as the azimuth, spanning 360 degrees, and
the second dimension as the radius, at a spacing of 1 px.  If
@code{@var{nx}} and @code{@var{ny}} are specified, then they indicate
the dimensions of the returned image.  If they are not specified, then
two less than twice the size of the second dimension of @code{@var{im}}
is used.  If @code{@var{x0}} and @code{@var{y0}} are specified, then
they indicate the Cartesian coordinates corresponding to the center of
the polar transformation.  If they are not specified, then one and a
half less than the size of the second dimension of @code{@var{im}} is
used.

Reverse: @ref{ctop}

@c -------------------------------------
@node push, pv2s, ptoc, Internal Routines
@subsection push
@findex push

@code{push, @var{var1} [, @var{var2} @dots{}]}

Pushes the specified variables onto variables stack @code{#stack}.

See also: @ref{pop}, @ref{dump_stack}, @ref{#stack}, @ref{Stack}

@c -------------------------------------
@node pv2s, pvdpv, push, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pv2s
@findex pv2s

@code{pv2s, @var{pv}, @var{theta}, @var{phi}, @var{r}, @var{td},
@var{pd}, @var{rd}}

[SOFA] Converts position/velocity vector @code{@var{pv}} (which has 2
elements in its first dimension and 3 elements in its second
dimension) from Cartesian to spherical coordinates.  The output
parameters are: @code{@var{theta}} = longitude in radians,
@code{@var{phi}} = latitude in radians, @code{@var{r}} = radial
distance, @code{@var{td}} = rate of change of theta, @code{@var{pd}} =
rate of change of @code{@var{phi}}, @code{@var{rd}} = rate of change
of @code{@var{r}}.  The output variables get the same dimensions as
@code{@var{pv}} except that the first two dimensions (equal to 2 and
3) are omitted.

@c -------------------------------------
@node pvdpv, pvm, pv2s, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pvdpv
@findex pvdpv

@code{pvdpv(@var{a}, @var{b})}

[SOFA] Returns the inner product of pv-vectors @code{@var{a}} and
@code{@var{b}}, which must have the same dimensions, of which the
first one is equal to 2 and the second one equal to 3.  The result has
those same dimensions as well, except that the second dimension (equal
to 3) is omitted.

@c -------------------------------------
@node pvm, pvstar, pvdpv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pvm
@findex pvm

@code{pvm, @var{pv}, @var{r}, @var{s}}

[SOFA] Returns the modulus of pv-vector @code{@var{pv}}, which must
have 2 elements in its first dimension and 3 in its second dimension.
In @code{@var{r}} is returned the modulus of the position component,
and in @code{@var{s}} the modulus of the velocity component.  The
output parameters get the same dimensions as @code{@var{pv}}, except
that the first two dimensions (equal to 2 and 3) are omitted.

@c -------------------------------------
@node pvstar, pvxpv, pvm, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pvstar
@findex pvstar

@code{pvstar, @var{pv}, @var{ra}, @var{dec}, @var{pmr}, @var{pmd},
@var{px}, @var{rv}}

[SOFA] Converts position-velocity matrix @code{@var{pv}} (AU, AU/d) to
catalog coordinates right ascension @code{@var{ra}} (rad), declination
@code{@var{dec}} (rad), right ascension proper motion @code{@var{pmr}}
(rad/Ja), declination proper motion @code{@var{pmd}} (rad/Ja),
parallax @code{@var{px}} (arcsec), and radial velocity @code{@var{rv}}
(km/s receding).  @code{@var{pv}} must have 2 elements in its first
dimension and 3 in its second dimension.  The output parameters get
the same dimensions as @code{@var{pv}} except that the first two
dimensions (equal to 2 and 3) are omitted.

The returned star data are observables for an imaginary observer at
the solar-system barycenter.  Proper motion and radial velocity are in
terms of barycentric coordinate time (tcb).  For most practical
applications, the distinction between tcb and Terrestrial Time
(TT/TAI) may be neglected.  Usually the result is limited by the
intrinsic accuracy of the proper-motion and radial-velocity data.

In accordance with normal star-catalog conventions, the object's right
ascension and declination are freed from the effects of secular
aberration.  The frame is aligned to the catalog equator and equinox,
is Lorentzian and centered on the ssb.

The proper motions are measured in radians per Julian year.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node pvxpv, pxp, pvstar, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pvxpv
@findex pvxpv

@code{pvxpv(@var{a}, @var{b})}

[SOFA] Returns the outer product of two pv-vectors @code{@var{a}} and
@code{@var{b}}.  The parameters must have equal dimensions, of which
the first one must be equal to 2 and the second one to 3.  The result
gets the same dimensions as the parameters.

If the position and velocity components of @code{@var{a}} and
@code{@var{b}} are @code{(ap, av)} and @code{(bp, bv)}, then the
result is the pair of vectors @code{(ap x bp, ap x bv + av x bp)}.

@c -------------------------------------
@node pxp, quantile, pvxpv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection pxp
@findex pxp

@code{pxp(@var{a}, @var{b})}

[SOFA] Returns the outer product of two p-vectors @code{@var{a}} and
@code{@var{b}}, which must have 3 elements in their first dimension.
The result has the same dimensions as the parameters.

@c -------------------------------------
@node quantile, quit, pxp, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection quantile
@findex quantile

@code{quantile(@var{quantile}, @var{data} [, @var{axes}])}

Returns a particular @code{@var{quantile}}
of the @code{@var{data}}
along the indicated @code{@var{axes}}, i.e., that data value that
exceeds in value a fraction @code{@var{quantile}} of all compared data
values.  @code{@var{quantile}} must be a number between 0 and 1.

@code{quantile(0, data, axes)} is equivalent to @code{min(data, axes)},
@code{quantile(1, data, axes)} to @code{max(data, axes)}, and
@code{quantile(0.5, data, axes)} to @code{median(data, axes)}.  However,
use of @code{quantile} to calculate minima or maxima is not recommended,
because @code{quantile} always sorts the data while looking for the
desired quantile, whereas @code{min} and @code{max} do not do that and
are therefore faster.

See also: @ref{median}, @ref{ordfilter}, @ref{min}, @ref{max}

@c -------------------------------------
@node quit, random, quantile, Internal Routines
@subsection quit
@findex quit

@code{quit, @var{status}}

Exits LUX with exit status @code{@var{status}}.

Alias: @ref{exit}

@c -------------------------------------
@node random, randomb, quit, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection random
@findex random

@code{random( [seed=@var{seed}, period=@var{period},] [@var{dimensions}] [,
/uniform, /normal, /sample, /shuffle, /bits])}

Returns an array with the specified @code{@var{dimensions}} (which must
be a set of @code{scalar}s and/or @code{array}s) filled with
pseudo-random numbers.  The keywords determine the distribution.  If no
keyword is specified, then @code{/uniform} is assumed.

@table @code
@item /uniform
selects a uniform distribution.  If @code{@var{period}} is also specified, then
@code{long} numbers between 0 and @code{@var{period}} - 1 (inclusive) are
returned.  If @code{@var{period}} is not also specified, then @code{float}
numbers between 0 and 1 (exclusive of the endpoints) are returned.
@item /normal
selects a normal distribution with zero mean and unit standard
deviation.
@item /sample
selects a uniform distribution between 0 and @code{@var{period}} - 1
(inclusive), but the numbers are in ascending order and no number
appears more than once.
@item /shuffle
selects a uniform distribution between 0 and @code{@var{period}} - 1
(inclusive), but no number appears more than once and they are in random
order.
@item /bits
selects @code{byte} 0s and 1s with equal probability.
@end table

@code{@var{seed}} is an integer seed number for the random number
generation: if you specify the same seed, then you get the same sequence
of random numbers.  There is one seed for @code{/bits} and one
independent seed for the other distributions.  The initial seed is
@code{123459876} for @code{/bits} and @code{-123459876} for the other
distributions.  You may specify a seed and no dimensions in calls to
@code{random} or any of its cousins.  It that case, the seed is set to
the specified value, and a scalar @code{1} is returned.

There are several separate routines that correspond to @code{random}
with a particular distribution.

The pseudo-random numbers generated when @code{/bits} is selected follow
from a primitive polynomial modulo 2 with a period of @code{2^31 - 1},
or about @code{2.1e9}.

The method used to generate the pseudo-random numbers with other
distributions is Matsumoto and Nishimura's ``Mersenne Twister'' mt19937
generator.  The period of this generator is @code{2^19937 - 1}, or about
@code{1e6000}.

See also: @ref{randomb}, @ref{randomn}, @ref{randomu}, @ref{Random Arrays}

@c -------------------------------------
@node randomb, randomd, random, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection randomb
@findex randomb

@code{randomb( [seed=@var{seed},] [@var{dimensions}] [, /long])}

Returns pseudo-random bits in an array with the indicated
@code{@var{dimensions}}, which must be either an array, or a set of
scalars.  If @code{/long} is specified, then returns a @code{long} array
in which all bits are random.  Otherwise, returns a @code{byte} array
with each element set pseudo-randomly to @code{0} or @code{1}.
@code{@var{seed}} specifies a seed for the random numbers, and must be
non-zero.  The same seed generates the same sequence of pseudo-random
numbers every time.  Different seeds generate different sequences.  If
you specify a @code{@var{seed}} but no @code{@var{dimensions}}, then the
seed is set and a scalar @code{1} is returned.

The random bits are generated using a primitive polynomial modulo 2,
which has a period of @code{2^31 - 1}, or about @code{2.1e9}.

Alias: @code{random(/bits)} (if @code{/long} is not set)

See also: @ref{random}, @ref{randomn}, @ref{randomu}, @ref{Random Arrays}

@c -------------------------------------
@node randomd, randome, randomb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection randomd
@findex randomd

@code{randomd( [seed=@var{seed},] @var{distribution}, @var{dimensions})}

Returns a @code{long} array with the specified @code{@var{dimensions}},
which may be a set of integer arguments, or a single integer array.  The
returned array is filled with integers between @code{0} and
@code{num_elem(@var{distribution}) - 1} (inclusive) that are drawn at
random according to the distribution function given by
@code{@var{distribution}}.  The elements of the distribution function
must be monotonically increasing, i.e., no element may be smaller than
the preceding element.  Also, we must have @code{distribution(0)}
greater than or equal to zero, and @code{distribution(*-1)} equal to
@code{1}.  The probability that a particular returned number is equal to
@code{x} is given by @code{differ(distribution,0,1)} (if
@code{@var{distribution}} is a one-dimensional array).
@code{@var{seed}} specifies a seed for the random numbers, and must be
non-zero.  The same seed generates the same sequence of pseudo-random
numbers every time.  Different seeds generate different sequences.

See also: @ref{random}, @ref{Random Arrays}

@c -------------------------------------
@node randome, randomn, randomd, Internal Routines
@subsection randomn
@findex randomn

@code{randome([limit=@var{limit},] @var{scale}, @var{dimensions})}

Returns a @code{double} array with the specified
@code{@var{dimensions}}, filled with pseudo-random numbers
exponentially distributed with the specified scale height
@code{@var{scale}}.  Positive and negative values are equally likely.
If @code{@var{limit}} is specified and greater than 0, then only
numbers whose magnitude is at least @code{@var{limit}} are returned.

See also: @ref{random}, @ref{randomb}, @ref{randomu}, @ref{Random Arrays}

@c -------------------------------------
@node randomn, randomu, randome, Internal Routines
@subsection randomn
@findex randomn

@code{randomn( [seed=@var{seed},] [@var{dimensions}])}

Returns a @code{double} array with the specified
@code{@var{dimensions}}, filled with pseudo-random numbers with a
standard normal distribution (i.e., zero average and unit variance).
@code{@var{seed}} specifies a seed for the random numbers, and must be
non-zero.  The same seed generates the same sequence of pseudo-random
numbers every time.  Different seeds generate different sequences.  If
you specify a @code{@var{seed}} but no @code{@var{dimensions}}, then the
seed is set and a scalar @code{1} is returned.

The method used to generate the pseudo-random numbers is Matsumoto and
Nishimura's ``Mersenne Twister'' mt19937 generator.  The period of this
generator is @code{2^19937 - 1}, or about @code{1e6000}.

Alias: @code{random(/normal)}

See also: @ref{random}, @ref{randomb}, @ref{randomu}, @ref{Random Arrays}

@c -------------------------------------
@node randomu, read, randomn, Internal Routines
@subsection randomu
@findex randomu

@code{randomu( [seed=@var{seed}, period=@var{period},]
@var{dimensions})}

Returns an array with the specified @code{@var{dimensions}}, filled with
uniformly distributed pseudo-random numbers.  @code{@var{seed}}
specifies a seed for the random numbers, and must be non-zero.  The same
seed generates the same sequence of pseudo-random numbers every time.
Different seeds generate different sequences.  If @code{@var{period}} is
not specified, then the returned numbers are @code{double} and uniformly
distributed between 0 and 1 (exclusive).  If a value is assigned to
@code{@var{period}}, then the returned numbers are @code{long} and
uniformly distributed between @code{0} and @code{@var{period} - 1}
(inclusive).  If you specify a @code{@var{seed}} but no
@code{@var{dimensions}}, then the seed is set and a scalar @code{1} is
returned.

The method used to generate the pseudo-random numbers with other
distributions is Matsumoto and Nishimura's ``Mersenne Twister'' mt19937
generator.  The period of this generator is @code{2^19937 - 1}, or about
@code{1e6000}.

Alias: @code{random(/uniform)}

See also: @ref{random}, @ref{randomb}, @ref{randomn}, @ref{Random Arrays}

@c -------------------------------------
@node read, readarr, randomu, Internal Routines
@subsection read
@findex read

@code{read, @var{var1} [, @var{var2} @dots{}] [, /word]}

Reads values from the keyboard or batch file into the specified
variables.  Supports scalars (real and complex), strings, and numerical
and string arrays.  Arrays and strings must be predefined so the number
of elements to be read can be determined from them.  Undefined variables
cause reading of one scalar.  Other variable types are not allowed.
Literal strings in the argument list cause their contents to be written
on the screen (if reading from the standard input) or ignored (if not
reading from the standard input).  Other unnamed variables are not
allowed.

Upon exit, @code{!read_count} contains the number of read elements.

When accepting input, @code{read} displays a prompt consisting of the
number of elements read so far followed by a greater-than sign
(@kbd{>}).  During input to @code{read} through the keyboard, all
command line editing functions are available except for those dealing
with the history buffer (@ref{Command Input}).  If the end of the input
file is reached before all specified arguments have been serviced, then
an error is generated.

For numerical arguments, the input is divided into tokens separated by
whitespace and/or commas.  The contents of one such token are converted
into one value.  Numerical values can be specified just like scalar
values can in LUX scripts, so input @code{10o} corresponds to octal 10
or decimal 8 (@ref{Scalars}).  The token is converted up to the first
character that is not part of any legal number specification.  If a
token contains no legal number, then 0 is returned.

For string arguments, all input up to the end of the current input line
is returned as one value, except if @code{/word} is specified, in which
case the next whitespace-separated word is returned.  For string arrays,
the input for each element must be on a separate input line.

Data from a file is read character by character as needed.  Data from
the keyboard (standard input) is read one line at a time.

See also: @ref{readarr}, @ref{readf}, @ref{print}, @ref{openr},
@ref{!read_count}

@c -------------------------------------
@node readarr, readf, read, Internal Routines
@subsection readarr
@findex readarr

@code{readarr, @var{x}}

Reads one line of array elements from the keyboard and returns the read
elements in @code{@var{x}}.  So, the number of array elements need not be
specified in advance. 

See also: @ref{read}, @ref{print}

@c -------------------------------------
@node readf, readorbits, readarr, Internal Routines
@subsection readf
@findex readf

@code{readf, @var{lun}, @var{var1} [, @var{var2} @dots{}] [, /word]}

@code{readf(@var{lun}, @var{var1} [, @var{var2} @dots{}] [, /word])}

Reads values into the specified variables from the formatted file which
is open on logical unit @code{@var{lun}}.  Numerical values are assumed
to be separated by strings of whitespace and/or commas.  Arrays and
strings must be predefined.  One value is read for each element of
predefined arrays.  Scalar and undefined variables get scalar values.
The function form returns @code{1} when successful, @code{0} otherwise.
By default, if an end-of-file is encountered before all variables are
filled, then an error is generated in the subroutine form, or a @code{0}
is returned by the function form.

By default, strings are taken to run up till the end of the line.  If
@code{@var{/word}} is specified, then strings are delimited by
whitespace and/or commas just like for numerical values.

Upon exit, @code{!read_count} contains the number of read elements.

See also: @ref{printf}, @ref{read}, @ref{readu}, @ref{!read_count}

@c -------------------------------------
@node readorbits, readu, readf, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection readorbits
@findex readorbits

@code{readorbits [, @var{file}, /list, /replace]}

Reads orbital data from file @code{@var{file}} for use with the
@code{astron} routine.  The file name defaults to @file{$LUXDIR/orbits}.
If @code{/list} is specified, then object ID numbers and comments
included in the file are displayed on screen.  If @code{/replace} is
specified, then the new orbital data replaces previously read orbital
data, if any.  By default, the new orbital data is merged with the
previously read data, if any.

The data must conform to the following description, or else garbage
results and/or errors may result.

Lines with an equal sign (@code{=}) at the very beginning are comment
lines.  The first data line of the file must contain the number of
objects for which data is included in the file.  A comment (initiated by
an equal sign) may follow.

For each object, the first line of the corresponding data segment
consists of the object ID number (which should be distinct from those of
the major objects listed for @code{objects} in routine @code{astron},
i.e., not between 0 and 8, inclusive), followed by the number of data
lines for this object, followed by the absolute magnitude, followed by
an optional specification of the equinox to which the following data is
referred, followed by an optional data format indicator for the data
lines, followed by an optional comment (initiated by an equal sign).

If the equinox specification is absent, then J2000.0 is assumed.  If it
is present, then it must consist of either a scalar, which is taken to
indicate a JDE (Julian Date/TDT) specification, or one letter out of
@code{j, j, b, b}, followed by a (floating-point) year specification, or
one letter out of @code{d, d}.  If the letter is @code{d} or @code{d},
then the equinox of the date is assumed.  If the letter is @code{j} or
@code{j}, then the unit of the following year is Julian.  If the letter
is @code{b} or @code{b}, then the unit is pseudo-Besselian: Besselian
years are taken to be 365.2421988 days long, and @code{b1950.0}
corresponds to JDE 2433282.4235.

The data format indicator must be one letter out of @code{a, a, q, q},
or absent.  If the data format indicator is @code{a} or @code{a} or
absent, then each data line for the current object must contain the
following information in the listed order, with all distances in AU and
all angles in degrees: the JDE for which the data is valid (the epoch),
the semimajor axis, the eccentricity, the inclination, the longitude of
the ascending node, the argument of the perihelion, and the mean anomaly
at the epoch.

If the data format indicator is @code{q} or @code{q}, then the data
format is the same as that for @code{a}, except that the perihelion
distance is substituted for the semimajor axis, and the JDE of the
(last) perihelion transit is substituted for the mean anomaly.

The data segments for all objects in the file must be sorted in
ascending order of their ID numbers.  The data lines for each object
must be sorted in ascending order of their JDE.

See also: @ref{astron}

@c -------------------------------------
@node readu, read_jpeg, readorbits, Internal Routines
@subsection readu
@findex readu

@code{readu, @var{lun}, @var{var1} [, @var{var2} @dots{}]}

@code{readu( @var{lun}, @var{var1} [, @var{var2} @dots{}])}

Reads values for variables from the unformatted file which is open on
logical unit @code{@var{lun}}.  Arrays and strings must be predefined.
The function form returns @code{1} when successful, @code{0} ot
erwise.

See also: @ref{read}, @ref{readu}

@c -------------------------------------
@node read_jpeg, real, readu, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection read_jpeg
@findex read_jpeg

@code{[jpeg]} An alias of @ref{jpegread}.

@c -------------------------------------
@node real, record, read_jpeg, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection real
@findex real

@code{real(@var{x})}

Returns the real part of numerical argument @code{@var{x}}.  For real
arguments, this is equivalent to returing @code{@var{x}} itself.

See also: @ref{abs}, @ref{arg}, @ref{conjugate}, @ref{imaginary},
@ref{Complex Numbers}

@c -------------------------------------
@node record, redim, real, Internal Routines
@subsection record
@findex record

@code{record [, @var{file}] [, /input, /output, /reset]}

Starts appending input or output or both to file @code{@var{file}}.  The
default file name is @file{record.LUX}.  Keyword @code{/input} selects
input recording.  Keyword @code{/output} selects output recording.
Keyword @code{/reset} stops recording for the channels selected by the
other two keywords.  This routine is only available if your computer
platform supports it.

See also: @ref{diagnostic}, @ref{Diagnostic Output}

@c -------------------------------------
@node redim, regex, record, Internal Routines
@subsection redim
@findex redim

@code{redim, @var{array}, @var{dimensions}}

@code{redim( @var{array}, @var{dimensions})}

Changes the dimensions of @code{@var{array}} to the indicated
@code{@var{dimension}}.  Up to @code{#max_dims} dimensions may be
specified in any number of scalars or arrays.  The function form returns
the modified @code{@var{array}}.

See also: @ref{dimen}, @ref{num_dim}, @ref{#max_dims}

@c -------------------------------------
@node regex, regrid, redim, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection regex
@findex regex

@code{regex(@var{string} [, @var{regex}] [, /nocase])}

@code{[regex_h]} Matches the @code{@var{string}} against the regular
expression @code{@var{regex}}.  If the text does not match, then
@code{0} is returned.  If the text does match, and if the regular
expression does not contain parenthesized subexpressions, then the
matched part of the text is returned.  If the text does match and the
regular expression contains parenthesized subexpressions, then a
string array is returned with element 0 equal to the part of the text
that matches the whole regular expression, and following elements
equal to the parts of the text that match each next parenthesized
subexpression (as defined by the opening parenthesis).  If
@code{@var{regex}} is not specified, then the regular expression that
was specified most recently is used.

@c -------------------------------------
@node regrid, regrid3, regex, Internal Routines
@subsection regrid
@findex regrid

@code{regrid(@var{x}, @var{xgrid}, @var{ygrid}, @var{sx}, @var{sy})}

Maps a 2D image onto a specified grid and returns the mapped image.
Uses nearest-neighbor interpolation.

@table @var
@item x
the two-dimensional image to be remapped.
@item xgrid ygrid
the remapping cell grid: the coordinates of the corners of the remapped
image in the coordinate system of the old image.  Must be 2D arrays.
@item sx sy
The interpolation grid dimensions within each grid cell.  Must be scalars.
@end table

If @code{ngx}, @code{ngy} are the dimensions of the grid, then the
dimensions of the resulting image are equal to @code{(ngx-1)*sx} and
@code{(ngy-1)*sy}, respectively.

Areas in the remapped image for which there is no equivalent data in the
original image are set to zero.

Identity mapping, i.e., mappings that return an exact copy of image
@code{x}, are given by @code{regrid(x,cx,cy,nx,ny)} with @code{nx =
dimen(x,0)/ngx}, @code{ny = dimen(x,1)/ngy}, @code{cx =
indgen(fltarr(ngx,ngy),0)*dimen(x,0)/(ngx - 1)} and @code{cy =
indgen(cx,1)*dimen(x,1)/(ngy - 1)}, with @code{ngx} and @code{ngy}
integers greater than 1.  Some examples of linear remappings, with
@code{nx}, @code{ny}, @code{cx}, and @code{cy} as above for @code{ngx =
2} and @code{ngy = 2}, are:
@table @asis
@item change in scale
@code{regrid(x,cx,cy,nx/2,ny/2)} makes the image half the size.
@item cropping
@code{regrid(x,cx/2,cy/2,nx/2,ny/2)} selects the lower half of the image,
i.e., @code{x(0:nx/2-1,0:ny/2-1)}.
@item translation
@code{regrid(x,cx+100,cy,nx,ny)} shifts the image over 100 pixels to the
left (in the direction of negative x).
@item rotation around the origin
@code{regrid(x,cx*cos(phi)+cy*sin(phi),-cx*sin(phi)+cy*cos(phi),nx,ny)}
rotates the image counterclockwise over angle @code{phi}, i.e., the
positive x axis rotates over angle @code{phi} in the direction of the
positive y axis.
@end table

If you need to combine some of these operations, then perform them on
@code{cx}, @code{cy}, @code{nx}, and @code{ny}, and only then apply them
to the image.  For example, to rotate the image over 1 radian around
point @code{(100,200)} and expand it by a factor of 3, you could do

@example
 cx2 = cx - 100                ; translate
 cy2 = cy - 200
 cx3 = cx2*cos(1)+cy2*sin(1)   ; rotate
 cy3 = -cx2*sin(1)+cy2*cos(1)
 cx4 = cx3 + 100               ; translate back
 cy4 = cx4 + 200
 y = regrid(x,cx,cy,nx*3,ny*3)
@end example

See also: @ref{compress}, @ref{expand}, @ref{regrid3}, @ref{regrid3ns}

@c -------------------------------------
@menu
* regrid Details::
@end menu

@node regrid Details,  , regrid, regrid
@comment  node-name,  next,  previous,  up
@subsubsection regrid Details

@code{regrid(x,xgrid,ygrid,sx,sy)} and
@code{regrid3(x,xgrid,ygrid,sx,sy)} work as described below.  The mapped
image values are interpolated from the source image @code{x} on a double
grid.  The coordinates of the points of the coarse grid, measured in the
coordinate system of @code{x}, are given by @code{xgrid} and
@code{ygrid}.  A fine grid of @code{sx} by @code{sy} points is spread
evenly over each cell of the coarse grid, and each point of the fine
grid corresponds to a single element of the mapped image.  The image
value at each point of the fine grid is determined through
nearest-neighbor (@code{regrid}) or bicubic (@code{regrid3})
interpolation.

For example, the x coordinates of the points on the fine grid in the
cell identified by cell indices @code{i} and @code{j} are given by
@code{(xgrid(i+1,j) - xgrid(i,j))*ix/sx + (xgrid(i,j+1) -
xgrid(i,j))*iy/sy + (xgrid(i+1,j+1) + xgrid(i,j) - xgrid(i+1,j) -
xgrid(i,j + 1))*ix*iy/(sx*sy)} for integer @code{ix} between 0 and
@code{sx} - 1 and integer @code{iy} between 0 and @code{sy} - 1.

For linear transformations, such as combinations of rotations, scalings,
and translations, only one grid cell (two by two coordinates) is needed.

The bicubic interpolation (for @code{regrid3}) is based on the sequence
@example
 i = floor(x)
 b = x - i
 a = 1 - b
 w1 = -0.5*b*a*a
 w2 = 1 + b*b*(1.5*b - 2.5)
 w3 = 1 + a*a*(1.5*a - 2.5)
 w4 = -0.5*a*b*b
 y_interp = y(i-1)*w1 + y(i)*w2 + y(i+1)*w3 + y(i+2)*w4
@end example
which yields @code{y_interp} at ordinate @code{x}, interpolated from
@code{y}.  Application in two dimensions yields bicubic interpolation.
This particular form of bicubic interpolation is due to s.k. Park and
r.a. Schowengerdt (1983: Comp. Vis. & Im. Proc., Vol. 23, p. 258; with
alpha = @minus{}0.5).

See also: @ref{regrid}, @ref{regrid3}

@c -------------------------------------
@node regrid3, regrid3ns, regrid, Internal Routines
@subsection regrid3
@findex regrid3

@code{regrid3(@var{x}, @var{xgrid}, @var{ygrid}, @var{dx}, @var{dy})}

Maps a 2D image onto a specified linear grid and returns the mapped
image.  Uses bicubic interpolation.

@table @var
@item x
the two-dimensional image to be remapped.
@item xgrid ygrid
the remapping grid: the coordinates of the corners of the remapped image
in the coordinate system of the old image.  Must be 2D arrays.
@item dx dy
the scaling factor of the grid cells.  Must be scalars.
@end table

If @code{ngx}, @code{ngy} are the dimensions of the grid, then the
dimensions of the resulting image are equal to @code{(ngx-1)*dx} and
@code{(ngy-1)*dy}, respectively.

Areas in the remapped image for which there is no equivalent data in the
original image receive values related to the closest remapped image
data.  To suppress such "streaks", use @code{regrid3ns}.

See at @code{regrid} for more information and examples.

See also: @ref{compress}, @ref{expand}, @ref{regrid}, @ref{regrid3ns}

@c -------------------------------------
@node regrid3ns, reorder, regrid3, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection regrid3ns
@findex regrid3ns

@code{regrid3ns(@var{x}, @var{xgrid}, @var{ygrid}, @var{dx}, @var{dy})}

Maps a 2D image onto a specified linear grid and returns the mapped
image, while preventing "streaks" in the areas which do not correspond
to the original image.  Uses bicubic interpolation.

@table @var
@item x
the two-dimensional image to be remapped.
@item xgrid ygrid
the coordinates of the corners of the remapped image in the coordinate
system of the old image.  Must be 2D arrays.
@item dx dy
the dimensions of the resulting image.  Must be scalars.
@end table

Areas in the remapped image for which there is no equivalent data in the
original image are set to zero.

See at @code{regrid} for more information and examples.

See also: @ref{compress}, @ref{expand}, @ref{regrid}, @ref{regrid3}

@c -------------------------------------
@node reorder, replace, regrid3ns, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection reorder
@findex reorder

@code{reorder( @var{array}, @var{order})}

Reorders (flips, transposes) two-dimensional @code{@var{array}}
according to @code{@var{order}}, which must be between @code{0} and
@code{7}, inclusive.

@c -------------------------------------
@node replace, restart, reorder, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection replace
@findex replace

@code{replace, @var{data}, @var{source}, @var{target}}

This routine replaces all occurrences in numerical @code{@var{data}} of
each element of @code{@var{source}} by the corresponding element of
@code{@var{target}}.  The values of @code{@var{source}} and
@code{@var{target}} are transformed to the data type of
@code{@var{data}}, if necessary.  The values in @code{@var{source}} must
be in ascending order.  No check is made if these values are in fact in
ascending order, and if they are not, then the results may not be what
you expect.


@c -------------------------------------
@node restart, restore, replace, Internal Routines
@subsection restart
@findex restart

@code{restart}

Restarts LUX.  All previously user-defined variables and symbols are
lost.  This routine does not work on all platforms.

See also: @ref{exit}, @ref{quit}

@c -------------------------------------
@node restore, resume, restart, Internal Routines
@subsection restore
@findex restore

@code{restore, @var{var}, @var{file} [, @var{header}, /printheader]}

@code{restore(@var{var}, @var{file} [, @var{header}, /printheader])}

Retrieves @code{@var{var}} and @code{@var{header}} from (compressed or
uncompressed) fz @code{@var{file}}.  If @code{@var{header}} is not
specified and @code{/printheader} is specified, then the header is
displayed on the screen.  The function form returns @code{1} if
successful, otherwise @code{0}.

See also: @ref{fzhead}, @ref{fzwrite}, @ref{fcwrite}

Alias: @ref{fzr}, @ref{f0r}, @ref{f0read}, @ref{fzread}

See also: @ref{store}

@c -------------------------------------
@node resume, return, restore, Internal Routines
@subsection resume
@findex resume

@code{resume}

This command negates the effect of exactly one @code{ignore}.  If as
many @code{RESUMEs} have been issued as @code{ignores}, then subsequent
code is again interpreted.  If code is not currently ignored, then
@code{resume} has no effect.

See also: @ref{ignore}

@c -------------------------------------
@node return, reverse, resume, Internal Routines
@subsection return
@findex return

@code{return [, @var{value}]}

May only be used inside a user-defined subroutine or function.  Forces
an exit from the routine.  In case of a user function,
@code{@var{value}} is the value of the function call in the expression
in which it is used.

@c -------------------------------------
@node reverse, rewind, return, Internal Routines
@subsection reverse
@findex reverse

@code{reverse(@var{array} [, @var{dimensions}, @var{center}, /zero])}

Reverses @code{@var{array}} in the indicated @code{@var{dimensions}}
around the indicated @code{@var{center}}.  

@c -------------------------------------
@node rewind, rewindf, reverse, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rewind
@findex rewind

@code{rewind, @var{tape}}

@code{[@ref{tape}]} Rewinds the tape on tape unit @code{@var{tape}}.

See also: @ref{taprd}, @ref{tapwrt}, @ref{skipf}

@c -------------------------------------
@node rewindf, rfix, rewind, Internal Routines
@subsection rewindf
@findex rewindf

@code{rewindf, @var{lun}}

@code{rewindf(@var{lun})}

Rewinds the file which is open on logical unit @code{@var{lun}}.  The
function form returns @code{1} when successful, @code{0} otherwise.

Alias: @code{fileptr,/start}

See also: @ref{openr}, @ref{openw}, @ref{openu}, @ref{close},
@ref{fileptr}

@c -------------------------------------
@node rfix, rm2v, rewindf, Internal Routines
@subsection rfix
@findex rfix

@code{rfix(@var{x})}

Returns a @code{long} (4-byte integer) version of @code{@var{x}}, with
the nearest integer neighbor to each element of @code{@var{x}}.

See also: @ref{fix}

@c -------------------------------------
@node rm2v, roll, rfix, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rm2v
@findex rm2v

@code{rm2v(@var{r})}

[SOFA] Returns the rotation vector corresponding to rotation matrix
@code{@var{r}}, which must have 3 elements in its first two
dimensions.  The returned rotation vector has the same direction as
the Euler axis of matrix @code{@var{r}} and has its magnitude equal to
the rotation angle in radians of the rotation matrix.  It has the same
dimensions as @code{@var{r}} except that the first dimension (equal to
3) is omitted.

@c -------------------------------------
@node roll, root3, rm2v, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection roll
@findex roll

@code{roll( @var{array}, @var{target})}

Returns a copy of the numerical @code{@var{array}} with its dimensions
rearranged according to the value of @code{@var{target}}.

If @code{@var{target}} is an array, then (after any necessary
translation to @code{long} type) it indicates the target dimension index
for each dimension.  Dimension number @code{i} of
@code{roll(@var{array}, @var{target})} is equal to dimension number
@code{@var{target}(i)} of @code{@var{array}}, and
@code{dimen(@var{array})(@var{target})} is equal to
@code{dimen(roll(@var{array}, @var{target}))}.

@code{@var{target}} must then be a permutation of the numbers @code{0}
through one less than the number of dimensions in @code{@var{array}},
i.e., it must have its number of elements equal to the number of
dimensions of @code{@var{array}}, each element must be unique, and no
element may be negative or greater than or equal to the number of
dimensions of @code{@var{array}}.

For example, @code{roll(x,[1,0,2])} is equivalent to @code{x(>1,>0,*)},
and @code{roll(x,[2,0,1])} to @code{x(>1,>2,>0)}.

If @code{@var{target}} is a scalar, then (after any necessary
translation to @code{long} type) it indicates over how many steps the
dimension list of the result should be cyclically shifted with respect
to the dimension list of @code{@var{array}}.  For example, if @code{x}
is a three-dimensional array, then @code{roll(x,1)} is equivalent to
@code{roll(x,[2,0,1])} and @code{x(>1,>2,>0)}, and @code{roll(x,-1)} is
equivalent to @code{roll(x,[1,2,0])} and @code{x(>2,>0,>1)}.

@c -------------------------------------
@node root3, runcum, roll, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection root3
@findex root3

@c -------------------------------------
@node runcum, runmax, root3, Internal Routines
@subsection runcum
@findex runcum

@code{runcum(@var{x}, [[, @var{axes}], @var{width}] [, /partial_width])}

Running sum of @code{@var{x}} along the axes indicated in
@code{@var{axes}} over numbers of elements picked from
@code{@var{width}}.

If @code{@var{axis}} is not specified or negative, then @code{@var{x}}
is regarded as a one-dimensional array.  In that case,
@code{@var{width}} must be scalar.

@code{/partial_width} determines handling at the edges: if it is set,
then the edges are filled with the partial-width value centered on each
edge element of interest; if it is not set (@code{/no..}) then the edges
are filled with the nearest full-width value.

See also: @ref{runsum}, @ref{smooth}

@c -------------------------------------
@node runmax, runmin, runcum, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection runmax
@findex runmax

@code{runmax(@var{x}, @var{width})}

Returns the running maximum of the first dimension of @code{@var{x}},
for the specified @code{@var{width}}.  The result has the same
dimensions as @code{@var{x}}.  Each element of the result is equal to
the maximum of the @code{@var{width}} values nearest that element in
the first dimension.

See also: @ref{runmin}

@c -------------------------------------
@node runmin, runord, runmax, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection runmin
@findex runmin

@code{runmin(@var{x}, @var{width})}

Returns the running minimum of the first dimension of @code{@var{x}},
for the specified @code{@var{width}}.  The result has the same
dimensions as @code{@var{x}}.  Each element of the result is equal to
the minimum of the @code{@var{width}} values nearest that element in
the first dimension.

See also: @ref{runmin}

@c -------------------------------------
@node runord, runprod, runmin, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection runord
@findex runord

@code{runord(@var{x}, @var{width}, @var{ord})}

Returns a running ordinal of the first dimension of @code{@var{x}},
for the specified @code{@var{width}} and ordinal number
@code{@var{ord}}.  Ordinal number 0 corresponds to the minimum,
@code{@var{width} - 1} corresponds to the maximum, and
@code{@var{widt}/2} corresponds to the median.  The result has the
same dimensions as @code{@var{x}}.  Each element of the result is
equal to the maximum of the @code{@var{width}} values nearest that
element in the first dimension.

See also: @ref{runmin}

@c -------------------------------------
@node runprod, runsum, runord, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection runprod
@findex runprod

@code{runprod(@var{x} [, @var{axis}])}

Running product of numerical @code{@var{x}} along the indicated
@code{@var{axis}}.  If @code{@var{axis}} is absent, then @code{@var{x}}
is treated as if it were one-dimensional.  In the result, each next
number in the direction of the selected @code{@var{axis}} is equal to
the corresponding number from @code{@var{x}} times the previous number
in the selected @code{@var{axis}}.  The first number in the selected
@code{@var{axis}} is just copied to the result.

For example, if @code{x} is equal to @code{[2,4,3]}, then
@code{runprod(@code{x})} will yield @code{[2,8,24]}.

See also: @ref{runsum}

@c -------------------------------------
@node runsum, rv2m, runprod, Internal Routines
@subsection runsum
@findex runsum

@code{runsum(@var{x} [, @var{axis}, @var{order}][, /fw_edge_neighbor])}

Running sum of @code{@var{x}}.  By default without regard to array
structure.  If @code{@var{axis}} is defined, then summing is done along
the indicated dimension, starting over for each of the other dimensions.
@code{@var{order}} is the order of the summation, akin to n-th order
differencing, and defaults to @code{1}.  The result has the same type as
@code{@var{x}}, except when @code{@var{axis}} isn't specified or is
negative, in which case summing is done in floating point.  Keyword
@code{/fw_edge_neighbor} governs smoothing near the edges: when set or
not specified, the value of the nearest full-width average is returned
near the edges; when unset (@code{/nofw_edge_neighbor}), then a
symmetric smaller-width average is returned near the edges.

Reverse: @ref{differ}

See also: @ref{smooth}, @ref{runcum}

@c -------------------------------------
@node rv2m, rx, runsum, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rv2m
@findex rv2m

@code{rv2m(@var{w})}

[SOFA] Returns the rotation matrix corresponding to rotation vector
@code{@var{w}}, which must have 3 elements in its first dimension.
The rotation matrix Euler axis gets the direction of @code{@var{w}},
and the rotation matrix gets a rotation angle equal to the modulus of
@code{@var{w}}.  The result has the same dimensions as @code{@var{w}}
but with one extra dimension equal to 3 prefixed.

@c -------------------------------------
@node rx, rxr, rv2m, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rx
@findex rx

@code{rx, @var{phi}, @var{r}}

[SOFA] Rotates r-matrix @code{@var{r}} (which must have its first two
dimensions equal to 3) about the x axis over angle @code{@var{phi}}
(in radians).

@c -------------------------------------
@node rxr, rxpv, rx, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rxr
@findex rxr

@code{rxr(@var{r1}, @var{r2})}

[SOFA] Multiplies two r-matrices @code{@var{r1}} and @code{@var{r2}}
in their first two dimensions (which must each have a size equal to
3) and returns the result.  The input parameters must have the same
dimensions.  The result has those same dimensions, too.

@c -------------------------------------
@node rxpv, ry, rxr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rxpv
@findex rxpv

@code{rxpv(@var{r}, @var{pv})}

[SOFA] Returns the matrix product of r-matrix @code{@var{r}} (which
must have its first two dimensions equal to 3) and pv-vector
@code{@var{pv}} (which must have its first two dimension equal to 2
and 3, respectively).  The dimensions of @code{@var{r}} and
@code{@var{pv}} beyond the first two must be equal.  The result has
the same dimensions as @code{@var{pv}}.

@c -------------------------------------
@node ry, rz, rxpv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ry
@findex ry

@code{ry, @var{phi}, @var{r}}

[SOFA] Rotates r-matrix @code{@var{r}} (which must have its first two
dimensions equal to 3) about the y axis over angle @code{@var{phi}}
(in radians).

@c -------------------------------------
@node rz, s, ry, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection rz
@findex rz

@code{rz, @var{phi}, @var{r}}

[SOFA] Rotates r-matrix @code{@var{r}} (which must have its first two
dimensions equal to 3) about the z axis over angle @code{@var{phi}}
(in radians).

@c -------------------------------------
@node s, s00, rz, Internal Routines
@subsection s
@findex s

@code{s [, @var{symbol}]}

Show info on the given symbol.  @code{@var{symbol}} is either a partial
symbol name (string) or a symbol number.  All symbols that contain the
partial name are displayed.  By default, info on all symbols is
displayed.

Alias: @ref{show}

See also: @ref{dump}

@c -------------------------------------
@node s00, s00a, s, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s00
@findex s00

@code{s00(@var{jdtt}, @var{x}, @var{y})}

[SOFA] Returns the CIO locator in radians for the specified TT Julian
Date @code{@var{jdtt}} given the CIP's @code{@var{x}} and
@code{@var{y}} coordinates, using IAU 2000A precession-nutation.

The CIO locator is the difference between the right ascensions of the
same point in two systems.  The two systems are the GCRS and the CIP,
CIO, and the point is the ascending node of the CIP equator.  The CIO
locator remains below 0.1 arcsec throughout the years 1900 - 2100.

The CIP coordinates must be appropriate for the given date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node s00a, s00b, s00, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s00a
@findex s00a

@code{s00a(@var{jd})}

[SOFA] Returns the CIO locator for the specified TT Julian Date
@code{@var{jdtt}}, using IAU 2000A precession-nutation.

The CIO locator is the difference between the right ascensions of the
same point in two systems.  The two systems are the GCRS and the CIP,
CIO, and the point is the ascending node of the CIP equator.  The CIO
locator remains below 0.1 arcsec throughout the years 1900 - 2100.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node s00b, s06, s00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s00b
@findex s00b

@code{s00b(@var{jdtt})}

[SOFA] Returns the CIO locator for the specified TT Julian Date
@code{@var{jdtt}}, using IAU 2000B precession-nutation.

The CIO locator is the difference between the right ascensions of the
same point in two systems.  The two systems are the GCRS and the
CIP, CIO, and the point is the ascending node of the CIP equator.  The
CIO locator remains below 0.1 arcsec throughout the years 1900 - 2100.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node s06, s06a, s00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s06
@findex s06

@code{s06(@var{jdtt}, @var{x}, @var{y})}

[SOFA] Returns the CIO locator in radians for the specified TT Julian
Date @code{@var{jdtt}} given the CIP's @code{@var{x}} and
@code{@var{y}} coordinates, using IAU 2006/2000A precession-nutation.

The CIO locator is the difference between the right ascensions of the
same point in two systems.  The two systems are the GCRS and the
CIP, CIO, and the point is the ascending node of the CIP equator.  The
CIO locator remains below 0.1 arcsec throughout the years 1900 - 2100.

The CIP coordinates must be appropriate for the given date.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node s06a, s2c, s06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s06a
@findex s06a

@code{s06a(@var{jdtt})}

[SOFA] Returns the CIO locator for the specified TT Julian Date
@code{@var{jdtt}}, using IAU 2006 precession and IAU 2000A nutation.

The CIO locator is the difference between the right ascensions of the
same point in two systems.  The two systems are the GCRS and the
CIP, CIO, and the point is the ascending node of the CIP equator.  The
CIO locator remains below 0.1 arcsec throughout the years 1900 - 2100.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node s2c, s2p, s06a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s2c
@findex s2c

@code{s2c(@var{theta}, @var{phi})}

[SOFA] Returns the cartesian coordinates (direction cosines)
corresponding to spherical coordinates longitude @code{@var{theta}}
and latitude @code{@var{phi}}, both in radians.  @code{@var{theta}}
and @code{@var{phi}} must have the same dimensions.  The result has
those same dimensions, but with an extra dimension equal to 3
prefixed.

@c -------------------------------------
@node s2p, s2pv, s2c, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s2p
@findex s2p

@code{s2p(@var{theta}, @var{phi}, @var{r})}

[SOFA] Converts spherical polar coordinates longitude
@code{@var{theta}} in radians, latitude @code{@var{phi}} in radians,
radial distance @code{@var{r}} to a p-vector.  The three arguments
must have the same dimensions.  The result has those dimensions, too,
but with an extra dimension equal to 3 prefixed.

@c -------------------------------------
@node s2pv, sc, s2p, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection s2pv
@findex s2pv

@code{s2pv(@var{theta}, @var{phi}, @var{r}, @var{td}, @var{pd},
@var{rd})}

[SOFA] Returns the pv-vector that corresponds to the spherical
coordinates longitude @code{@var{theta}} (radians), latitude
@code{@var{phi}} (radians), radial distance @code{@var{r}}, rate of
change of theta @code{@var{td}}, rate of change of phi
@code{@var{pd}}, rate of change of r @code{@var{rd}}.  All arguments
must have the same dimensions.  The result has those same dimensions,
too, but with two extra dimensions equal to 2 and 3 prefixed.

@c -------------------------------------
@node sc, scale, s2pv, Internal Routines
@subsection sc
@findex sc

@code{sc, @var{x}, @var{s}, @var{c}}

Returns a sine-cosine transform of the first dimension of numerical data
@code{@var{x}}.  @code{@var{x}} may be of any positive size.  In
@code{@var{s}} and @code{@var{c}} are returned the sine and cosine
coefficients; element @code{i} corresponds to wavelength
@code{num_elem(@var{x})/i}.  Sine transform: @code{@var{s}(i) = 2 *
mean(@var{x} * sin(#2pi * i * indgen(@var{x})/num_elem(@var{x})))}, but
without prefactor 2 for @code{i = 0}.  Cosine transform:
@code{@var{c}(i) = 2 * mean(@var{x} * cos(#2pi * i *
indgen(@var{x})/num_elem(@var{x})))}, but without prefactor 2 for
@code{i = 0}.  For quickest calculation, the length of the first
dimension of @code{@var{x}} should only contain small prime factors,
like 2, 3, and 5.

The values @code{@var{s}(0,...)} are always equal to zero.  If the
number of elements in the first dimension is even, then
@code{@var{s}(*-1,...)} is also equal to zero.

Reverse: @ref{scb}

See also: @ref{power}, @ref{fft}, @ref{hilbert}


@menu
* sc Details::
@end menu
@c -------------------------------------
@node sc Details,  , sc, sc
@comment  node-name,  next,  previous,  up
@subsubsection sc Details

@code{sc} is implemented using some routines from Paul
n. Schwarztrauber's fftpack version 4, obtained from the Netlib cd-rom
(2nd edition).

@c -------------------------------------
@node scale, scalerange, sc, Internal Routines
@subsection scale
@findex scale

@code{scale(@var{image} [, @var{low}, @var{high}][, /fullrange,
/zoom])}

Returns an linearly intensity-scaled version of @code{@var{image}}.  If
@code{@var{low}} and @code{@var{high}} are defined, then
@code{@var{low}} and smaller numbers are mapped to @code{!scalemin}, and
@code{@var{high}} and greater numbers to @code{!scalemax}, except when
keyword @code{/fullrange} is specified, which forces the numbers to be
scaled to the full range of colors.  If x windows are used, then this
range is from 0 to one less than the maximum number of distinguishable
colors in the currently selected display style, and if x windows are not
used, then the range is from 0 to 255 (inclusive).  If the range is 256
or less (e.g., on an 8-bit display), then the result has type
@code{byte}.  If the range is 65536 or less (e.g., on 9 through 16-bit
displays), then the result is @code{word}, and otherwise (e.g., on 17
through 32-bit displays) it is @code{long}.

If @code{@var{low}} and @code{@var{high}} are not explicitly specified,
and if @code{/zoom} is specified, then the values of @code{!zoomlow} and
@code{!zoomhigh} are taken for them, respectively; otherwise they
default to the lowest and highest values in @code{@var{image}}.

See also: @ref{scalerange}, @ref{!scalemin}, @ref{!scalemax},
@ref{!zoomlow}, @ref{!zoomhigh}

@c -------------------------------------
@node scalerange, scanf, scale, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection scalerange
@findex scalerange

@code{scalerange(@var{image}, @var{logrey}, @var{higrey} [, @var{low},
@var{high}][, /fullrange, /zoom])}

Returns a linearly intensity-scaled version of @code{@var{image}}.  The
lowest data value, or @code{@var{low}} if that is specified, is mapped
to a relative grey level of @code{@var{logrey}}, and the highest data
value, or @code{high} if that is specified, is mapped to a relative grey
level of @code{@var{higrey}}.  By default, a relative grey level of 0
corresponds to color index @code{!scalemin} (commonly black) and a
relative grey level of 1 to color index @code{!scalemax} (commonly
white).  If @code{/fullrange} is specified, then 0 and one less than the
maximum number of color cells for the currently selected display type
are used instead of @code{!scalemin} and @code{!scalemax}.  If x windows
are not used, then the range is 0 through 255.

If @code{/zoom} is specified, then the values of @code{!zoomlow} and
@code{!zoomhigh} are used instead of @code{@var{low}} and
@code{@var{high}}.

See also: @ref{scale}, @ref{!scalemin}, @ref{!scalemax}, @ref{!zoomlow},
@ref{!zoomhigh}

@c -------------------------------------
@node scanf, scb, scalerange, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection scanf
@findex scanf

@code{scanf, @var{lun}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces]}

@code{scanf(@var{lun}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces])}

Reads arguments from the file on logical unit @code{@var{lun}} under
guidance of format string @code{@var{format}}.  The target arguments
must be either named variables, or subscripted named variables.  If
@code{/countspaces} is specified then whitespace counts against field
width.  The function form returns the number of successfully converted
arguments.

Alias: @ref{freadf}

See also: @ref{!read_count}, @ref{Input Data Formats}, @ref{readf}

@c -------------------------------------
@node scb, sccomplex, scanf, Internal Routines
@subsection scb
@findex scb

@code{scb, @var{x}, @var{s}, @var{c} [, /even, /odd]}

Sine-cosine inverse transform (in the first dimension) to
@code{@var{x}}.  @code{@var{s}} and @code{@var{c}} must contain the sine
and cosine coefficients, respectively, as returned by @code{sc}: element
@code{i} corresponds to wavelength @code{num_elem(@var{x})/i}.

Because of the way the sine and cosine transform values are stored, it
is not possible to unambiguously determine the number of data elements
that @code{@var{x}} should get.  If the first dimension of the sine and
cosine transforms contains @code{n} elements, then these might have come
from an @code{@var{x}} with @code{2*n} or @code{2*n + 1} elements in the
first dimension.  If the highest-frequency sine value(s) is/are equal to
zero, then it is likely that the results derive from transforms
involving an even number of data points, though the zero(s) may also be
due to an odd number of very fortuitous data values.

To resolve this difficulty, the following rules are followed: If
@code{/even} is specified, then assume @code{n} is even.  If @code{/odd}
is specified, then assume @code{n} is odd.  If neither
@code{@var{/even}} nor @code{@var{/odd}} are specified, then inspect the
highest-frequency sine transform (@code{@var{s}}) values: if all of them
are equal to zero, then assume @code{n} is even, otherwise odd.

Reverse: @ref{sc}

See also: @ref{power}, @ref{fft}, @ref{hilbert}


@menu
* scb Details::
@end menu
@c -------------------------------------
@node scb Details,  , scb, scb
@comment  node-name,  next,  previous,  up
@subsubsection scb Details

@code{scb} is implemented using some routines from Paul
n. Schwarztrauber's fftpack version 4, obtained from the Netlib cd-rom
(2nd edition).

@c -------------------------------------
@node sccomplex, sdev, scb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection sccomplex
@findex sccomplex

@c -------------------------------------
@node sdev, segment, sccomplex, Internal Routines
@subsection sdev
@findex sdev

@code{sdev(@var{x} [, @var{mode}, weights=@code{weights}, /sample,
/population, /keepdims, /double])}

By default, this function returns the sample standard deviation of
numerical array @code{@var{x}}.

If @code{@var{mode}} is a scalar or an array with a size different from
that of @code{@var{x}}, then it indicates the dimension(s) along which
standard deviations are calculated for each combination of the remaining
coordinates.  In that case, if also @code{/keepdims} is specified, then
the dimension(s) along which the deviations are calculated are set to 1
in the result.  If @code{/keepdims} is not set, then such dimensions are
omitted from the result, and if only a single number is returned, then
it is returned as a scalar.

If @code{@var{mode}} is an array with the same number of elements as
@code{@var{x}}, then each element of @code{@var{mode}} identifies the
(scalar) class to which each corresponding element of @code{@var{x}}
belongs, and then a standard deviation is returned for each class.  The
first element of the result refers to class @code{0} (if no class is
negative), or to the most negative class.

If @code{@var{weights}} is specified, then it must be a numerical array
with the same dimensions as @code{@var{x}} (or merely the same number of
elements, if deviations are calculated by class), and then each of its
elements indicates the weight of the corresponding element of
@code{@var{x}}, and then weighted standard deviations are returned.  The
@code{@var{weights}} are copied to a version with the same data type as
@code{@var{x}} for the internal calculations (except that the copy is
kept real even if @code{@var{x}} is complex).

If @code{/population} or @code{@var{weights}} are specified, then
population standard deviations are returned.  Otherwise, sample standard
deviations are returned.

Complex numbers are supported.

The result has type @code{double} if @code{@var{x}} is itself
@code{double} or @code{cdouble}, or if @code{/double} was specified.
Otherwise, the result has type @code{float}.

The last calculated standard deviation is stored in @code{!lastsdev},
and the associated average (or the real part of it, for complex
arguments) in @code{!lastmean} (except if the standard deviations were
determined by class).

Examples, with @code{x = [[[6, 4, 3]],[[8, 2, 4]]]} and @code{c = [2, 2,
2, 2, 1, 1]}:

To print the population standard deviation along the first dimension
(dimension 0, rows) of @code{x}:
@example
LUX>t,sdev(x,0,/population)
      1.247219      2.494438
@end example

And along the second dimension (dimension 1, columns):
@example
LUX>t,sdev(x,1,/population)
             1             1           0.5
@end example

To divide each column of @code{x} by its sample standard deviation:
@example
LUX>x /= sdev(x,1,/keepdims)
LUX>t,x(*,0)
      4.242641      2.828427      4.242641
LUX>t,x(*,1)
      5.656854      1.414214      5.656854
@end example

To print the population standard deviation of @code{x} for the classes
identified by @code{c}:
@example
LUX>t,sdev(x,c)
             0      1.414214      2.217356
@end example
Class 0 yields @code{0} because there are no elements @code{0} in
@code{c}.  Class 1 yields the population standard deviation
(@code{1.414214}) of elements @code{2, 4}, and class 2 yield the
deviation (@code{2.217356}) of elements @code{6, 4, 3, 8}.

See also: @ref{hist}, @ref{mean}, @ref{total}, @ref{variance},
@ref{!lastmean}, @ref{!lastsdev}

@c -------------------------------------
@node segment, segmentdir, sdev, Internal Routines
@subsection segment
@findex segment

@code{segment(@var{data} [, sign=@var{sign}, diagonal=@var{diagonal},
/degree])}

Curvature-based data segmentation in multiple dimensions.
@code{segment(@var{data})} returns a @code{1} for each element of
@code{n}-dimensional @code{@var{data}} where the data in an
n-dimensional hypercube with sides of 3 elements centered on the element
under investigation shows curvature of the appropriate sign in all
directions through that central element, and a @code{0} otherwise.  For
each direction, the curvature is equal to the sum of the values of two
elements adjacent on opposite sides to the central element minus twice
the central value.  For example, in two dimensions we can regard the
data as an altitude map, and then this function returns a @code{1} in
all places where the central value exceeds the average of the two
adjacent values on opposite sides of the central value in the n-s
direction, the e-w direction, the ne-sw direction, and the nw-se
direction.  The number of directions to consider per data element in an
@code{n}-dimensional array @code{@var{data}} is equal to @code{m = (3^n
- 1)/2}.

If @code{@var{diagonal}} is specified, then it must have one element per
data dimension and is taken as instructions on which nearest-neighbor
connections to recognize.  A @code{2} means that nearest neighbors with
their @code{@var{bitmap}} values equal to @code{1} are assigned to the
same area if they share any face or vertex in the corresponding
dimension.  A @code{1} means that such neighbors are assigned to the
same area only if they share a face in the corresponding dimension.  a
@code{0} means that connections in the corresponding dimension are
ignored.  If @code{@var{diagonal}} is not specified, then code @code{2}
is assumed for all dimensions.

For example, if @code{@var{diagonal}} is equal to @code{[2, 2, 0]}, then
no connections in the third dimension are recognized, and the data is
treated as a set of unconnected two-dimensional images (but no area in
any of these images shares its area number with any area in any of the
other images).  Within each of the images, connections in all four
directions (n-s, e-w, ne-sw, nw-se) are recognized in this case.  If
@code{@var{diagonal}} is equal to @code{[1, 1, 0]}, then only directions
in the orthogonal directions (n-s, e-w) are recognized.  Likewise for
@code{[2, 1, 0]}, because even though the first dimension allowes
vertices, the second one only accepts faces.

If @code{/degree} is specified, then the number of directions per data
element that exhibit the appropriate curvature is returned instead.
This number always lies between 0 and the total number @code{m} of
directions given above.  @code{segment(data, /degree) eq m} is
equivalent to @code{segment(data)}, but the latter form is usually
considerably faster because for each element it stops checking as soon
as a direction with inappropriate curvature is found.  For noise data in
arbitrary numbers of dimensions, on average at most 2 curvature
calculations per data element are performed.

If @code{@var{sign}} (when converted to type @code{long}) is non-zero,
then negative curvature (i.e., hill-like objects) are sought.  If
integer @code{@var{sign}} is negative, then positive curvature (i.e.,
valley-like objects) are sought.  By default, a value of @code{+1} is
assumed for @code{@var{sign}}.

Zeros are returned on the 1-px-wide edges of the result, because not
enough data is available there to determine the curvature in all
directions.

If @code{@var{data}} is a 2-dimensional array and neither
@code{@var{diagonal}} nor @code{/degree} are specified, then a
special-purpose version of the routine is used that is optimized for
processing speed.  In all other cases a more general but slower version
is executed.

If @code{@var{data}} is of types @code{long}, @code{float}, or
@code{double}, then overflow problems may occur if any of its
values have a magnitude exceeding @code{#max_long/2},
@code{#max_float/2}, or @code{#max_double/2}, respectively.

@c -------------------------------------
@node segmentdir, sepp, segment, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection segmentdir
@findex segmentdir

@code{segmentdir( @var{data}, @var{angle} [, sign=@var{sign}])}

Curvature-based data segmentation in two-dimensional @code{@var{data}},
checking only perpendicular to the direction indicated by the
@code{@var{angle}} (measured in radians counterclockwise from the
positive x-axis).

See also: @ref{segment}

@c -------------------------------------
@node sepp, seps, segmentdir, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection sepp
@findex sepp

@code{sepp(@var{a}, @var{b})}

[SOFA] Returns the angular separation in radians between two p-vectors
@code{@var{a}} and @code{@var{b}}, which must have the same dimensions
and must have their first dimension equal to 3.  The result has the
same dimensions as the arguments except that the first dimension
(equal to 3) is omitted.

@c -------------------------------------
@node seps, set, sepp, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection seps
@findex seps

@code{seps(@var{lon1}, @var{lat1}, @var{lon2}, @var{lat2})}

[SOFA] Returns the angular separation in radians between the direction
with longitude @code{@var{lon1}} (radians), latitude @code{@var{lat1}}
(radians) and the direction with longitude @code{@var{lon2}}
(radians), latitude @code{@var{lat2}} (radians).  All arguments must
have the same dimensions.  The result has those same dimensions, too.

@c -------------------------------------
@node set, setbackground, seps, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection set
@findex set

@code{set [, visual=@var{visual}] [, /set, /reset, /showalloc,
/whitebackground, /ulimcoords, /allowpromts, /xsynchronize,
/parsesilent, /zoom]}

Modifies the default behavior of various commands and aspects of LUX.
By default, binary keyword selections are added to those already in
place.  The binary keywords are:

@table @code
@item /set
Clear all previous specifications and set only the specified selections.
@item /reset
Reset the specified selections so they are no longer active.
@item /showalloc
[debug] Display information about allocation and freeing of memory.
@item /whitebackground
Make white rather than black the default window background, and
black rather than white the default line color.  This setting has effect
only when opening a new window with @code{xport} or @code{tv} or one of
its cousins.
@item /ulimcoords
Count image placement coordinates from the upper left-hand corner
rather than the lower left-hand corner.
@item /yreverseimg
When set, images are displayed with image element (0,0) in the
upper left-hand corner rather than the lower left-hand corner.  This
reversed display is the native format of the x window system, so it may
(slightly) speed up display of images.
@item /allowpromts
When this is set, the user can enter one of the valid LUX prompts at the
very start of an input line and such prompts will be ignored.  This is
convenient for entering a set of lines using cut-and-paste with the
mouse pointer.
@item /xsynchronize
@code{[@ref{x11}]} When set, internal x window commands are executed in the exact
order in which they are encountered, so that error messages (if any) are
displayed right when the LUX command that generates them is being
executed.  When reset, and by default, x window commands are executed in
the most efficient order, which generally yields faster execution than
with synchronization, but may result in error messages appearing when
much later LUX commands are already being executed.  Synchronization is
useful to find out exactly which LUX command generates a particular
x error message.
@item /parsesilent
When set, instructs the parser to not issue warnings at all when
encountering patently unbalanced parentheses, square brackets, or
quotes, mimicking LUX 1, and to issue only bare-bones messages
associated with other parser errors.  Ordinarily, unbalanced items and
other syntax errors yield full-scale error messages.  Note: Before
version 3.2.19, a key @code{/parsewarn} with the opposite meaning to
@code{/parsesilent} was used instead.  With the key, the default
behavior has also switched, to full warnings and error messages.
@item /zoom
@code{[@ref{x11}]} When set, images are displayed by default
with the greatest integer zoom factor that allows them to fit in the
window, similar to @code{tv,/scale}.
@end table

@code{[@ref{x11}]} If @code{@var{visual}} is specified, then its
string value specifies the visual class you wish to use for the output
of graphics, such as images and plots.  There are six different visual
classes, which differ in whether they support color or only grayscale,
dynamic (changeable) or static colors, and linked or independent primary
colors.  Valid names for @code{@var{visual}} come in three sets.  Names
from the first set all have three characters, the first a @code{g} for
grayscale or a @code{c} for color, the second a @code{s} for static or a
@code{d} for dynamic, and the third an @code{l} for linked or an
@code{i} for independent.  The first set is: @code{gsl}, @code{csl},
@code{csi}, @code{gdl}, @code{cdl}, @code{cdi}.  Names from the second
set are the x window designations for these visual classes.  They are,
given in the same order as for the first set: @code{StaticGray},
@code{StaticColor}, @code{TrueColor}, @code{GrayScale},
@code{PseudoColor}, @code{DirectColor}.  Names from the third set
consist of the capital letters from the corresponding names of the
second set, i.e., @code{sg}, @code{sc}, @code{tc}, @code{gs}, @code{pc},
@code{dc}.  Any one of these 18 names may be specified for
@code{@var{visual}}, and all characters may be specified in either lower
case or upper case.

There may be more than one visual for your screen of the class you
specify.  In that case, one is selected according to unspecified rules.

If a connection to the x server was already established (e.g., if you
already opened a LUX window), then a visual has already been selected.
It is an error to call @code{set} if a visual is already active that
does not match @code{@var{visual}}.  If you wish to change to a
different visual class, then you must first explicitly close the current
connection to the x server (using @code{xclose}), which will delete all
open graphical LUX windows.

See also: @ref{xport}, @ref{setforeground}, @ref{setbackground},
@ref{trace}, @ref{step}, @ref{tv}, @ref{xclose}, @ref{xopen}

@c -------------------------------------
@node setbackground, setbg, set, Internal Routines
@subsection setbackground
@findex setbackground

@code{setbackground [, @var{window}] , @var{color}}

@code{[@ref{x11}]} Sets the background color of window
@code{@var{window}}, or of the default (last) window, to
@code{@var{color}}, which must be a string (e.g., a color name) or a
three-element array with floating-point values between 0 and 1 for red,
green, and blue.

Alias: @ref{setbg}

See also: @ref{setforeground}, @ref{Incidental Colors}

@c -------------------------------------
@node setbg, setenv, setbackground, Internal Routines
@subsection setbg
@findex setbg

@code{setbg [, @var{window}] , @var{color}}

@code{[@ref{x11}]} Sets the background color of window
@code{@var{window}}, or of the default (last) window, to
@code{@var{color}}, which must be a string (e.g., a color name) or a
three-element array with floating-point values between 0 and 1 for red,
green, and blue.

Alias: @ref{setbackground}

See also: @ref{setforeground}, @ref{Incidental Colors}

@c -------------------------------------
@node setenv, setfg, setbg, Internal Routines
@subsection setenv
@findex setenv

@code{setenv, @var{string}}

Sets or displays an environment variable.  If @code{@var{string}} does
not contain an equal sign @code{=}, then it is assumed to contain an
environment variable name and the current value of that environment
variable is displayed.  If @code{@var{string}} has the form
@code{'VARIABLE=VALUE'}, then @code{value} is assigned to environment
variable @code{variable} (which must not have a preceding @code{$}).

@c -------------------------------------
@node setfg, setforeground, setenv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection setfg
@findex setfg

@code{setfg [, @var{window}], @var{color}}

@code{[@ref{x11}]} Sets the foreground color of window
@code{@var{window}}, or of the default (last) window, to
@code{@var{color}}, which must be a string (e.g., a color name) or a
three-element array with floating-point values between 0 and 1 for red,
green, and blue.

Alias: @ref{setforeground}

See also: @ref{setbackground}, @ref{Incidental Colors}

@c -------------------------------------
@node setforeground, setnan, setfg, Internal Routines
@subsection setforeground
@findex setforeground

@code{setforeground [, @var{window}] , @var{color}}

@code{[@ref{x11}]} Sets the foreground color of window
@code{@var{window}}, or of the default (last) window, to
@code{@var{color}}, which must be a string (e.g., a color name) or a
three-element array with floating-point values between 0 and 1 for red,
green, and blue.

Alias: @ref{setfg}

See also: @ref{setbackground}, @ref{Incidental Colors}

@c -------------------------------------
@node setnan, sgn, setforeground, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection setnan
@findex setnan

@code{setnan(@var{x}, @var{mask})}

Returns a copy of @code{@var{x}} in which those elements are set equal
to NaN (not a number) for which @code{@var{mask}} is not zero.

@c -------------------------------------
@node sgn, shift, setnan, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection sgn
@findex sgn

@code{sgn(@var{data})}

Returns for each element of @code{@var{data}} the sign of the element:
@code{+1} if the element is positive, @code{-1} if the element is
negative, and @code{0} if the element is equal to zero.

@c -------------------------------------
@node shift, shift3, sgn, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection shift
@findex shift

@code{shift(@var{data} [[, @var{axes}], @var{dist}, blank=@var{blank}] [,
/translate])}

@code{shift, @var{data} [[, @var{axes}], @var{dist}, blank=@var{blank}]
[, /translate]}

Shifts the data in array @code{@var{data}} over the integer numbers of
elements in @code{@var{dist}}.  If @code{@var{blank}} or
@code{/translate} are specified, then the data is shifted
non-cyclically: values that are shifted beyond an edge of the original
array are lost, and the value of @code{@var{blank}}, or zero by default,
is inserted for values that are shifted in from beyond the opposite
edge.  If neither @code{@var{blank}} nor @code{/translate} are
specified, then the data is shifted cyclically: data that shifts beyond
one edge will appear at the opposite edge, and no data values are lost.
@code{@var{axes}} specifies along which dimensions must be shifted over
the amount given by the corresponding element of @code{@var{dist}}.

If @code{@var{dist}} is not specified, then @code{dimen(@var{data})/2}
is assumed for it.  If @code{@var{axes}} is not specified, then
@code{indgen(@var{dist})} is assumed for it.

The function form returns the shifted data; the subroutine form modifies
@code{@var{data}}.

See also: @ref{swaphalf}, @ref{fftshift}, @ref{shift3}

@c -------------------------------------
@node shift3, show, shift, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection shift3
@findex shift3

@code{shift3(@var{data}, @var{dx} [, @var{dy}])}

Shifts the data in one- or two-dimensional numerical array
@code{@var{data}} over @code{@var{dx}} pixels in x and (optionally)
@code{@var{dy}} in y, using bicubic interpolation.  @code{@var{dx}} and
@code{@var{dy}} need not be integer.

See also: @ref{shift}, @ref{fftshift}

@c -------------------------------------
@node show, showorbits, shift3, Internal Routines
@subsection show
@findex show

@code{show [, @var{symbol}]}

Show info on given symbol.  @code{@var{symbol}} must contain either a
partial symbol name (a string) or a symbol number.  All symbols that
contain the partial name are displayed.  By default, info on all symbols
is displayed.

Alias: @ref{s}

See also: @ref{dump}, @ref{atomize}

@c -------------------------------------
@node showorbits, showstats, show, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection showorbits
@findex showorbits

@code{showorbits}

Show the object ID numbers and comments for all auxilliary objects read
so far through @code{readorbits} or @code{astron}.

See also: @ref{astron}, @ref{readorbits}

@c -------------------------------------
@node showstats, show_files, showorbits, Internal Routines
@subsection showstats
@findex showstats

@code{showstats}

Displays some statistics about the current LUX session; mostly helpful
in debugging the LUX program.  Depending on the way in which your
version of LUX was compiled, the following columns may feature in the
answer:
@table @code
@item nall
number of items for which memory is allocated.
@item talloc
total number of allocated bytes.
@item sz
total number of bytes set aside by the operating system for this LUX
session.
@item ign
ignore level (@code{ignore}-@code{resume}).
@item std
statement depth.
@item exl
execution level.
@item cpl
compilation level.
@item lst
list stack index.
@item nvar
number of defined named variables.
@item tvar
index of temporary variables.
@item exe 
index of permanent executables.
@item texe 
index of temporary executables.
@item sstk 
symbol stack index.
@item ctxt
current execution context.
@item tm
index of marked temporary variables.
@end table
 
At the main execution level, the values of @code{ign}, @code{std},
@code{exl}, @code{cpl}, @code{lst}, @code{tvar}, @code{exe},
@code{texe}, @code{sstk}, @code{ctxt}, and @code{tm} should all be zero.

See also: debugging

@c -------------------------------------
@node show_files, show_func, showstats, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection show_files
@findex show_files

@code{show_files}

@code{[debug]} Shows all files that are currently opened, including
those that have been opened using LUX routines (such as @code{openr})
and those that have been opened by LUX itself.

See also: @code{openr}, @code{dump_lun}

@c -------------------------------------
@node show_func, show_subr, show_files, Internal Routines
@subsection show_func
@findex show_func

@code{show_func, @var{match_string} [, /parameters]}

Lists all internal LUX functions whose names contain
@code{@var{match_string}}.  If only one function matches and if
@code{/parameters} is specified, then the keywords defined for this
function are also displayed.

See also: @ref{show_subr}

@c -------------------------------------
@node show_subr, show_temps, show_func, Internal Routines
@subsection show_subr
@findex show_subr

@code{show_subr, @var{match_string} [, /parameters]}

Lists all internal LUX subroutines whose names contain
@code{@var{match_string}}.  If only one subroutine matches and if
@code{/parameters} is specified, then the keywords defined for this
subroutine are also displayed.

See also: @ref{show_func}

@c -------------------------------------
@node show_temps, show_visuals, show_subr, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection show_temps
@findex show_temps

@code{show_temps}

@code{[debug]} Lists all currently defined temporary variables.  This
routine is useful in debugging the LUX program itself.

@c -------------------------------------
@node show_visuals, siderealtime, show_temps, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection show_visuals
@findex show_visuals

@code{show_visuals}

@code{[@ref{x11}]} Shows a list of the color display methods ("visuals" in
x-speak) available to the current screen.  For each method, the
following information is listed: the class name, the depth, the colormap
size, the red mask, the green mask, the blue mask, and the number of
bits per rgb entry.

@c -------------------------------------
@node siderealtime, sieve, show_visuals, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection siderealtime
@findex siderealtime

@code{siderealtime( @var{jd} [, /atzerotime] [, /mean])}

Returns the sidereal time (relative to the mean equinox of the date)
for 0 degrees longitude, measured in hours (between 0 and 24), for
Julian Day numbers @var{jd} (a numerical scalar or array).  If
@code{/atzerotime} is specified, then the sidereal time is returned
for the beginning (0:00 UT) of the Julian Day that @var{jd} indicates.
Otherwise, the mean sidereal time at the exact date and time indicated
by @var{jd} is returned.  If @code{/mean} is specified, then the mean
sidereal time is returned, otherwise the true sidereal time.

See also: @ref{calendar}

@c -------------------------------------
@node sieve, sin, siderealtime, Internal Routines
@subsection sieve
@findex sieve

@code{sieve( [@var{data},] @var{condition})}

Returns a 1d array containing those elements of numerical variable
@code{@var{data}} for which the corresponding element of
@code{@var{condition}} is non-zero.  If @code{@var{condition}} isn't met
anywhere, then scalar @code{-1} is returned.  If @code{@var{data}} is
not specified, then the indices of non-zero elements of
@code{@var{condition}} are returned (i.e. equivalent to
@code{sieve(indgen(long(@var{condition})),@var{condition})}).

See also: @ref{match}

@c -------------------------------------
@node sin, sinh, sieve, Internal Routines
@subsection sin
@findex sin

@code{sin(@var{x})}

Returns the sine of @code{@var{x}} (which is in radians).

Reverse: @ref{asin}

See also: @ref{cos}, @ref{tan}, @ref{#deg}

@c -------------------------------------
@node sinh, skipc, sin, Internal Routines
@subsection sinh
@findex sinh

@code{sinh(@var{x})}

Returns the hyperbolic sine of @code{@var{x}}.

See also: @ref{cosh}, @ref{tanh}

@c -------------------------------------
@node skipc, skipf, sinh, Internal Routines
@subsection skipc
@findex skipc

@code{skipc(@var{s}, @var{c})}

Returns part of string @code{@var{s}} starting with the first character
which is not in string @code{@var{c}}, or an empty string.

@c -------------------------------------
@node skipf, skipr, skipc, Internal Routines
@subsection skipf
@findex skipf

@code{skipf, @var{lun}, @var{nfiles}}

@code{[@ref{tape}]} Skip @code{@var{nfiles}} files on logical unit (tape
drive) @code{@var{lun}}.  The tape is positioned just after the
@code{@var{nfiles}}th read end-of-file.  Negative @code{@var{nfiles}}
cause the tape to be rewound |@code{@var{nfiles}}| files.

See also: @ref{skipr}, @ref{rewind}, @ref{taprd}, @ref{tapwrt}

@c -------------------------------------
@node skipr, smap, skipf, Internal Routines
@subsection skipr
@findex skipr

@code{skipr, @var{lun}, @var{nrecs}}

@code{[@ref{tape}]} Skip @code{@var{nrecs}} records on logical unit
(tape drive) @code{@var{lun}}.  Negative values of @code{@var{nrecs}}
cause the tape to be rewound |@code{@var{nrecs}}| records.

See also: @ref{skipf}, @ref{rewind}, @ref{taprd}, @ref{tapwrt}

@c -------------------------------------
@node smap, smod, skipr, Internal Routines
@subsection smap
@findex smap

@code{smap(@var{x} [, /truncate, /array])}

Maps @code{@var{x}} byte for byte into a string or string array.  If
keyword @code{/truncate} is set, then truncates the string at the first
zero byte.  If @code{/truncate} is not set but @code{/array} is, and if
in addition @code{@var{x}} is an array, then the result is a string
array, with each run along dimension zero transformed into one string in
the string array.

See also: @ref{bmap}, @ref{wmap}, @ref{lmap}, @ref{fmap}, @ref{dmap}

@c -------------------------------------
@node smod, smooth, smap, Internal Routines
@subsection smod
@findex smod

@code{x smod y}

Binary signed modulus operator.  @code{@var{x} smod @var{y}} yields
the signed remainder of the division of @code{@var{x}} by
@code{@var{y}}, i.e., the smallest (in absolute terms) remainder.  If
@code{y = 3*x - 1} then @code{y smod x = -1} and @code{y mod x = x -
1}.

See also: @code{mod}

@c -------------------------------------
@node smooth, solar_b, smod, Internal Routines
@subsection smooth
@findex smooth

@code{smooth(@var{x} [[, @var{axis}], @var{width}][, /partial_width,
/all])}

Boxcar-smooths @code{@var{x}} along the axes indicated in
@code{@var{axis}} over a number of elements picked from
@code{@var{width}}.  If @code{@var{width}} is an array, then it may have
fewer dimensions than @code{@var{x}} but the dimensions it does have
must be equal to the corresponding dimensions of @code{@var{x}}.  In
that case, @code{@var{width}} is repeated as needed to service all
elements of @code{@var{x}}.  The number of elements around each element
of @code{@var{x}} that is smoothed over is equal to the corresponding
element of @code{@var{width}}.

If @code{@var{axis}} is not specified but @code{/all} is, then the
results are as if @code{indgen(@var{width})} were specified for
@code{@var{axis}}.  If @code{@var{axis}} is not specified or negative,
then @code{@var{x}} is regarded as a one-dimensional array.  In that
case, @code{@var{width}} must be scalar.

@code{/partial_width} determines handling at the edges: If it is set ,
then the edges are filled with the nearest smaller-width value.  If it
is not set, then the edges are filled with the nearest full-width
value.

See also: @ref{runcum}, @ref{runsum}, @ref{gsmooth}, @ref{esmooth}

@c -------------------------------------
@node solar_b, solar_l, smooth, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection solar_b
@findex solar_b

@code{solar_b(@var{jd})}

Returns the solar b angle (i.e., the heliographical latitude of the
center of the solar disk as would be seen from the center of the Earth)
in degrees for Julian Ephemeris Date @code{@var{jd}} (i.e., Julian Date
in terrestrial dynamical time TDT).

See also: @ref{solar_l}, @ref{solar_p}, @ref{solar_r}

@c -------------------------------------
@node solar_l, solar_p, solar_b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection solar_l
@findex solar_l

@code{solar_l(@var{jd} [, /full])}

Returns the solar l angle (i.e., the heliographical longitude of the
center of the solar disk as would be seen from the center of the Earth)
om degrees, for Julian Ephemeris Date @code{@var{jd}} (i.e., Julian Date
in terrestrial dynamical time TDT), based on the Carrington rotation.
By default, the angle is reduced to the interval from 0 through 360
degrees.  If keyword @code{/full} is specified, then the angle is not so
reduced.  In that case, the number of full rotations that must be added
to obtain an angle between 0 (exclusive) and 360 degrees (inclusive)
indicates the number of the Carrington rotation.

For example, @code{solar_l(calendar([2000,1,1]), /full)} yields
-704511.9511 degrees (truncated).  If 1957 full rotations (of 360
degrees each) are added to this number, then we obtain 8.0489 degrees
which is between 0 and 360, so on 0 TDT on 1 January 2000 we are in
Carrington rotation number 1957.

See also: @ref{solar_b}, @ref{solar_p}, @ref{solar_r}

@c -------------------------------------
@node solar_p, solar_r, solar_l, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection solar_p
@findex solar_p

@code{solar_p(@var{jd})}

Returns the solar p angle (i.e., the angle - relative to the center of
the solar disk - between the north pole of the Sun and the zenith,
measured from north to west(?) in degrees, at Julian Ephemeris Date
@code{@var{jd}}.

See also: @ref{solar_b}, @ref{solar_l}, @ref{solar_r}

@c -------------------------------------
@node solar_r, sort, solar_p, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection solar_r
@findex solar_r

@code{solar_r(@var{jd})}

Returns the apparent radius of the Sun as would be seen from the center
of the Earth, measured in arcseconds, at Julian Ephemeris Date
@code{@var{jd}}.  For the solar radius at 1 AU the value of 959.6276
arcsec was adopted.

See also: @ref{solar_b}, @ref{solar_l}, @ref{solar_p}

@c -------------------------------------
@node sort, sp00, solar_r, Internal Routines
@subsection sort
@findex sort

@code{sort(@var{array} [, /heap, /shell, /axis])}

Sorts the elements of @code{@var{array}} in ascending order, either
along the 0th dimension (if keyword @code{/axis} is specified), or as
one big 1-dimensional array.  Uses heap sort if keyword @code{/heap} is
used, or shell sort if keyword @code{/shell} is used, or otherwise the
default method, which is heap sort if @code{!sort_flag} equals 0, or
shell sort if it equals 1.

See also: @ref{index}, @ref{!sort_flag}

@c -------------------------------------
@node sp00, spawn, sort, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection sp00
@findex sp00

@code{sp00(@var{jdtt})}

[SOFA] Returns the tio locator s' for TT Julian Date
@code{@var{jdtt}}, positioning the Terrestrial Intermediate Origin on
the equator of the Celestial Intermediate Pole.  The result is
measured in radians and has the same dimensions as @code{@var{jdtt}}.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node spawn, sprintf, sp00, Internal Routines
@subsection spawn
@findex spawn

@code{spawn, @var{string} [, /silent]}

@code{spawn(@var{x})}

Spawns @code{@var{string}} as a shell command.  If called as a function,
then the return value from the shell is returned.  If called as a
routine, then if keword @code{/silent} is specified, then @code{spawn}
never generates an error.  If @code{/silent} is not set (the default),
then an error is generated if the shell command returns a non-zero
value.

@c -------------------------------------
@node sprintf, sqrt, spawn, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection sprintf
@findex sprintf

@code{sprintf(@var{format}, @var{argument1} [, @var{argument2} @dots{} ,
/skip_undefined])}

Transforms the arguments to an ascii string under guidance of c-format
string @code{@var{format}}.  The arguments are modified to suit the data
types expected according to the format.  If keyword
@code{/skip_undefined} is specified, then undefined arguments (and the
format entries corresponding to them) are skipped.  This is useful if
the number of arguments to @code{sprintf} is not known exactly in
advance.

Alias: @ref{fstring}

See also: @ref{string}, @ref{fprint}, @ref{Output Data Formats}

@c -------------------------------------
@node sqrt, sscanf, sprintf, Internal Routines
@subsection sqrt
@findex sqrt

@code{sqrt(@var{x})}

Returns the square root of @code{@var{x}}.

See also: @ref{cbrt}

@c -------------------------------------
@node sscanf, ssfctopolar, sqrt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection sscanf
@findex sscanf

@code{sscanf, @var{string}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces]}

@code{sscanf(@var{string}, @var{format}, @var{arg1} [, @var{arg2}
@dots{}] [, /countspaces])}

Reads arguments from the @code{@var{string}} under guidance of format
string @code{@var{format}}.  The target arguments must be either named
variables, or subscripted named variables.  The function form returns
the number of successfully converted arguments.  If @code{/countspaces}
is specified, then whitespace counts against field width.

Alias: @ref{freads}

See also: @ref{!read_count}, @ref{Input Data Formats}, @ref{readf},
@ref{freadf}

@c -------------------------------------
@node ssfctopolar, starpm, sscanf, Internal Routines
@subsection ssfctopolar

@code{ssfctopolar(@var{ssfc} [, @var{level})}

Converts SSFCs (Sierpiński Surface-Filling Coordinates) to polar
coordinates.  An ssfc (@uref{http://ssfc.quae.nl}) indicates a
position on the surface of a sphere with just one coordinate rather
than with the usual two coordinates.

If @code{@var{ssfc}} is of an integer type, then its values are
interpreted as ssfc indices at the indicated @code{@var{level}}, and
are interpreted modulo @code{2^@var{level}}.  If no @code{@var{level}}
is indicated, then it is taken to be equal to the least number that
accommodates the greatest value found in @code{@var{ssfc}}, such that
@code{max(@var{ssfc} < 2^@var{level}}.

If @code{@var{ssfc}} is of a floating-point type, then its values are
interpreted modulo 1, as decimal SSFCs.  If @code{@var{level}} is not
specified, then it is taken equal to the maxmimum value commensurate
with the data type.

The returned value is an array with 3 elements in its first dimension,
and with a set of 3 values for each value of @code{@var{ssfc}}.  The 3
values are the latitude, longitude, and angular size, all measured in
radians.  Multiply by @code{@var{#rad}} to get degrees (@ref{#rad}).
The angular size is a measure for the size of the area on the surface
of the sphere that is indicated by the ssfc at the specified level.

See also: @ref{polartossfc}

@c -------------------------------------
@node starpm, starpv, ssfctopolar, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection starpm
@findex starpm

@code{starpm, @var{ra1}, @var{dec1}, @var{pmr1}, @var{pmd1},
@var{px1}, @var{rv1}, @var{jdtdb1}, @var{jdtdb2}, @var{ra2},
@var{dec2}, @var{pmr2}, @var{pmd2}, @var{px2}, @var{rv2}}

[SOFA] Updates star catalog data for space motion. The *1 parameters
are ``before'' values for TDB Julian Date @code{@var{jdtdb1}}.  The *2
parameters are returned ``after'' values for TDB Julian Date
@code{@var{jdtdb2}}.  @code{@var{ra}} = right ascension (radians),
@code{@var{dec}} = declination (radians), @code{@var{pmr}} = right
ascension proper motion (rad/a), @code{@var{pmd}} = declination proper
motion (rad/a), @code{@var{px}} = parallax (arcsec), @code{@var{rv}} =
radial velocity (km/s receding).  The input arguments must all have
the same dimensions.  The output variables get those same dimensions.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node starpv, step, starpm, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection starpv
@findex starpv

@code{starpv(@var{ra}, @var{dec}, @var{pmr}, @var{pmd}, @var{px},
@var{rv})}

[SOFA] Converts star catalog coordinates to a position-velocity
matrix.  The input parameters are right ascension @code{@var{ra}}
(radians), declination @code{@var{dec}} (radians), right ascension
proper motion @code{@var{pmr}} (rad/a), declination proper motion
@code{@var{pmd}} (rad/a), parallax @code{@var{px}} (arcsec), and
radial velocity @code{@var{rv}} (km/s receding).  All input parameters
must have the same dimensions.  The result gets those same dimension
with extra dimensions equal to 2 and 3 prefixed.  If the results are
@code{pv}, then @code{pv(0,*,/all)} is the position in AU, and
@code{pv(1, *, /all)} is the velocity in AU/day.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node step, store, starpv, Internal Routines
@subsection step
@findex step

@code{step [, @var{mode}]}

Enables stepping through LUX statements.  Just before excution of each
selected statement, that statement and a prompt @code{>executeLevel?}
are displayed.  Strike a key to continue.  The following keys have some
side effect:
@table @asis
@item s
step to the next command at any level.
@item n
step to the next command at the current level.
@item e
step to the next command at a lower level.
@item z
enter and execute a command at the @code{dbg>} prompt.
@item x
discontinue stepping.
@item q
abort the current calculation.
@item ?
describe all keys with a side effect.
@end table

See also: @ref{trace}

@c -------------------------------------
@node store, str, step, Internal Routines
@subsection store
@findex store

@code{store, @var{var}, @var{file} [, @var{header}]}

@code{store(@var{var}, @var{file} [, @var{header}])}

Writes array @code{@var{var}} and @code{@var{header}} string into
uncompressed fz @code{@var{file}}.  The function version returns
@code{1} on success, @code{0} on failure, and no error messages.

See also: @ref{fcwrite}, @ref{fzread}, @ref{fzhead}, @ref{restore}

Alias: @ref{fzwrite}, @ref{f0w}, @ref{f0write}, @ref{fzw}

@c -------------------------------------
@node str, strarr, store, Internal Routines
@subsection str
@findex str

@code{str( [@var{format},] @var{arg1} [, @var{arg2} @dots{}])}

Transforms the arguments to an ascii string under guidance of format
string @code{@var{format}}.  If the argument is not of the data type
expected by the format, then the appropriate standard format
(@code{!format_c}, @code{!format_i}, @code{!format_f} or
@code{!format_s}) is used.

Alias: @ref{string}

See also: @ref{fstring}, @ref{print}, @ref{!format_c}, @ref{!format_f},
@ref{!format_i}, @ref{!format_s}

@c -------------------------------------
@node strarr, strcount, str, Internal Routines
@subsection strarr
@findex strarr

@code{strarr( [size=@var{size},] @var{dimensions})}

Returns a string array of the specified @code{@var{dimensions}}.  The
latter may be an array containing the dimensions, or up to
@code{#max_dims} scalar arguments, each of which is a dimension.  If
@code{@var{size}} is specified (which must be done using the @code{size}
keyword), then it indicates the length that is assigned to each of the
elements; they are filled with whitespace.  If @code{@var{size}} is not
specified, then the elements of the array are initially empty, i.e., of
zero length.

See also: @ref{array}, @ref{bytarr}, @ref{intarr}, @ref{fltarr},
@ref{dblarr}, @ref{lonarr}, @ref{#max_dims}

@c -------------------------------------
@node strcount, stretch, strarr, Internal Routines
@subsection strcount
@findex strcount

@code{strcount(@var{s1}, @var{s2})}

Returns the number of times that string @code{@var{s2}} occurs
non-overlapping in @code{@var{s1}}.

@c -------------------------------------
@node stretch, string, strcount, Internal Routines
@subsection stretch
@findex stretch

@code{stretch(@var{image}, @var{grid})}

Stretches 2D @code{@var{image}} according to the displacement grid
@code{@var{grid}} as derived with @code{gridmatch}.

See also: @ref{gridmatch}

@c -------------------------------------
@node string, strlen, stretch, Internal Routines
@subsection string
@findex string

@code{string([ @var{format},] @var{arg} [, @dots{}, /skip_undefined])}

@code{string, @var{arg} [, @dots{}]}

With more than one argument, function @code{string} is a synonym of
@code{fstring}.  If only a single argument is specified, then this
argument may be a string, string array, or scalar.  With a scalar
argument, function @code{string} transforms the argument to an ascii
string under guidance of the appropriate standard format
(@code{!format_c}, @code{!format_i} or @code{!format_f}, and removes
initial whitespace.  With a string array argument, function
@code{string} returns a copy transformed to a single continuous string,
stringing all elements of @code{@var{arg}} together.  With a string
argument, function @code{string} just returns that (i.e., does nothing).

The subroutine form converts its arguments to text strings; scalars
(real or complex) are transformed to strings, and arrays (real or
complex) are transformed to string arrays.

In the future, the behavior of the one-argument @code{string} function
will be made compatible with the @code{string} subroutine.

See also: @ref{fstring}, @ref{print}, @ref{!format_c}, @ref{!format_i},
@ref{!format_f}

@c -------------------------------------
@node strlen, strloc, string, Internal Routines
@subsection strlen
@findex strlen

@code{strlen(@var{s})}

If @code{@var{s}} is a string, then this function returns the length of
the string (i.e., the number of characters in it).  If @code{@var{s}} is
a string array, then this function returns a numerical array with the
lengths of all strings from the string array.

@c -------------------------------------
@node strloc, strpbrk, strlen, Internal Routines
@subsection strloc
@findex strloc

@code{strloc(@var{s1}, @var{s2})}

Returns the part of the string @code{@var{s1}} that starts with the
substring @code{@var{s2}}, or an empty string.

See also: @ref{strpos}

@c -------------------------------------
@node strpbrk, strpos, strloc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection strpbrk
@findex strpbrk

@code{strpbrk(@var{s1}, @var{s2}}

Returns the part of string @code{@var{s1}} that starts with any
character from string @code{@var{s2}}.  If none of the characters from
@code{@var{s2}} occur in @code{@var{s1}}, then returns an empty string.

See also: @ref{strpos}, @ref{strloc}

@c -------------------------------------
@node strpos, strr, strpbrk, Internal Routines
@subsection strpos
@findex strpos

@code{strpos(@var{s1}, @var{s2}) [, @var{start}]}

Returns the position of substring @code{@var{s2}} in string
@code{@var{s1}}, if found, and @code{-1} otherwise.  If
@code{@var{start}} is specified, then start seeking at index
@code{@var{start}} in @code{@var{s1}}.  If @code{@var{start}} is less
than 0, then start at 0.  If @code{@var{start}} points beyond the end of
@code{@var{s1}}, then @code{-1} is returned.

See also: @ref{strloc}

@c -------------------------------------
@node strr, strreplace, strpos, Internal Routines
@subsection strr
@findex strr

@code{strr( @var{s1}, @var{s2}, @var{s3} [, @var{n}])}

Replace up to @code{@var{n}} occurrences of substring @code{@var{s2}} in
string @code{@var{s1}} with substring @code{@var{s3}}.  @code{@var{n}}
defaults to infinity.

Alias: @ref{strreplace}

@c -------------------------------------
@node strreplace, strskp, strr, Internal Routines
@subsection strreplace
@findex strreplace

@code{strreplace(@var{s1}, @var{s2}, @var{s3} [, @var{n}])}

Replace up to @code{@var{n}} occurrences of substring @code{@var{s2}} in
string @code{@var{s1}} with substring @code{@var{s3}}.  @code{@var{n}}
defaults to infinity.

Alias: @ref{strr}

@c -------------------------------------
@node strskp, strsub, strreplace, Internal Routines
@subsection strskp
@findex strskp

@code{strskp(@var{s1}, @var{s2})}

Returns the part of string @code{@var{s1}} which follows substring
@code{@var{s2}}, or an empty string.

@c -------------------------------------
@node strsub, strtok, strskp, Internal Routines
@subsection strsub
@findex strsub

@code{strsub(@var{s}, @var{i1}, @var{i2})}

Returns the part of string @code{@var{s}} consisting of elements
@code{@var{i1}} through @code{@var{i2}}.  Equivalent to
@code{@var{s}(@var{i1}:@var{i2})} and may therefore be removed from
future versions of LUX.

@c -------------------------------------
@node strtok, strtol, strsub, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection strtok
@findex strtok

@code{strtok( [@var{target},] @var{delimiters} [, /skip_final_delim])}

This function finds the next token in an installed string and returns
it.  The returned token consists of the next set of characters, if any,
that are not in string @code{delimiters}; or (if no such characters
remain in the installed string and if also @code{/skip_final_delim} has
not been chosen) of the remainder of the installed string (which
consists only of characters that are in @code{@var{delimiters}}); or (if
no characters at all remain) an empty string.

a new target string is installed (in the place of any older one) through
specification of @code{target}.  Each next call to @code{strtok} without
a @code{@var{target}} returns the next token from the last installed string.

Neither of the arguments is modified by calls to @code{strtok}, and
@code{@var{delimiter}} may have different values from call to call.

@c -------------------------------------
@node strtol, strtrim, strtok, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection strtol
@findex strtol

@code{strtol(@var{s} [, @var{base}])}

Returns the integer value read from the start of string @code{@var{s}}.
If @code{@var{base}} is specified, then it indicates the base relative
to which the value is to be read.  Valid bases are any between 2 and 36,
inclusive.  If @code{@var{base}} is not specified, then 10 (i.e.,
decimal) is assumed.

Alias: @ref{atol}

See also: @ref{eval}

@c -------------------------------------
@node strtrim, struct, strtol, Internal Routines
@subsection strtrim
@findex strtrim

@code{strtrim(@var{s})}

Returns string @code{@var{s}} with trailing blanks, tabs, and control
characters removed.

@c -------------------------------------
@node struct, student, strtrim, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection struct
@findex struct

@code{[@ref{develop} package]}

@c -------------------------------------
@node student, subshift, struct, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection student
@findex student

@code{student(@var{t}, @var{nu} [, /complement])}

Returns the value of the statistical Student's t function at ordinate
@code{@var{t}} for @code{@var{nu}} degrees of freedom, or one minus the
t function if @code{/complement} is specified.

If @code{r} is the sample cross-correlation coefficient of @code{n}
value pairs drawn from a bivariate normal distribution, then its
distribution function is equal to @code{student(sqrt((n - 2)*r^2/(1 -
r^2)), n - 2)}.

See also: @ref{crosscorr}, @ref{igamma}, @ref{ibeta}

@c -------------------------------------
@node subshift, subshiftc, student, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection subshift
@findex subshift

@code{subshift, @var{im1}, @var{im2}, @var{xoff}, @var{yoff}}

Determines the sub-pixel shift between two two-dimensional images
@code{@var{im1}} and @code{@var{im2}} and returns the found shift
(measured in pixels) in @code{@var{xoff}} and @code{@var{yoff}}.  This
routine favors execution speed over algorithm symmetry.

See also: @ref{gridmatch}, @ref{subshiftc}

@c -------------------------------------
@node subshiftc, sun_b, subshift, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection subshiftc
@findex subshiftc

@code{subshiftc, @var{im1}, @var{im2}, @var{xoff}, @var{yoff} [,
@var{apod}]}

Determines the sub-pixel shift between two two-dimensional images
@code{@var{im1}} and @code{@var{im2}} and returns the found shift
(measured in pixels) in @code{@var{xoff}} and @code{@var{yoff}}.  If
@code{@var{apod}} is specified, then apodization is applied to the
compared images.  The merit value (i.e., the measure of goodness) is
returned in global variable @code{!meritc}.  This routine favors
algorithm symmetry over execution speed; i.e., the results for a
positive shift are nearly equal to the results for the corresponding
negative shift.

See also: @ref{gridmatch}, @ref{subshift}, @ref{!meritc}

@c -------------------------------------
@node sun_b, sun_d, subshiftc, Internal Routines
@subsection sun_b
@findex sun_b

@code{sun_b(@var{doy}, @var{year})}

Returns the solar b angle in radians for day-of-year @code{@var{doy}}
(@code{scalar} or @code{array}) and @code{scalar} year @code{@var{year}}
(since 1900).

See also: @ref{sun_d}, @ref{sun_p}, @ref{sun_r}

@c -------------------------------------
@node sun_d, sun_p, sun_b, Internal Routines
@subsection sun_d
@findex sun_d

@code{sun_d(@var{doy}, @var{year})}

Returns the solar d angle in radians for day-of-year @code{@var{doy}}
(@code{scalar} or @code{array}) and @code{scalar} year @code{@var{year}}
(since 1900).

See also: @ref{sun_b}, @ref{sun_p}, @ref{sun_r}

@c -------------------------------------
@node sun_p, sun_r, sun_d, Internal Routines
@subsection sun_p
@findex sun_p

@code{sun_p(@var{doy}, @var{year})}

Returns the solar p angle in radians for day-of-year @code{@var{doy}}
(@code{scalar} or @code{array}) and @code{scalar} year @code{@var{year}}
(since 1900).

See also: @ref{sun_b}, @ref{sun_d}, @ref{sun_r}

@c -------------------------------------
@node sun_r, svd, sun_p, Internal Routines
@subsection sun_r
@findex sun_r

@code{sun_r(@var{doy}, @var{year})}

Returns the Sun's radius in arcseconds for day-of-year @code{@var{doy}}
(@code{scalar} or @code{array}) and @code{scalar} year @code{@var{year}}
(since 1900).

See also: @ref{sun_b}, @ref{sun_d}, @ref{sun_p}

@c -------------------------------------
@node svd, swab, sun_r, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection svd
@findex svd

@code{svd, @var{m}, @var{u2}, @var{s2}, @var{v2}}
   
Calculates the 'thin' singular value decomposition of matrix
@code{@var{m}}, which is easier to calculate and takes less storage
than the 'full' singular value decomposition.  @code{@var{m}} must be
of a real (non-complex) data type.

If @code{@var{m}} is an m-by-n matrix (has m rows and n columns), then
@code{@var{m} = @var{u} # @var{s} # transpose(@var{v})} is the 'full'
singular value decomposition of @code{@var{m}}, where @code{@var{u}}
is an m-by-m orthonormal matrix, @code{@var{s}} is an m-by-n matrix
with nonnegative numbers on the diagonal and zeros elsewhere, and
@code{@var{v}} is an n-by-n orthonormal matrix.  The diagonal entries
of @code{@var{s}} are the singular values of @code{@var{m}}

In @code{@var{s2}} is returned a vector containing the min(n,m)
singular values of @code{@var{m}} in non-increasing order.

If m = n, then returned @code{@var{u2}} and @code{@var{v2}} have the
same dimensions as @code{@var{m}}, and @code{@var{u2}} is
@code{@var{u}}, and @code{@var{v2}} is @code{@var{v}}.  In that case,
the 'thin' singular value decomposition is equal to the 'full'
singular value decomposition.

If m > n, then @code{@var{u2}} is @code{@var{u}} except that the
rightmost columns of @code{@var{u}} beyond the first min(m,n) columns
are omitted.  These correspond to the bottommost all-zero rows of
@code{@var{s}}.  @code{@var{u2}} has the same dimensions as
@code{@var{m}}.  @code{@var{v2}} is @code{@var{v}}.  Then
@code{@var{m} = @var{u2} # mdiagonal(@var{s2}) # transpose(@var{v2}}.

If m < n, then @code{@var{m} = transpose(@var{u2}) #
mdiagonal(@var{s2}) # @var{v2}}.  In that case, @code{@var{v2}}
is @code{@var{v}} except that the bottommost rows of @code{@var{v}}
beyond the first min(m,n) rows are omitted.  These correspond to the
rightmost all-zero columns of @code{@var{s}}.  @code{@var{v2}} has the
same dimensions as @code{@var{m}}.  @code{@var{u2}} is the transpose
of @code{@var{u}}.

See also: @ref{mdiagonal}, @ref{transpose}

@menu
* svd Applications::
@end menu

@c -------------------------------------
@node svd Applications,  , svd, svd
@comment  node-name,  next,  previous,  up
@subsubsection svd Applications

Applications of the singular value decomposition:

a nonnegative real number @code{s} is a singular value of matrix
@code{m} if there exist unit-length vectors @code{u} and @code{v} such
that @code{m # v = s * u} and @code{transpose(m) # u = s * v}.
@code{u} and @code{v} are then called the left-singular and
right-singular vectors for @code{s}.  After @code{svd, m, u2, s2, v2},
the elements of @code{s2} are the singular values of @code{m}.

The pseudo-inverse of matrix @code{m} with singular value
decomposition @code{m = u2 # mdiagonal(s2) # transpose(v2)} is
equal to @code{Mpi = v2 # mdiagonal(Spi) # transpose(u2)}, where
vector @code{Spi} is obtained from vector @code{s2} by replacing each
non-zero element by its reciprocal.  The solution of the linear
least-squares problem @code{m # b = y} is @code{bs = Mpi # y}, but
going through the pseudoinverse is not the most efficient method of
solving the least-squares problem.

The unit vector @code{x} that yields the smallest @code{m # x} is the
right singular vector of @code{m} corresponding to the smallest
singular value.

The null space of matrix @code{m} is spanned by the right singular
vectors corresponding to vanishing singular values of @code{m}.  The
range of matrix @code{m} is spanned by the left singular vectors
corresponding to non-zero singular values of @code{m}.  The rank of
matrix @code{m} equals the number of non-zero singular values.

The matrix @code{Mr} of rank @code{r} that best approximates matrix
@code{m} (by minimizing the Frobenius norm of the difference) is
@code{Mr = u2 # mdiagonal(Sr) # transpose(v2)} where @code{Sr} is
the same as @code{s2} but has all singular values beyond the first
@code{r} set to zero.

The orthonormal matrix @code{r} closest to @code{m} (under the
Frobenius norm) is @code{u # transpose(v)} -- i.e., has all singular
values replaced by 1.

The orthonormal matrix @code{r} which most closely maps @code{a} to
@code{b} (for the orthogonal Procrustes problem) is the nearest
orthonormal matrix to @code{transpose(a) # b}.

@c -------------------------------------
@node swab, swapb, svd, Internal Routines
@subsection swab
@findex swab

@code{swab, @var{x}}

Swap bytes in @code{@var{x}}.

Alias: @ref{swapb}

See also: @ref{endian}

@c -------------------------------------
@node swapb, swaphalf, swab, Internal Routines
@subsection swapb
@findex swapb

@code{swapb, @var{x}}

Swap bytes in @code{@var{x}}.

Alias: @ref{swab}

See also: @ref{endian}

@c -------------------------------------
@node swaphalf, switch, swapb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection swaphalf
@findex swaphalf

@code{swaphalf, @var{data}}

Swaps elements in numerical array @code{@var{data}} such that each new
coordinate @code{y} of an element of @code{@var{data}} is related to the
old coordinate @code{x} by @code{y = x + n/2 mod n/2}, where @code{n} is
the number of elements in the current dimension.  This swapping is
useful for data returned by certain fft and Hartley transform routines,
which return the central point of the transform in element number 0.
When @code{swaphalf} is used on such data, then the central element ends
up in the center of the data (at coordinates equal to @code{n/2} for
each dimension) and the length of the wavevector is proportional to the
cartesian distance of the associated element to that central point.

@code{swaphalf} works only on arrays that have even dimensions only.
@code{shift, @code{@var{data}}} yields the same result as
@code{swaphalf, @code{@var{data}}}, except that @code{shift} works for
odd-sized dimensions, too, and is 4 - 5 times slower than
@code{swaphalf}.

See also: @ref{fft}, @ref{shift}

@c -------------------------------------
@node switch, symbol, swaphalf, Internal Routines
@subsection switch
@findex switch

@code{switch, @var{var1}, @var{var2}}

Switch the values of @code{@var{var1}} and @code{@var{var2}}.

@c -------------------------------------
@node symbol, symclass, switch, Internal Routines
@subsection symbol
@findex symbol

@code{symbol( @var{name} [, /main])}

Returns the symbol with the indicated @code{@var{name}} (a string),
either at the main execution level (if @code{/main} is specified) or at
the current execution level.  If such a symbol does not yet exist, then
one is created either if we're currently at the main execution level, or
if @code{/main} is specified.  Otherwise, and error is generated.

See also: @ref{pointer}, @ref{varname}

@c -------------------------------------
@node symclass, symdtype, symbol, Internal Routines
@subsection symclass
@findex symclass

@code{symclass(@var{symbol} [, /follow])}

Returns the symbol class of @code{@var{symbol}}.  By default, pointers
are evaluated so that the symbol class of the pointer's target is
returned.  Use @code{symclass(@code{@var{symbol}}, /nofollow)} to check
if a symbol is itself a pointer.

See also: @ref{symdtype}, @ref{dimen}, @ref{num_elem},
@ref{num_dim}, @ref{isarray}, @ref{isscalar}, @ref{isstring},
@ref{classname}, @code{@var{#class}} 

@c -------------------------------------
@node symdtype, symmem, symclass, Internal Routines
@subsection symdtype
@findex symdtype

@code{symdtype(@var{symbol})}

Returns the data type number of @code{@var{symbol}}.

See also: @ref{symclass}, @ref{dimen}, @ref{num_elem},
@ref{num_dim}, @ref{typename}, @code{@var{#type}} 

@c -------------------------------------
@node symmem, symnum, symdtype, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection symmem
@findex symmem

@code{symmem()}

Returns the total of the memory allocated for certain LUX symbols -
which is not the same as the total memory allocated for LUX.

@c -------------------------------------
@node symnum, t, symmem, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection symnum
@findex symnum

@code{symnum(@var{arg})}

Returns the symbol number of @code{@var{arg}}.

@c -------------------------------------
@node t, table, symnum, Internal Routines
@subsection t
@findex t

@code{t, @var{x} [, @dots{}, /join]}

Displays the contents of the arguments on the screen.  Up to
@code{@var{#max_args}} arguments may be specified.  A newline character
is printed after all arguments are serviced, except when keyword
@code{/join} is specified,

Alias: @ref{print}, @ref{ty}, @ref{type}

See also: @ref{printf}, @ref{In-Line Print Formats}, @ref{#max_args}

@c -------------------------------------
@node table, taitt, t, Internal Routines
@subsection table
@findex table

@code{table(@var{x}, @var{y} [, @var{index}], @var{xnew} [, /all,
/middle])} 

@code{table} interpolates in table @code{@var{y}} vs. @code{@var{x}} at
positions @code{@var{xnew}}.  The first dimension of @code{@var{x}} and
@code{@var{y}} specifies the entries in one interpolation table.  Second
and higher dimensions of @code{@var{x}} and @code{@var{y}} specify
individual interpolation tables.  @code{@var{x}} must be in ascending
order in its first dimension.  Dimensions shared between @code{@var{x}}
and @code{@var{y}} must be equal.  Variables are repeated to accomodate
omitted dimensions.  For example, if @code{@var{x}} has dimensions
@code{[2,3]} and @code{@var{y}} dimensions @code{[2,3,4,2]} then
@code{@var{x}} is repeated as needed to accomodate the third and fourth
dimensions of @code{@var{y}} so that @code{@var{x}} effectively has the
same dimensions as @code{@var{y}}.

If no @code{@var{index}} is specified, then keyword @code{/all}
indicates that all values of @code{@var{xnew}} are to be used on each
interpolation table.  In that case, the result will have all expect the
first of the (implied) dimensions of @code{@var{x}} and @code{@var{y}},
and all the dimensions of @code{@var{xnew}}, too.

If keyword @code{/all} is not specified, then each one-dimensional
vector from @code{@var{xnew}} (e.g., @code{@var{xnew}}(*,2)) is applied
to each next interpolation vector pair from @code{@var{x}} and
@code{@var{y}} (e.g., @code{@var{x}}(*,2) and @code{@var{y}}(*,2)).  In
that case the second and higher dimensions of @code{@var{xnew}} must
match the second and higher dimensions of @code{@var{x}} and
@code{@var{y}}, and the result will have the same dimensions (real or
implied) as @code{@var{xnew}}.  For example, if @code{@var{x}} has
dimensions @code{[2,3]}, @code{@var{y}} dimensions @code{[2,3,5]}, and
@code{@var{xnew}} dimensions @code{[4,3]}, then the result will have
dimensions @code{[4,3,5]}.

If @code{@var{index}} is specified, then it must be an array and each
element of it determines which interpolation table (counting all
dimensions of @code{@var{x}}, @code{@var{y}} except the first one) to
use for the corresponding element of @code{@var{xnew}}.  In that case,
dimensions shared between @code{@var{index}} and @code{@var{xnew}} must
be equal.  Non-integer elements of @code{@var{index}} are treated with
linear interpolation.  The result gets all dimensions of the largest of
@code{@var{xnew}} and @code{@var{index}}.

Keyword @code{/middle} (set by default) specifies that searching
@code{@var{x}} for a value of @code{@var{xnew}} starts in the middle
(and can then proceed either toward the beginning or the end of the
interpolation table).  If @code{/nomiddle} is specified, then searching
starts at the beginning.

In earlier versions of LUX, a routine @code{polate} was available for
linear interpolation.  This older routine has now been superseded by
@code{table}, and @code{polate} is now an alias of @code{table}.

Alias: @ref{polate}

See also: @ref{tense}

@c -------------------------------------
@node taitt, taiut1, table, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection taitt
@findex taitt

@code{taitt(@var{jdtai})}

[SOFA] Translates Julian Date @code{@var{jdtai}} from TAI to TT.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node taiut1, taiutc, taitt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection taiut1
@findex taiut1

@code{taiut1(@var{jdtai}, @var{dta})}

[SOFA] Translates Julian Date @code{@var{jdtai}} from TAI to UT1,
given @code{@var{dta}} = UT1 - TAI in seconds.  The arguments must
have the same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node taiutc, tai_from_date, taiut1, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection taiutc
@findex taiutc

@code{taiutc(@var{jdtai})}

[SOFA] Translates Julian Date @code{@var{jdtai}} from TAI to UTC.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tai_from_date, tan, taiutc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tai_from_date
@findex tai_from_date

@code{tai_from_date(@var{year}, @var{day-of-year}, @var{hour}, @var{minute},
@var{second})}

Returns the number of TAI seconds since 31 December 1976 at 23:59:45 UTC
(= 1 January 1977 at 0:00:00 TAI) of the moment specified by the UTC
arguments.

Reverse: @ref{date_from_tai}

@c -------------------------------------
@node tan, tanh, tai_from_date, Internal Routines
@subsection tan
@findex tan

@code{tan(@var{x})}

Returns the tangent of @code{@var{x}} (which is in radians).

Reverse: @ref{atan}, @ref{atan2}

See also: @ref{sin}, @ref{cos}, @ref{#deg}

@c -------------------------------------
@node tanh, tapebufin, tan, Internal Routines
@subsection tanh
@findex tanh

@code{tanh(@var{x})}

Returns the hyperbolic tangent of @code{@var{x}}.

See also: @ref{cosh}, @ref{sinh}

@c -------------------------------------
@node tapebufin, tapebufout, tanh, Internal Routines
@subsection tapebufin
@findex tapebufin

@code{tapebufin, @var{tape_unit}, @var{array} [, @var{recsize},
@var{offset}, @var{len}]}

@code{[@ref{tape}]} Reads asynchronously from a tape at tape unit
@code{@var{tape_unit}} into array @code{@var{array}}.  The record size
@code{@var{recsize}} defaults to 32768 bytes.  The offset at which to
start writing into @code{@var{array}} defaults to 0, and the number of
bytes to read, @code{@var{len}}, defaults to the size of the array.  The
array is written as if it is a @code{byte} array.

See also @ref{tapebufout}

@c -------------------------------------
@node tapebufout, tape_status, tapebufin, Internal Routines
@subsection tapebufout
@findex tapebufout

@code{tapebufout, @var{tape_unit}, @var{array} [, @var{recsize},
@var{offset}, @var{len}]}

@code{[@ref{tape}]} Writes asynchronously from array @code{@var{array}}
to a tape at tape unit @code{@var{tape_unit}}.  The record size
@code{@var{recsize}} defaults to 32768 bytes.  The offset in
@code{@var{array}} from which to start writing defaults to 0, and the
number of bytes to write, @code{@var{len}}, defaults to the size of the
array.  The array is treated as if it is a @code{byte} array.

See also @ref{tapebufin}

@c -------------------------------------
@node tape_status, taprd, tapebufout, Internal Routines
@subsection tape_status
@findex tape_status

@code{tape_status}

@code{[@ref{tape}]} Prints a report on the status of the tape units.

@c -------------------------------------
@node taprd, tapwrt, tape_status, Internal Routines
@subsection taprd
@findex taprd

@code{taprd, @var{lun}, @var{array}}

@code{[@ref{tape}]} Reads data from tape unit @code{@var{lun}} to fill
array @code{@var{array}}.

See also: @ref{tapwrt}, @ref{tapebufin}, @ref{tapebufout}

@c -------------------------------------
@node tapwrt, tcbtdb, taprd, Internal Routines
@subsection tapwrt
@findex tapwrt

@code{tapwrt, @var{lun}, @var{array}}

@code{[@ref{tape}]} Writes the contents of array @code{@var{array}} to
the tape on unit @code{@var{lun}}.

See also: @ref{taprd}, @ref{tapebufout}, @ref{tapebufin}

@c -------------------------------------
@node tcbtdb, tcgtt, tapwrt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tcbtdb
@findex tcbtdb

@code{tcbtdb(@var{jdtcb})}

[SOFA] Translates Julian Date @code{@var{jdtcb}} from tcb to TDB.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tcgtt, tdbtcb, tcbtdb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tcgtt
@findex tcgtt

@code{tcgtt(@var{jdtcg})}

[SOFA] Translates Julian Date @code{@var{jdtcg}} from tcg to TT.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tdbtcb, tdbtt, tcgtt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tdbtcb
@findex tdbtcb

@code{tdbtcb(@var{jdtdb})}

[SOFA] Translates Julian Date @code{@var{jdtdb}} from TDB to tcb.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tdbtt, temporary, tdbtcb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tdbtt
@findex tdbtt

@code{tdbtt(@var{jdtdb}, @var{dtr})}

[SOFA] Translates Julian Date @code{@var{jdtbd}} from TDB to TT, given
@code{@var{dtr}} = TDB - TT in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node temporary, tense, tdbtt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection temporary
@findex temporary

@code{temporary(@dots{})}

@c -------------------------------------
@node tense, tense_curve, temporary, Internal Routines
@subsection tense
@findex tense

@code{tense(@var{x}, @var{y}, @var{xf} [, @var{tension}][, @var{dlhs},
@var{drhs}])}

Interpolates functions using splines under tension, and returns the
y-coordinates of the interpolated points.  The input points have
coordinates @code{(@var{x}, @var{y})} (@code{array}s), and
@code{@var{x}} must be in ascending order.  The interpolation is
performed at x coordinates @code{@var{xf}}.  @code{@var{tension}}
governs the tenseness of the interpolation curve.  It defaults to 1 and
must not be smaller.  @code{@var{dlhs}} and @code{@var{drhs}} are the
desired first derivatives at the left-hand and right-hand sides,
respectively.

See also: @ref{tense_curve}, @code{@var{tense_loop}}

@c -------------------------------------
@node tense_curve, tense_loop, tense, Internal Routines
@subsection tense_curve
@findex tense_curve

@code{tense_curve(@var{x}, @var{y}, @var{xf} [, @var{tension}][,
@var{dlhs}, @var{drhs}])}

Interpolates arbitrary open curves using splines under tension, and
returns a 2D array containing the x and y coordinates of the
interpolated points.  The input points have coordinates @code{(@var{x},
@var{y})} (@code{array}s), and @code{@var{x}} must be in ascending
order.  The interpolation is performed at points determined by the
fraction of curve length from the start, @code{@var{xf}}, which ranges
between 0 and 1.  @code{@var{tension}} governs the tenseness of the
interpolation curve.  It defaults to @code{1} and must not be smaller.
@code{@var{dlhs}} and @code{@var{drhs}} are the desired first
derivatives at the left-hand and right-hand sides, respectively.

See also: @ref{tense}, @ref{tense_loop}

@c -------------------------------------
@node tense_loop, threecolors, tense_curve, Internal Routines
@subsection tense_loop
@findex tense_loop

@code{tense_loop(@var{x}, @var{y}, @var{xf} [, @var{tension}])}

Interpolates closed curves using splines under tension, and returns a 2d
array containing the x and y coordinates of the interpolated points.
The input points have coordinates @code{(@var{x}, @var{y})}
(@code{array}s).  The interpolation is performed at points determined by
the fraction of curve length from the start, @code{@var{xf}}, which
ranges between @code{0} and @code{1}.  @code{@var{tension}} governs the
tenseness of the interpolation curve.  It defaults to @code{1} and must
not be smaller.

See also: @ref{tense}, @ref{tense_curve}

@c -------------------------------------
@node threecolors, tolookup, tense_loop, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection threecolors
@findex threecolors

@code{threecolors [, @var{argument}]}

@code{[@ref{x11}]} Installs or uninstalls the "three-colors" color table,
which has three sections.  If the @code{@var{argument}} is a scalar,
then the color table's sections are grey, red, and blue, respectively,
and the value of @code{@var{argument}} indicates the contrast level of
the red and blue sections.  A value of @code{1} corresponds to full
contrast, and values close to @code{0} correspond to hardly any
contrast.  A value of @code{0} uninstalls the "three-colors" color table
in favor of a standard greyscale table.

If the @code{@var{argument}} is a numerical array, then it must have
nine elements, which govern the bottom, middle, and top sections of the
color table in groups of three numbers.  The first of each three numbers
specifies the amount of red in the color table section, the second one
the amount of green, and the third one the amount of blue.  The amounts
must be between @code{-1} and @code{+1}.  Positive numbers indicate that
the intensity level runs from 0 to the indicated fraction, and negative
numbers indicate that the intensity level runs from one minus the
indicated fraction to one.  Scalar @code{@var{argument}} equal to
@code{@var{f}} is equivalent to an array @code{@var{argument}} equal to
@code{[1.0, 1.0, 1.0, -@var{f}, 0.0, 0.0, 0.0, 0.0, -@var{f}]}.

The "three-color" color table is used by the @code{tv3} and @code{zoom}
routines.  If @code{tv} is used with the three-color color table, then
only colors from the lowest section of the color table are displayed.

See also: @ref{tv3}, @ref{tvlct}, @ref{zoom}

@c -------------------------------------
@node tolookup, total, threecolors, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tolookup
@findex tolookup

@code{tolookup, @var{src}, @var{list}, @var{index}}

Determines a lookup table for @code{@var{src}} in @code{@var{list}} such
that @code{@var{list}} contains no duplicate members, and
@code{@var{index}} contains an index to the member of @code{@var{list}}
that corresponds to each member of @code{@var{src}}.

If @code{@var{src}} has only one dimension, then @code{@var{index}} has
the same number of elements as @code{@var{src}}, and @code{@var{list}}
has the number of elements equal to the number of unique members of
@code{@var{src}}.  In that case, @code{@var{list}(@var{index})} is an
exact copy of @code{@var{src}}.

If @code{@var{src}} has more than one dimension, then its last dimension
is taken to contain the numbers that define each member, and the
remaining dimensions select the different members.  In that case,
@code{@var{list}} gets two dimensions: the first one loops over all
unique members, the second one contains the defining numbers for each
member (and has the same dimension as the last dimension of
@code{@var{list}}).  Then, @code{@var{index}} gets all but the last
dimension of @code{@var{src}}.

For example, if @code{@var{src}} is a 2 by 3 by 4 array, then it is
taken to contain six (2 times 3) individual members which are each
characterized by 4 numbers (e.g., the second member is
@code{@var{src}(1,0,*)}).  If there are three unique 4-element members
in @code{@var{src}}, then
@code{tolookup,@var{src},@var{list},@var{index}} yields
@code{@var{list}} as a 3 by 4 array and @code{@var{index}} as a 2 by 3
array.  In that case, @code{@var{src}(0,0,*)} is equal to
@code{@var{list}(@var{index}(0,0))}, and @code{@var{src}(1,2,*)} to
@code{@var{list}(@var{index}(1,2))}, and in general @code{@var{src}}
equal to @code{@var{list}(@var{index},*)}.

@c -------------------------------------
@node total, tr, tolookup, Internal Routines
@subsection total
@findex total

@code{total(@var{x} [, @var{mode}, power=@var{power},
weights=@var{weights}, /float, /double, /keepdims])}

By default, returns the sum of numerical array @code{@var{x}}.  The
arguments, keywords, and type and dimensions of the result are exactly
the same as for the @code{mean} function.

See also: @ref{hist}, @ref{mean}, @ref{dsum}, @ref{fsum}

@c -------------------------------------
@node tr, trace, total, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tr
@findex tr

@code{tr(@var{r})}

[SOFA] Transposes r-matrix @code{@var{r}}, which must have its first
two dimensions equal to 3.  The result has the same dimensions as
@code{@var{r}}.

@c -------------------------------------
@node trace, trace_decoder, tr, Internal Routines
@subsection trace
@findex trace

@code{trace [, @var{level}][, /file, /loop, /block, /routine, /all,
/showstats, /cputime, /showexec, /enter]} 

Starts tracing.  When tracing, all statements are displayed just before
execution, complete with line numbers in the innermost enclosing
subroutine, function, block routine, or file, if the current execution
level is less deep than or equal to the current threshold level.
Keywords:

@table @code
@item /file
to trace into @@files.
@item /loop
to trace into any kind of loop (repeat, for, etc.).
@item /block
to trace into @{@}-delimited blocks.
@item /routine
to trace into user-defined subroutines, functions, and block routines.
@item /all
to trace all of the above.
@item /showstats
to also display @code{showstats} information.
@end table

The LUX code is displayed with variable names and function words (such
as @code{for} and @code{else} in uppercase letters.  Variables that have
an undefined value get a question mark affixed.  Explicit numbers are
displayed with markers that indicate their data type: @code{byte} and
@code{word} numbers get a @code{b} or @code{w} affixed, @code{double}
numbers have a @code{d} marker either to indicate the start of the
exponent, or else at their very end, @code{long} numbers have no
explicit marker, and @code{float} numbers have a decimal point and/or an
@code{e} to indicate the start of the exponent.  If a new file is opened
from which to read LUX code, then this is reported.  If a user-defined
subroutine or function is entered or exited, then this is reported only
if tracing in that subroutine or function is enabled.

If you wish to go through the statements step by step, then use
@ref{step}.

See also: @ref{atomize}, @ref{dump}, @ref{show}, @ref{echo}, @ref{step},
@ref{showstats}

@c -------------------------------------
@node trace_decoder, trajectory, trace, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection trace_decoder
@findex trace_decoder

@c -------------------------------------
@node trajectory, transpose, trace_decoder, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection trajectory
@findex trajectory

@code{trajectory, @var{gx}, @var{gy}, @var{vx}, @var{vy} [[, @var{n}],
@var{ox}, @var{oy}]}

@code{trajectory, @var{gx}, @var{gy}, @var{v} [[, @var{n}], @var{ox},
@var{oy}]}

@code{[@ref{develop} package]} Calculates trajectories of particles
under guidance of a specified flow field.  The two starting coordinates
of each particle are taken from @code{@var{gx}} and @code{@var{gy}}
which must be real numerical arrays with the same number of elements.
The velocity field which guides the particles has coordinates either
given by two arguments @code{@var{vx}} and @code{@var{vy}}, or by a
single argument @code{@var{v}}.  @code{@var{vx}} and @code{@var{vy}}
must be two-dimensional real numerical arrays with the same dimensional
structures.  Alternatively, @code{@var{v}} must be a three-dimensional
real numerical array with 2 elements in its first dimension (which count
the x and y coordinates).

The coordinates in @code{@var{gx}} and @code{@var{gy}} are interpreted
such that the first velocity vector resides at coordinates @code{(0,0)}
and the second one at @code{(1,0)}.

If @code{@var{n}} is specified, then it must be a scalar that indicates
(after transformation of its value to type @code{long}) over how many
time steps the particles are to be followed.  The integer value of
@code{@var{n}} must be positive.

If @code{@var{ox}} and @code{@var{oy}} are specified, then they must be
named writeable variables, and the resulting coordinates are returned in
them.  If these arguments are not specified, then @code{@var{n}} cannot
be specified either (and a value of 1 is taken for it), and then the
results are returned in @code{@var{gx}} and @code{@var{gy}}.  The
results get all dimensions of @code{@var{gx}}, plus one dimension at the
beginning equal to @code{@var{n}} (but only if @code{@var{n}} is greater
than 1).

Currently, the flow field depends only on the integer part of the
coordinates.  In other words, there is no interpolation of the flow
field for non-integer coordinates, and the flow vectors may change
discontinuously when one crosses an integer coordinate line.  The
trajectory within each integer-coordinate box is a straight line with a
direction corresponding to the flow vector.  Because of the
discontinuous flow field, it is possible that the velocity on both sides
of an integer coordinate line points to the other side of the coordinate
line.  Any trajectory that reaches such an integer coordinate line stops
there.

@c -------------------------------------
@node transpose, trend, trajectory, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection transpose
@findex transpose

@code{transpose(@var{matrix})}

Returns a copy of the given @code{@var{matrix}}, with the first two
dimensions transposed.  @code{@var{matrix}} must have at least 2
dimensions.  If @code{@var{y} = transpose(@var{x})}, then
@code{@var{y}(@var{i},@var{j}) = @var{x}(@var{j},@var{i})}.

@c -------------------------------------
@node trend, tri_name_from_tai, transpose, Internal Routines
@subsection trend
@findex trend

@code{trend(@var{x} [, @var{n}])}

Returns an @code{@var{n}}th-degree polynomial fit to @code{@var{x}}.

See also: @ref{detrend}

@c -------------------------------------
@node tri_name_from_tai, trxp, trend, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tri_name_from_tai
@findex tri_name_from_tai

@c -------------------------------------
@node trxp, trxpv, tri_name_from_tai, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection trxp
@findex trxp

@code{trxp(@var{r}, @var{p})}

[SOFA] Multiply p-vector @code{@var{p}} (which must have its first
dimension equal to 3) by the transpose of r-matrix @code{@var{r}}
(which must have its first two dimensions equal to 3).  The dimensions
of @code{@var{r}} beyond the first two must be the same as the
dimensions of @code{@var{p}} beyond the first one.  The result has the
same dimensions as @code{@var{p}}.

@c -------------------------------------
@node trxpv, tttai, trxp, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection trxpv
@findex trxpv

@code{trxpv(@var{r}, @var{pv})}

[SOFA] Multiply pv-vector @code{@var{pv}} (which must have its first
two dimensions equal to 2 and 3, respectively) by the transpose of
r-matrix @code{@var{r}} (which must have its first two dimensions
equal to 3).  The dimensions of @code{@var{r}} beyond the first two
must be equal to the dimensions of @code{@var{pv}} beyond the first
two.  The result has the same dimensions as @code{@var{pv}}.

@c -------------------------------------
@node tttai, tttcg, trxpv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tttai
@findex tttai

@code{tttai(@var{jdtt})}

[SOFA] Transforms Julian Date @code{@var{jdtt}} from TT to tai.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tttcg, tttdb, tttai, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tttcg
@findex tttcg

@code{tttcg(@var{jdtt})}

[SOFA] Transforms Julian Date @code{@var{jdtt}} from TT to tcg.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tttdb, ttut1, tttcg, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tttdb
@findex tttdb

@code{tttdb(@var{jdtt}, @var{dt})}

[SOFA] Transforms Julian Date @code{@var{jdtt}} from TT to TDB, given
@code{@var{dt}} = TDB - TT in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ttut1, tv, tttdb, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ttut1
@findex ttut1

@code{ttut1(@var{jdtt}, @var{dt})}

[SOFA] Transforms Julian Date @code{@var{jdtt}} from TT to UT1, given
@code{@var{dt}} = TT - UT1 in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node tv, tv3, ttut1, Internal Routines
@subsection tv
@findex tv

@code{tv, @var{image} [, x=@var{x}, y=@var{y}, window=@var{window},
scale=@var{scale}] [, /dev, /dvi, /img, /plt, /rim, /rpl] [, /pdev,
/screen, /postscript, /plotwindow, /zoom, /center, /bit24]}

@code{[@ref{x11}]} Displays an image.

Parameters:
@table @code
@item @var{image}
The image to display.  It must be a two-dimensional non-complex
numerical array, except if @code{/bit24} is specified (see below).  If
@code{@var{image}} is a @code{byte} array, then it is taken to contain
indices into the color map and @code{tv} acts like @code{tvmap}.
Otherwise, the image values are scaled for maximum image contrast.
@item @var{x}, @var{y}
The coordinates at which the image is to be displayed.  They must be
scalars.  The coordinate system is determined by some of the keywords
(see below).  If these parameters are not specified, then the image is
displayed at coordinates @code{!tvix, !tviy}.
@item @var{window}
The window or pixmap in which the image is to be displayed.  It must be
a scalar, between @code{-#max_pixmap} and @code{#max_window}
(inclusive).  If this parameter is not specified, then the value from
@code{!window} is used.
@item @var{scale}
The scale at which the image is to be displayed.  This must be a
nonnegative scalar.  A value of @code{0} (or @code{/noscale}) yields the
images's natural size (with one array element corresponding to one
pixel).  A value of @code{1} (or @code{/scale}) yields the greatest
integer scale value that still allows display of the whole image within
the window.  Any other value (either smaller or greater than 1) yields
an image that is scaled by that factor relative to its natural
dimensions.  If @code{@var{scale}} is greater than 1, then interpolation
is used in generating the expanded view.  The type of interpolation is
governed by @code{!tvsmt}.  If this argument is not specified, then the
value from @code{!tvscale} is used.  If @code{/zoom} or
@code{/plotwindow} are specified, then this argument is ignored.
@end table

Keywords:
@table @code
@item /dev, /dvi, /img, /plt, /rim, /rpl
These keywords specify the coordinate system in which the position of
the image is interpreted.  The default is the device-dependent
(@code{dev}) system.
@item /pdev, /screen, /postscript
These keywords specify where the image is sent.  @code{/screen} selects
display on the screen, @code{/postscript} selects sending to the
PostScript file indicated by @code{!ps_file}, and @code{/pdev} selects
the target based on the value of @code{!pdev}.  By default,
@code{/screen} is assumed. 
@item /plotwindow
If this keyword is selected, then the image fills the current plot
window (governed by @code{!wxb, !wxt, !wyb, !wyt}).
@item /zoom
If this keyword is selected, then that part of the image is displayed
that corresponds to the last use of @code{zoom} (governed by
@code{!zoomx, !zoomy, !zoommag}).
@item /center
If this keyword is selected, then the @code{@var{x}} and @code{@var{y}}
coordinates refer to the center of the image rather than its lower
left-had corner.
@item /bit24
If this keyword is selected, then @code{@var{image}} must be a
three-dimensional non-complex array with 3 elements in the third
dimension.  Then the third dimension selects the red, green, and blue
components for each pixel in the image.  This keyword is only useful
if a 24-bit visual is used (@ref{xopen}).
@end table

Affected system variables:
@table @code
@item !tvix
The @code{dev} x coordinate of the left edge of the image.
@item !tvixb
The @code{dev} x coordinate of the right edge of the image.
@item !tviy
The @code{dev} y coordinate of the bottom edge of the image.
@item !tviyb
The @code{dev} y coordinate of the top edge of the image.
@item !tvscale
The used magnification scale, if any.  This variable is unaffected if
@code{/plotwindow} is set.
@end table

For backward compatibility with older versions of LUX, if
@code{set,/ulimcoords} has been executed beforehand, then the position
@code{(@var{x},@var{y})} is counted from the upper left-hand corner
instead, and images are shown with their y coordinate increasing
downward rather than upward.

Alias: @ref{xtv}

See also: @ref{#max_pixmap}, @ref{#max_window}, @ref{!pdev},
@ref{!ps_file}, @ref{set}, @ref{Screen Coordinates}, @ref{tvmap},
@ref{!tvix}, @ref{!tvixb}, @ref{!tviy}, @ref{!tviyb}, @ref{tvraw},
@ref{!tvscale}, @ref{!tvsmt}, @ref{!window}, @ref{!wxb}, @ref{!wxt},
@ref{!wyb}, @ref{!wyt}, @ref{xcopy}, @ref{xopen}, @ref{xsetaction},
@ref{xtvread}, @ref{!zoomx}, @ref{!zoomy}, @ref{!zoommag}

@c -------------------------------------
@node tv3, tvlab, tv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tv3
@findex tv3

@code{tv3, @var{image} [, two=@var{bitmap1}, three=@var{bitmap2},
x=@var{x}, y=@var{y}] [, /dev, /dvi, /img, /rim, /plt, /rpl] [, /screen,
/pdev, /postscript, /plotwindow, /zoom, /center]}

@code{[@ref{x11}]} Displays an image and up to two bitmaps
simultaneously, using the "three-color" color table.

@table @code
@item @var{image}
The image to be displayed.  It must be a two-dimensional numerical
array.
@item @var{bitmap1}, @var{bitmap2}
The bitmaps.  If scalars are specified for either of these arguments,
then that argument is treated as if it were not specified.  Otherwise,
the bitmaps must have the same number of elements as the image.  Only
between zero and non-zero values is distinguished.  Those parts of the
image that corresponds to zeros in both @code{@var{bitmap1}} and
@code{@var{bitmap2}} (if specified) are displayed in the bottom section
of the color table (greyscale by default).  Those parts that correspond
to ones in @code{@var{bitmap1}} are shown in the middle section of the
color table (red by default), and the parts that correspond to zeros in
@code{@var{bitmap1}} but ones in @code{@var{bitmap2}} are displayed in
the top section of the color table (blue by default).
@item @var{x}, @var{y}
The target coordinates of the displayed image.  The coordinates are
measured in the coordinate system indicated by one of the coordinate
system keywords, or in the @code{/dev} system by default.
@end table

For the remaining keywords, see at @code{tv}.

See also: @ref{threecolors}, @ref{tv}

@c -------------------------------------
@node tvlab, tvlct, tv3, Internal Routines
@subsection tvlab
@findex tvlab

@code{tvlab, @var{text}, @var{x}, @var{y} [, @var{window}]}

@code{[@ref{x11}]} Draws the @code{@var{text}} at position
@code{@var{x}},@code{@var{y}} in LUX window @code{@var{window}}
(defaults to @code{!window}).

See also: @ref{!window}

@c -------------------------------------
@node tvlct, tvmap, tvlab, Internal Routines
@subsection tvlct
@findex tvlct

@code{tvlct, @var{r}, @var{g}, @var{b} [, /fixedsize]}

@code{[@ref{x11}]} Sets a color table.  The arguments are three
one-dimensional arrays of equal size, specifying the relative
contributions (between @code{0} and @code{1}) of red (@code{@var{r}}),
green (@code{@var{g}}), and blue (@code{@var{b}}) as a function of
increasing color cell index.  If the number of elements of the arrays is
unequal to the number of color cells, then interpolation in the arrays
is performed so that the first element of the arrays specifies the color
for color cell index 0, and the last element specifies the color for the
last color cell.

If @code{/fixedsize} is specified, then no interpolation into the
existing color table is done, but instead the new values are inserted
into successive color cells of the existing color table, until either
the new values run out or all existing color ramp cells are serviced.

See also: @ref{Image Display}, @ref{tv}

@c -------------------------------------
@node tvmap, tvplane, tvlct, Internal Routines
@subsection tvmap
@findex tvmap

@code{tvmap, @var{image} [, x=@var{x}, y=@var{y}, window=@var{window},
scale=@var{scale}] [, /dev, /dvi, /img, /plt, /rim, /rpl] [, /pdev,
/screen, /postscript, /plotwindow, /zoom]}

@code{[@ref{x11}]} For a non-@code{byte} array, equal to @code{tv}.  For a
@code{byte} array, the array values are taken to be color indices, are
mapped to the appropriate pixel values and are then displayed.

See also: @ref{tv}, @ref{tvraw}

@c -------------------------------------
@node tvplane, tvraw, tvmap, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection tvplane
@findex tvplane

@code{[@ref{x11}]}

@c -------------------------------------
@node tvraw, tvread, tvplane, Internal Routines
@subsection tvraw
@findex tvraw

@code{tvraw, @var{image} [, x=@var{x}, y=@var{y}, window=@var{window},
scale=@var{scale}] [, /dev, /dvi, /img, /plt, /rim, /rpl] [, /pdev,
/screen, /postscript, /plotwindow]}

@code{[@ref{x11}]} For a non-@code{byte} array, equal to @code{tv}.  For a
@code{byte} array, the array values are taken to be raw pixel values and
they are dumped on the screen without further ado.

See also: @ref{tv}, @ref{tvmap}

@c -------------------------------------
@node tvread, ty, tvraw, Internal Routines
@subsection tvread
@findex tvread

@code{tvread([ @var{ix}, @var{iy}, @var{nx}, @var{ny}] [, @var{window}]
[, /greyscale])}

@code{tvread,[ @var{ix}, @var{iy}, @var{nx}, @var{ny}] , @var{window} [,
/greyscale])}

@code{[@ref{x11}]} Returns part of window @code{@var{window}},
starting at @code{@var{ix}}, @code{@var{iy}} and of dimensions
@code{@var{nx}}, @code{@var{ny}}.  The window part defaults to the whole
window, @code{@var{window}} to the last selected window
(@code{!window}).  By default, the raw pixel values are returned,
without using color table information.  If the result is displayed using
@code{tvraw}, then the original image appears - if the color table has
not been changed in the meantime.  If keyword @code{/greyscale} is
specified, then the read pixel values are translated into (grey)
intensity values between 0 and 255 which are then returned.

If you read part of a window, then that part must be wholly within the
confines of the screen at the time it is read.  There is no such
limitation on reading from a pixmap (with negative @code{@var{window}}).

Alias: @ref{xtvread}

See also: @ref{xport}, @ref{xtv}, @ref{!window}
@c -------------------------------------
@node ty, type, tvread, Internal Routines
@subsection ty
@findex ty

@code{ty, @var{x} [, @dots{}, /join]}

Displays the contents of the arguments on the screen.  Up to
@code{#max_args} arguments may be specified.  A newline character is
printed after all arguments are serviced, except when keyword
@code{/join} is specified.

Alias: @ref{print}, @ref{t}, @ref{type}

See also: @ref{printf}, @ref{In-Line Print Formats}, @ref{#max_args}

@c -------------------------------------
@node type, typename, ty, Internal Routines
@subsection type
@findex type

@code{type, @var{x} [, @dots{}, /join]}

Displays the contents of the arguments on the screen.  Up to
@code{#max_args} arguments may be specified.  A newline character is
printed after all arguments are serviced, except when keyword
@code{/join} is specified.

Alias: @ref{print}, @ref{t}, @ref{ty}

See also: @ref{printf}, @ref{In-Line Print Formats}, @ref{#max_args}

@c -------------------------------------
@node typename, ulib, type, Internal Routines
@subsection typename
@findex typename

@code{typename(@var{type})}

Returns the name of the numerical data type with type number
@code{@var{type}}.

See also: @ref{symdtype}, @ref{classname}

@c -------------------------------------
@node ulib, unload, typename, Internal Routines
@subsection ulib
@findex ulib

@code{ulib[, @var{string}]}

Sets or displays the user library directory name.  This routine's
function is also performed by environment variable @code{LUX_path}.

See also: @ref{Environment}

@c -------------------------------------
@node unload, unmod, ulib, Internal Routines
@subsection unload
@findex unload

@code{unload, @var{lun}}

@code{[@ref{tape}]} Unloads the tape in tape drive @code{@var{lun}}.

@c -------------------------------------
@node unmod, upcase, unload, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection unmod
@findex unmod

@code{unmod(@var{x} [, @var{axis}] , @var{period} [, @var{average}])}

Undoes the effects of the ``modulus'' function along the indicated
@code{@var{axis}}, assuming that the average increase from one element
to the next is @code{@var{average}}, and the modulus period is
@code{@var{period}}.  For those elements that have coordinate 0 along
the indicated axis, the result has the same value as @code{@var{x}}.

If @code{@var{y}} is the result, then @code{@var{y} mod @var{period}
eq @var{x} mod @var{period}}, and @code{differ(@var{y}, @var{axis}) ge
@var{average} - 0.5*@var{period}} and @code{differ(@var{y},
@var{axis}) lt @var{average} + 0.5*@var{period}}.

If 3 arguments are specified, then the missing argument is
@code{@var{axis}} and defaults to 0.  @code{@var{average}} defaults to
0.

See also: @ref{mod}

@c -------------------------------------
@node upcase, upper, unmod, Internal Routines
@subsection upcase
@findex upcase

@code{upcase(@var{s})}

Returns string @code{@var{s}} with all letters converted to upper case.

Alias: @ref{upper}

See also: @ref{lower}, @ref{lowcase}

@c -------------------------------------
@node upper, ut1tai, upcase, Internal Routines
@subsection upper
@findex upper

@code{upper(@var{s})}

Returns string @code{@var{s}} with all letters converted to upper case.

Alias: @ref{upcase}

See also: @ref{lower}, @ref{lowcase}

@c -------------------------------------
@node ut1tai, ut1tt, upper, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ut1tai
@findex ut1tai

@code{ut1tai(@var{jdut}, @var{dt})}

[SOFA] Transforms Julian Date @code{@var{jdut}} from UT1 to TAI, given
@code{@var{dt}} = UT1 - TAI in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ut1tt, ut1utc, ut1tai, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ut1tt
@findex ut1tt

@code{ut1tt(@var{jdut}, @var{dt})}

[SOFA] Transforms Julian Date @code{@var{jdut}} from UT1 to TT, given
@code{@var{dt}} = UT1 - TT in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node ut1utc, utctai, ut1tt, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection ut1utc
@findex ut1utc

@code{ut1utc(@var{jdut}, @var{dt})}

[SOFA] Transforms Julian Date @code{@var{jdut}} from UT1 to UTC, given
@code{@var{dt}} = UT1 - UTC in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node utctai, utcut1, ut1utc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection utctai
@findex utctai

@code{utctai(@var{jdut})}

[SOFA] Transforms Julian Date @code{@var{jdut}} from UTC to TAI.  The
result has the same dimensions as the input.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node utcut1, variance, utctai, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection utcut1
@findex utcut1

@code{utcut1(@var{jdut}, @var{dt})}

[SOFA] Transforms Julian Date @code{@var{jdut}} from UTC to UT1, given
@code{@var{dt}} = UT1 - UTC in seconds.  The arguments must have the
same dimensions.  The result has those same dimensions, too.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node variance, varname, utcut1, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection variance
@findex variance

@code{variance(@var{x} [, @var{mode}, weights=@code{weights}, /sample,
/population, /keepdims, /double])}

By default, this function returns the sample variance of numerical array
@code{@var{x}}, which is the square of the corresponding standard
deviation returned by @code{sdev}.  The arguments, keywords, and type
and dimensions of the result are exactly the same as for the @code{sdev}
function.

See also: @ref{sdev}, @ref{!lastsdev}, @ref{!lastmean}

@c -------------------------------------
@node varname, verify, variance, Internal Routines
@subsection varname
@findex varname

@code{varname(@var{symbol})}

Returns the name of the symbol with number @code{@var{symbol}}.

@c -------------------------------------
@node verify, voigt, varname, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection verify
@findex verify

@c -------------------------------------
@node voigt, wait, verify, Internal Routines
@subsection voigt
@findex voigt

@code{voigt(@var{a}, @var{v})}

Returns the Voigt function (usually written as h(a,v)) for Voigt
parameter @code{@var{a}} (a scalar, @code{0} selects a Doppler profile)
and distance to line center @code{@var{v}} (an array, in units of the
Doppler width).

@c -------------------------------------
@node wait, wait_for_menu, voigt, Internal Routines
@subsection wait
@findex wait

@code{wait,@var{x}}

Wait @code{@var{x}} seconds.  @code{@var{x}} may be floating-point.

@c -------------------------------------
@node wait_for_menu, wait_for_tape, wait, Internal Routines
@subsection wait_for_menu
@findex wait_for_menu

@code{wait_for_menu [, @var{erase_prev}]}

@code{[@ref{x11}]} Waits for a user menu selection.  If
@code{@var{erase_prev}} is set and unequal to zero, then pending menu
selections are discarded before waiting for a new user selection.
Otherwise, the oldest pending selection is returned.  The results are
stored in @code{!last_menu} (menu number), @code{!menu_item} (item
number in menu, starting at zero), @code{!xmenu}, @code{!ymenu}
(position of mouse relative to menu's upper left hand corner; in units
of one character or one line, respectively)

See also: @ref{menu}, @ref{checkmenu}, @ref{!last_menu},
@ref{!menu_item}, @ref{!xmenu}, @ref{!ymenu}

@c -------------------------------------
@node wait_for_tape, watch, wait_for_menu, Internal Routines
@subsection wait_for_tape
@findex wait_for_tape

@code{wait_for_tape, @var{lun}}

@code{[@ref{tape}]} Currently unused.

@c -------------------------------------
@node watch, weof, wait_for_tape, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection watch
@findex watch

@code{watch, @var{variable} [, /delete, /list ]}

Sets (default) or deletes (if @code{/delete} is specified) a watchpoint
for the named @code{@var{variable}}.  Whenever @code{step} or
@code{trace} are active, the contents of the watched variables are
listed.  If @code{/list} is specified, then the names of the watched
variables are listed.

See also: @ref{step}, @ref{trace}

@c -------------------------------------
@node weof, where, watch, Internal Routines
@subsection weof
@findex weof

@code{weof, @var{lun}}

@code{[@ref{tape}]} Write an end-of-file marker on tape drive
@code{@var{lun}}.

@c -------------------------------------
@node where, window, weof, Internal Routines
@subsection where
@findex where

@code{where, @var{address} [, /cut]}

@code{[debug]}

@c -------------------------------------
@node window, wmap, where, Internal Routines
@subsection window
@findex window

@code{window [, @var{xmin}, @var{xmax}, @var{ymin}, @var{ymax}] [,
@var{zmin}, @var{zmax}]}

@code{[@ref{x11}]} Sets or displays the plot window (cube) boundaries.  The
next plot is drawn between the specified device-independent coordinates.
If no arguments are specified, then the current settings are displayed.
The values of @code{!wxb}, @code{!wxt}, @code{!wyb}, @code{!wyt},
@code{!wzb}, and @code{!wzt} are modified accordingly.

See also: @ref{!wxb}, @ref{!wxt}, @ref{!wyb}, @ref{!wyt}, @ref{!wzb},
@ref{!wzt}

@c -------------------------------------
@node wmap, word, window, Internal Routines
@subsection wmap
@findex wmap

@code{wmap(@var{x})}

Maps @code{@var{x}} byte for byte into a @code{word} array.

See also: @ref{smap}, @ref{bmap}, @ref{lmap}, @ref{fmap}, @ref{dmap}

@c -------------------------------------
@node word, writeu, wmap, Internal Routines
@subsection word
@findex word

@code{word(@var{x})}

@code{word, @var{x}}

Converts @code{@var{x}} to data type @code{word} by truncating at the
decimal point (if any) and then discarding all but the two least
significant bytes.  The function returns a converted copy and leaves
@code{@var{x}} itself alone.  The subroutine modifies @code{@var{x}}
itself.

Alias: @ref{int}

See also: @ref{Number Conversion}

@c -------------------------------------
@node writeu, write_jpeg, word, Internal Routines
@subsection writeu
@findex writeu

@code{writeu, @var{lun}, @var{x} [, @dots{}]}

Writes the contents of @code{@var{x}} and the remaining arguments to the
file opened on logical unit @code{@var{lun}}.  Up to @code{#max_args}
arguments may be specified.

See also: @ref{readu}, @ref{printf}

@c -------------------------------------
@node write_jpeg, xanimate, writeu, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection write_jpeg
@findex write_jpeg

@code{[jpeg]} An alias of @ref{jpegwrite}.

@c -------------------------------------
@node xanimate, xclose, write_jpeg, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xanimate
@findex xanimate

@code{xanimate, @var{data} [, @var{x}, @var{y}, fr1=@var{fr1},
fr2=@var{fr2}, frstep=@var{frstep}] [, /time]}

@code{[@ref{x11}]} Displays images from @code{byte} array @code{@var{data}} as
a movie at the highest speed.  @code{@var{data}} must have at least
three dimensions: the individual images are taken from the first two.
@code{@var{x}} and @code{@var{y}} specify the offset in the current
window where the movie is to be displayed.  @code{@var{fr1}} and
@code{@var{fr2}} specify the start and end frame number (relative to
frame 0) of the frames to be displayed, and @code{@var{frstep}}
specifies the frame step size.

If keyword @code{/time} is specified, then a report on the cpu time and
clock time elapsed during the movie showing is given.  The report
includes the elapsed time, the number of frames per second (effective -
ignoring @code{@var{frstep}} - for clock time, actual for cputime), and the
actual number of pixels displayed per second.

The images from @code{@var{data}} are dumped to the screen without additional
manipulation, as by @code{tvraw}.

See also: @ref{tvraw}, @ref{scale}

@c -------------------------------------
@node xclose, xcopy, xanimate, Internal Routines
@subsection xclose
@findex xclose

@code{xclose}

@code{[@ref{x11}]} Closes all windows and disconnects the link with the window
manager.  This frees up all allocated color cells for use by other
applications.

See also: @ref{xopen}, @ref{xport}, @ref{tv}

@c -------------------------------------
@node xcopy, xcursor, xclose, Internal Routines
@subsection xcopy
@findex xcopy

@code{xcopy, @var{window1}, @var{window2} [, @var{x1}, @var{y1},
@var{width}, @var{height}, @var{x2}, @var{y2}]}

@code{[@ref{x11}]} Copies the part of the contents of @code{@var{window1}}
starting at position @code{@var{x1},@var{y1}} (default: @code{0,0}) and
with @code{@var{width}} and @code{@var{height}}, to @code{@var{window2}}
at position @code{@var{x2},@var{y2}}.  Positive window numbers denote
windows, negatives pixmaps.

See also: @ref{xtv}, @ref{xsetaction}

@c -------------------------------------
@node xcursor, xdelete, xcopy, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xcursor
@findex xcursor

@code{xcursor, @var{window}, @var{type} [, @var{foreground},
@var{background}]}

@code{[@ref{x11}]} Sets the cursor for LUX window number @code{@var{window}}
to cursor type @code{type}, with (optional) foreground color
@code{@var{foreground}} and background color @code{@var{background}}.
The colors are specified as strings containing the names of the colors.
By default, the foreground color is red and the background color black.

@c -------------------------------------
@node xdelete, xdrawarc, xcursor, Internal Routines
@subsection xdelete
@findex xdelete

@code{xdelete, @var{window}}

@code{[@ref{x11}]} Deletes window @code{@var{window}}.

See also: @ref{xport}

@c -------------------------------------
@node xdrawarc, xdrawline, xdelete, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xdrawarc
@findex xdrawarc

@code{[@ref{x11}]}

@c -------------------------------------
@node xdrawline, xevent, xdrawarc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xdrawline
@findex xdrawline

@code{[@ref{x11}]}

@c -------------------------------------
@node xevent, xexist, xdrawline, Internal Routines
@subsection xevent
@findex xevent

@code{xevent}

@code{[@ref{x11}]} Gives information on the events currently in the event
buffer.

@c -------------------------------------
@node xexist, xflush, xevent, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xexist
@findex xexist

@code{[@ref{x11}]}

@c -------------------------------------
@node xflush, xfont, xexist, Internal Routines
@subsection xflush
@findex xflush

@code{xflush}

@code{[@ref{x11}]} Forces execution of all pending x display commands.

See also: @ref{xpurge}

@c -------------------------------------
@node xfont, xinvertarc, xflush, Internal Routines
@subsection xfont
@findex xfont

@code{xfont, @var{fontname} [, @var{window}]}

@code{[@ref{x11}]} Selects font @code{@var{fontname}} for @code{@var{window}}
(which defaults to the last accessed one, or @code{0}).

See also: @ref{xport}

@c -------------------------------------
@node xinvertarc, xinvertline, xfont, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xinvertarc
@findex xinvertarc

@code{[@ref{x11}]}

@c -------------------------------------
@node xinvertline, xlabel, xinvertarc, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xinvertline
@findex xinvertline

@code{[@ref{x11}]}

@c -------------------------------------
@node xlabel, xlabelwidth, xinvertline, Internal Routines
@subsection xlabel
@findex xlabel

@code{xlabel, @var{label}, @var{x}, @var{y} [, @var{window}]}

@code{[@ref{x11}]} Puts @code{@var{label}} (a string) at position
@code{@var{x},@var{y}} in @code{@var{window}} (which defaults to the
last accessed one, or @code{0}).

See also: @ref{xport}, @ref{xtv}

@c -------------------------------------
@node xlabelwidth, xloop, xlabel, Internal Routines
@subsection xlabelwidth
@findex xlabelwidth

@code{xlabelwidth(@var{label})}

@code{[@ref{x11}]} Returns the width of the @code{@var{label}}.

See also: @ref{xlabel}

@c -------------------------------------
@node xloop, xmaddfiletolist, xlabelwidth, Internal Routines
@subsection xloop
@findex xloop

@code{xloop}

@code{[@ref{x11}]} Window event manager.  Waits for an event of the kind
registered with @code{xregister} and returns information about the
event.  The event itself is kept in the queue and can be read with
type-specific routines.  If no specific event source was selected with
@code{xregister}, then all sources (LUX and non-LUX) are monitored.  If
no specific event type was selected, then @code{xloop} returns
immediately.

Information about the event is returned as follows:

@table @code
@item !xtime
returns the time.
@item !eventsource
returns the source, as the index of the menu or window plus either
@code{#event.menu} (= 512) or @code{#event.window} (= 256).
@item !eventtype
returns the event type (coded as the elements of @code{#event}).
@item @code{!xroot}, @code{!yroot}
return the root window coordinates, for @code{buttonpress},
@code{keypress}, and @code{pointermotion} events.  The coordinates are
counted in pixels from the upper left-hand corner of the screen.
@item !button
returns the code of the pressed mouse button, for @code{buttonpress}
events. 
@item !keycode, !keystate, !keysym
returns identifiers for the pressed key, for @code{keypress} events.
@item !ix, !iy, !xf, !yf
return the coordinates of the mouse pointer in the LUX window, for
@code{buttonpress} and @code{pointermotion} events.  The coordinates are
in the @code{dev} coordinate system for @code{!ix} and @code{!iy}, and
in the @code{dvi} coordinate system for @code{!xf} and @code{!yf}.
@item !xmenu, !ymenu
return the coordinates of the mouse pointer in the menu item, for
@code{buttonpress} events in menus.  The coordinates are counted from
the upper left-hand corner of the menu item.
@item !last_menu
returns the menu number for all menu-related events (not for
@code{pointermotion} events).
@item !menu_item
returns the menu item number for menu-related @code{buttonpress},
@code{enterwindow}, and @code{leavewindow} events.
@end table

See also: @ref{!button}, @ref{checkmenu}, @ref{#event},
@ref{!eventsource}, @ref{!eventtype}, @ref{!ix}, @ref{!iy},
@ref{!keycode}, @ref{!keystate}, @ref{!keysym}, @ref{!last_menu},
@ref{!menu_item}, @ref{!noeventflush}, @ref{wait_for_menu}, @ref{!xf},
@ref{!xmenu}, @ref{xplace}, @ref{xquery}, @ref{xregister}, @ref{!xroot},
@ref{!xtime}, @ref{!xtime}, @ref{!yf}, @ref{!ymenu}, @ref{!yroot}

@c -------------------------------------
@node xmaddfiletolist, xmalignment, xloop, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xmaddfiletolist
@findex xmaddfiletolist

@code{xmaddfiletolist(@var{list_widget}, @var{filename})}

@code{[@ref{motif} package]} Adds the @code{@var{filename}} to the @var{list_widget}.

@c -------------------------------------
@node xmalignment, xmarmcolor, xmaddfiletolist, Internal Routines
@subsection xmalignment
@findex xmalignment

@code{xmalignment, @var{widget}, @var{mode}}

@code{[@ref{motif} package]} Specifies the alignment of the indicated @var{widget}.
The @code{@var{mode}} (an integer) indicates the selected alignment:
@code{0} means align with the beginning, @code{1} with the center, and
@code{2} with the end.

@c ----------------------------
@node xmarmcolor, xmarrow, xmalignment, Internal Routines
@subsection xmarmcolor
@findex xmarmcolor

@code{xmarmcolor, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the arm color of the indicated @var{widget} to the
specified @code{@var{color}} (a string).

@c -------------------------------------
@node xmarrow, xmattach, xmarmcolor, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xmarrow
@findex xmarrow

@code{xmarrow(@var{parent}, @var{direction}, @var{callback} [,
@var{color}])}

@code{[@ref{motif} package]} Creates an arrow button widget and returns its widget id.
The widget is placed in the @code{@var{parent}} widget.  An arrow button
widget consists of a directional arrow with a border shadow around it.
The arrow direction should be selected from @code{0} for left, @code{1}
for right, @code{2} for up, and @code{3} for down.  a
@code{@var{callback}} and @code{@var{color}} associated with the arrow
button can be specified.

The following resources can be set for this widget: @code{background,
borderColor, borderWidth, height, sensitive, width, x, y}

@code{bottomShadowColor}, @code{foreground}, @code{topShadowColor}

See also: @ref{xmframe}

@c ----------------------------
@node xmattach, xmattach_relative, xmarrow, Internal Routines
@subsection xmattach
@findex xmattach

@code{xmattach, @var{widget}, @var{ref_widget}, @var{left}, @var{right},
@var{top}, @var{bottom}}

@code{[@ref{motif} package]} Attaches the widget with ID @code{@var{widget}} to
another widget, indicated by @code{@var{ref_widget}}.  If
@code{@var{ref_widget}} is zero, then the current widget is attached to
its parent, which should be a form widget; otherwise
@code{@var{ref_widget}} must indicate a sibling widget (i.e., another
widget from the same form widget parent).  Parameters @code{@var{left}},
@code{@var{right}}, @code{@var{top}}, and @code{@var{bottom}} should be
set to @code{1} to attach the corresponding side of the widget to the
opposite side of the reference widget (e.g., the right side of the
current widget to the left side of the reference widget), or to @code{0}
to have no such attachment, or to @code{-1} to attach to the
corresponding side of the reference widget (e.g., the right side of the
widget to the right side of the reference widget).

See also: @ref{xmattach_relative}, @ref{xmform}, @ref{xmtoplevel_form}

@c ----------------------------
@node xmattach_relative, xmbackgroundcolor, xmattach, Internal Routines
@subsection xmattach_relative
@findex xmattach_relative

@code{xmattach_relative, @var{widget}, @var{left}, @var{right},
@var{top}, @var{bottom}}

@code{[@ref{motif} package]} Attaches the @var{widget} to its parent (which should be
a form widget) with the indicated relative positions @code{@var{left}},
@code{@var{right}}, @code{@var{top}}, and @code{@var{bottom}} measured
in percentages.  In ordinary usage, @code{@var{right}} should exceed
@code{@var{left}} and @code{@var{bottom}} should exceed
@code{@var{top}}.

If the parent widget is subsequently resized, the attached widget will
scale accordingly.

@c ----------------------------
@node xmbackgroundcolor, xmboard, xmattach_relative, Internal Routines
@subsection xmbackgroundcolor
@findex xmbackgroundcolor

@code{xmbackgroundcolor, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the background color of the @code{@var{widget}} to
@code{@var{color}} (a string).

@c -------------------------------------
@node xmboard, xmbordercolor, xmbackgroundcolor, Internal Routines
@subsection xmboard
@findex xmboard

@code{xmboard(@var{parent} [, @var{width}, @var{height},
@var{h_margin}, @var{v_margin}])}

@code{[@ref{motif} package]} Creates a bulletin board widget inside the
@code{@var{parent}}, with the indicated dimensions and margins (in
pixels).  Returns the widget ID of the bulletin board widget.  Children
are placed in bulletin board widgets at absolute positions.

See also: @ref{xmtoplevel_board}, @ref{xmform}, @ref{xmposition}

@c ----------------------------
@node xmbordercolor, xmborderwidth, xmboard, Internal Routines
@subsection xmbordercolor
@findex xmbordercolor

@code{xmbordercolor, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the border color of the @code{@var{widget}} to
@code{@var{color}} (a string).

@c ----------------------------
@node xmborderwidth, xmbottomshadowcolor, xmbordercolor, Internal Routines
@subsection xmborderwidth
@findex xmborderwidth

@code{xmborderwidth, @var{widget}, @var{width}}

@code{[@ref{motif} package]} Sets the border width of the @code{@var{widget}} to
@code{@var{width}}.

@c ----------------------------
@node xmbottomshadowcolor, xmbutton, xmborderwidth, Internal Routines
@subsection xmbottomshadowcolor
@findex xmbottomshadowcolor

@code{xmbottomshadowcolor, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the bottom shadow color of the @code{@var{widget}} to
@code{@var{color}} (a string).

@c -------------------------------------
@node xmbutton, xmcheckbox, xmbottomshadowcolor, Internal Routines
@subsection xmbutton
@findex xmbutton

@code{xmbutton(@var{parent}, @var{label}, @var{callback} [, @var{font},
@var{color}])}

@code{[@ref{motif} package]} Creates a button widget in the @code{@var{parent}} and
returns its widget id.  A button widget consists of a raised rectangle
with a label on it.  When the button is pressed, its appearance changes
from raised to depressed and back again.  @code{@var{label}} is the
button's label (a string), and @code{@var{callback}} the callback string
to be executed when the button is pressed.  A @code{@var{font}} and
@code{@var{color}} (both strings) can also be specified.

@c -------------------------------------
@node xmcheckbox, xmcolumns, xmbutton, Internal Routines
@subsection xmcheckbox
@findex xmcheckbox

@code{xmcheckbox( @var{parent}, @var{callback}, @var{font}, @var{color},
@var{label1} [,...] [, @var{columns}])}

@code{[@ref{motif} package]} Creates a check box widget with check boxes in the
@code{@var{parent}} widget.  Each check box item consists of a small
square button, either depressed (selected) or not depressed (not
selected), with a label after it.  The check box labels are specified in
@code{string} variable @code{@var{label1}} and following arguments, and
are displayed in the specified @code{@var{font}} and @code{@var{color}}
(or defaults, if these arguments are not strings or are null strings).
If the last argument is a @code{scalar}, then it is taken to indicate
the number of columns in which to group the check boxes.  The
@code{@var{callback}} is a string that gets executed when one of the
check boxes is selected.  The index of the selected check box (starting
counting at zero) can be found in global variable @code{$RADIO_button},
and the state of the selected check box after the selection is written
into @code{$RADIO_state}: 0 means unselected, and 1 means selected.

The function returns an array of integers.  The first number is the
widget ID of the column/row widget that contains the check boxes.  The
remaining numbers are the IDs of the individual check boxes.

@c -------------------------------------
@node xmcolumns, xmcommand, xmcheckbox, Internal Routines
@subsection xmcolumns
@findex xmcolumns

@code{xmcolumns(@var{parent}, @var{width}, @var{height} [,
@var{ncolumns}, @var{pack_flag}])}

@code{[@ref{motif} package]} Returns the widget ID of a column widget with the
indicated @code{@var{width}} and @code{@var{height}}, and number
@code{@var{ncolumns}} of columns.  If @code{@var{pack_flag}} is equal to
zero, then each next child widget is placed in the next column in which
it is completely visible.  If @code{@var{pack_flag}} is equal to
@code{1}, then each next child widget is placed in the next column,
regardless of visibility.  Also, with @code{@var{pack_flag}} equal to
@code{1}, menu bars are displayed square (if no explicit dimensions were
specified for them).

Unless child widgets have specified sizes, they will all be scaled to
the same width, which is the largest width among the children.

@c -------------------------------------
@node xmcommand, xmdestroy, xmcolumns, Internal Routines
@subsection xmcommand
@findex xmcommand

@code{xmcommand( @var{parent}, @var{callback}, @var{nvisible} [,
@var{nmax}, @var{prompt}, @var{font}, @var{color}])}

@code{[@ref{motif} package]} Creates a command line widget in the @code{@var{parent}}
and returns its widget id.  A command line widget has a recessed command
line area at the bottom and a recessed command line history area at the
top, with the @code{@var{prompt}} label in between.  The user can enter
text in the command line area, or select a line from the history area.
When the user accepts the input (by pressing the @kbd{Enter} key, or by
double-clicking on a line in the history area), then it is displayed
below the lines (if any) that were already present in the history area,
shifting the older lines up by one if necessary.  In addition, the last
line is also stored in @code{$COMMAND_line}.

The @code{@var{callback}} string is executed whenever the user accepts
some newly entered text.  The widget uses the indicated
@code{@var{font}} and @code{@var{color}}.  At most @code{@var{nvisible}}
lines of history are visible at once, and at most @code{@var{nmax}}
lines of history are available -- with scroll bars giving access to
those lines or those parts of lines that are available but not currently
shown.

@c ----------------------------
@node xmdestroy, xmdialog_board, xmcommand, Internal Routines
@subsection xmdestroy
@findex xmdestroy

@code{xmdestroy, @var{widget}}

@code{[@ref{motif} package]} Destroys the indicated @code{@var{widget}}.

@c -------------------------------------
@node xmdialog_board, xmdialog_form, xmdestroy, Internal Routines
@subsection xmdialog_board
@findex xmdialog_board

@code{xmdialog_board(@var{parent}, @var{width}, @var{height},
@var{title} [, @var{ix}, @var{iy}, @var{h_margin}, @var{v_margin},
@var{resize_flag}])}

@code{[@ref{motif} package]} Creates a dialog bulletin board widget; returns the
widget id.

@c -------------------------------------
@node xmdialog_form, xmdrawingarea, xmdialog_board, Internal Routines
@subsection xmdialog_form
@findex xmdialog_form

@code{xmdialog_form(@var{parent}, @var{width}, @var{height},
@var{title} [, @var{h_space}, @var{v_space}, @var{h_margin},
@var{v_margin}])}

@code{[@ref{motif} package]} Creates a dialog form widget and returns its id.

@c -------------------------------------
@node xmdrawingarea, xmdrawinglink, xmdialog_form, Internal Routines
@subsection xmdrawingarea
@findex xmdrawingarea

@code{xmdrawingarea(@var{parent}, @var{win} [, @var{w}, @var{h},
@var{input_callback}, @var{resize_callback}, @var{exit_callback}])}

[motif] Creates a drawing window and returns its widget id.

@c ----------------------------
@node xmdrawinglink, xmfilegetlist, xmdrawingarea, Internal Routines
@subsection xmdrawinglink
@findex xmdrawinglink

@code{xmdrawinglink, @var{widget}, @var{window}}

@code{[@ref{motif} package]} Links a drawing area widget to a LUX window.

@c -------------------------------------
@node xmfilegetlist, xmfileselect, xmdrawinglink, Internal Routines
@subsection xmfilegetlist
@findex xmfilegetlist

@code{xmfilegetlist(@var{widget})}

@code{[@ref{motif} package]} Returns the files from the file selection @var{widget} in
a string array.

@c -------------------------------------
@node xmfileselect, xmfont, xmfilegetlist, Internal Routines
@subsection xmfileselect
@findex xmfileselect

@code{xmfileselect(@var{parent}, @var{title}, @var{ok_callback} [,
@var{ok_label}, @var{help_callback}, @var{cancel_callback}, @var{font},
@var{button_font}, @var{color}, @var{dir}, @var{help_label}])} 

@code{[@ref{motif} package]} Creates a file selection widget in the
@code{@var{parent}} widget and returns the new widget's id.

@c ----------------------------
@node xmfont, xmforegroundcolor, xmfileselect, Internal Routines
@subsection xmfont
@findex xmfont

@code{xmfont, @var{widget}, @var{font}}

@code{[@ref{motif} package]} Sets the default @code{@var{font}} for the indicated
@code{@var{widget}}.

@c ----------------------------
@node xmforegroundcolor, xmform, xmfont, Internal Routines
@subsection xmforegroundcolor
@findex xmforegroundcolor

@code{xmforegroundcolor, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the foreground color of the indicated
@code{@var{widget}} to @code{@var{color}}.

@c -------------------------------------
@node xmform, xmframe, xmforegroundcolor, Internal Routines
@subsection xmform
@findex xmform

@code{xmform(@var{parent} [, @var{width}, @var{height}, @var{hspace},
@var{vspace}, @var{mx}, @var{my}])}

@code{[@ref{motif} package]} Creates a form widget and returns its id.  A form widget
is a container widget which can be used to put constraints on its
children and to determine the layout behavior when resizing, using
routine @code{xmattach}.

See also: @ref{xmattach}

@c -------------------------------------
@node xmframe, xmgetoptionselection, xmform, Internal Routines
@subsection xmframe
@findex xmframe

@code{xmframe(@var{parent} [, @var{h_margin}, @var{v_margin},
@var{width}, @var{type}])}

@code{[@ref{motif} package]} Creates a frame widget and returns its id.  A frame
widget is a rectangular widget that has a visible frame along its
boundaries.  The size of the margins between the visible frame and the
children widgets is determined by @code{@var{h_margin}} (horizontal) and
@code{@var{v_margin}} (vertical), which are measured in pixels.  The
width of the frame lines is equal to @code{@var{width}} pixels.  Frames
come in four different types, indicated by the value of
@code{@var{type}}:

@enumerate
@item
The frame appears to protrude behind the parent; The contents are at
ground level.
@item
The frame appears to protrude in front of the parent; The contents are
at ground level. 
@item
The frame and contents appear to protrude behind the parent.
@item
The frame and contents appear to protrude in front of the parent.
@end enumerate

@c -------------------------------------
@node xmgetoptionselection, xmgetpixmap, xmframe, Internal Routines
@subsection xmgetoptionselection
@findex xmgetoptionselection

@code{xmgetoptionselection(@var{widget})}

@code{[@ref{motif} package]} @code{@var{widget}} should be a row-column widget from an
option menu.

@c ----------------------------
@node xmgetpixmap, xmgetwidgetaddress, xmgetoptionselection, Internal Routines
@subsection xmgetpixmap
@findex xmgetpixmap

@code{xmgetpixmap, @var{id}, @var{pixmap_file}}

@code{[@ref{motif} package]} Reads the indicated @code{@var{pixmap_file}} and
associates it with with the indicated @code{@var{id}} (an integer).

@c -------------------------------------
@node xmgetwidgetaddress, xmgetwidgetposition, xmgetpixmap, Internal Routines
@subsection xmgetwidgetaddress
@findex xmgetwidgetaddress

@code{xmgetwidgetaddress(@var{widget})}

@code{[@ref{motif} package]} Returns the internal widget ID (as opposed to LUX's
indices into an array of internal widget IDs) of the
@code{@var{widget}}.

@c ----------------------------
@node xmgetwidgetposition, xmgetwidgetsize, xmgetwidgetaddress, Internal Routines
@subsection xmgetwidgetposition
@findex xmgetwidgetposition

@code{xmgetwidgetposition, @var{widget}, @var{x}, @var{y}}

@code{[@ref{motif} package]} Returns the position of the indicated @code{@var{widget}}
in variables @code{@var{x}} and @code{@var{y}}.

@c ----------------------------
@node xmgetwidgetsize, xmhscale, xmgetwidgetposition, Internal Routines
@subsection xmgetwidgetsize
@findex xmgetwidgetsize

@code{xmgetwidgetsize, @var{widget}, @var{dx}, @var{dy}}

@code{[@ref{motif} package]} Returns the dimensions of the indicated
@code{@var{widget}} in variables @code{@var{dx}} and @code{@var{dy}}.

@c -------------------------------------
@node xmhscale, xmhscrollbar, xmgetwidgetsize, Internal Routines
@subsection xmhscale
@findex xmhscale

@code{xmhscale(@var{parent}, @var{min}, @var{max}, @var{dshift},
@var{callback} [, @var{show}, @var{size}, @var{drag}])}

@code{[@ref{motif} package]} Creates a horizontal scale widget and returns its id.

@c -------------------------------------
@node xmhscrollbar, xmlabel, xmhscale, Internal Routines
@subsection xmhscrollbar
@findex xmhscrollbar

@code{xmhscrollbar(@var{parent}, @var{max}, @var{slidersize},
@var{dpage}, @var{callback} [, @var{drag}])}

@code{[@ref{motif} package]} Creates a horizontal scroll bar widget in the
@code{@var{parent}} widget and returns its id.  The position of the
scroll bar slider in its widget is counted from zero to (positive)
@code{@var{max}}.  The size of the slider is set by
@code{@var{slidersize}}, which should be between zero and
@code{@var{max}}.  For scrolling by pages, @code{@var{dpage}} indicates
the scroll size that corresponds to one page.  @code{@var{drag}}
indicates that a callback must be generated only when the scrollbar is
released after being dragged (if @code{@var{drag}} is equal to zero or
not specified), or also when the scrollbar is being dragged (if
@code{@var{drag}} is unequal to zero).  @code{@var{callback}} is the
callback string that gets executed.

@c -------------------------------------
@node xmlabel, xmlist, xmhscrollbar, Internal Routines
@subsection xmlabel
@findex xmlabel

@code{xmlabel(@var{parent}, @var{label} [, @var{font}, @var{color},
@var{size_flag}])}

@code{[@ref{motif} package]} Creates a label widget and returns its id.

@c -------------------------------------
@node xmlist, xmlistadditem, xmlabel, Internal Routines
@subsection xmlist
@findex xmlist

@code{xmlist(@var{parent}, @var{callback}, @var{nvisible} [,
@var{font}, @var{color}, @var{resize_flag}])}

@code{[@ref{motif} package]} Creates an empty list widget in the @code{@var{parent}}
widget.  The list widget is displayed recessed.  @code{@var{nvisible}}
is the number of lines to be visible at once in the widget.  The list
widget contents is shown in the indicated @code{@var{font}} and
@code{@var{color}}.  @code{@var{resize_flag}} chooses the list size
policy.

See also: @ref{xmlistfromfile}

@c ----------------------------
@node xmlistadditem, xmlistcount, xmlist, Internal Routines
@subsection xmlistadditem
@findex xmlistadditem

@code{xmlistadditem, @var{widget}, @var{string} [, @var{position}]}

@code{[@ref{motif} package]} Adds a string to the list @code{@var{widget}}.

@c -------------------------------------
@node xmlistcount, xmlistdeleteall, xmlistadditem, Internal Routines
@subsection xmlistcount
@findex xmlistcount

@code{xmlistcount(@var{widget})}

@code{[@ref{motif} package]} Returns the number of entries in a list @code{@var{widget}}.

@c ----------------------------
@node xmlistdeleteall, xmlistdeleteitem, xmlistcount, Internal Routines
@subsection xmlistdeleteall
@findex xmlistdeleteall

@code{xmlistdeleteall, @var{widget}}

@code{[@ref{motif} package]} Deletes all items from a list @code{@var{widget}}.

@c ----------------------------
@node xmlistdeleteitem, xmlistfromfile, xmlistdeleteall, Internal Routines
@subsection xmlistdeleteitem
@findex xmlistdeleteitem

@code{xmlistdeleteitem, @var{widget}, @var{position}}

@code{[@ref{motif} package]} Deletes the item at the indicated
@code{@var{position}} from the list @code{@var{widget}}.

@c -------------------------------------
@node xmlistfromfile, xmlistfunc, xmlistdeleteitem, Internal Routines
@subsection xmlistfromfile
@findex xmlistfromfile

@code{xmlistfromfile(@var{parent}, @var{callback}, @var{file},
@var{nvisible} [, @var{font}, @var{color}])}

@code{[@ref{motif} package]} Creates a list widget with the contents of a file, in the
@code{@var{parent}} widget.  Tries to open the @code{@var{file}} for
reading.  If successful, then creates a list widget to receive the
contents of the file.  The list widget shows @code{@var{nvisible}} lines
at once, in the indicated @code{@var{font}} and @code{@var{color}}.  The
@code{@var{callback}} gets executed if one of the list items is
selected.  For more information about list widgets, see at
@code{xmlist}.

See also: @ref{xmlist}

@c ----------------------------
@node xmlistfunc, xmlistselect, xmlistfromfile, Internal Routines
@subsection xmlistfunc
@findex xmlistfunc

@code{xmlistfunc, @var{widget}}

@code{[@ref{motif} package]} Loads the given list @code{@var{widget}} with all
internal function names.

@c ----------------------------
@node xmlistselect, xmlistsubr, xmlistfunc, Internal Routines
@subsection xmlistselect
@findex xmlistselect

@code{xmlistselect, @var{widget}, @var{position} [, @var{callback_flag}]}

@code{[@ref{motif} package]} Selects or unselects the indicated @code{@var{position}}
in the list @code{@var{widget}}.  If @code{@var{callback_flag}} is equal
to 0, then the position is made unselected (i.e., no longer in reverse
video), and the callback is not executed.  If @code{@var{callback_flag}}
is positive, then the selected item is displayed in reverse video and
the associated callback is executed.  The selected item's index in the
list is then returned in @code{$LIST_item_position} (starting counting
at 1), and the selected item's value is returned in @code{$LIST_item}.

@c ----------------------------
@node xmlistsubr, xmmenubar, xmlistselect, Internal Routines
@subsection xmlistsubr
@findex xmlistsubr

@code{xmlistsubr, @var{widget}}

@code{[@ref{motif} package]} Loads the list @code{@var{widget}} with all internal
subroutine names.

@c -------------------------------------
@node xmmenubar, xmmessage, xmlistsubr, Internal Routines
@subsection xmmenubar
@findex xmmenubar

@code{xmmenubar(@var{parent}, @var{font}, @var{color}, @var{label1}
[,...])} 

@code{[@ref{motif} package]} Creates a menu bar widget in the parent widget with
widget ID @code{@var{parent}}, using the indicated @code{@var{font}} and
@code{@var{color}} (or defaults if empty strings or scalars are
specified).  A menu bar consists of a number of cascade buttons.  When
you select one of the cascade buttons, then the associated pull-down
menu (if any) appears.  The cascade button labels (@code{string}s)
follow after @code{@var{color}}.

An array of widget IDs is returned; The first one is the menu bar widget
id, and the following ones are cascade button IDs for use in attaching
pull-down menus to the buttons.

See also: @ref{xmattach}, @ref{xmpulldownmenu}

@c ----------------------------
@node xmmessage, xmoptionmenu, xmmenubar, Internal Routines
@subsection xmmessage
@findex xmmessage

@code{xmmessage, @var{string} [, @var{font}, @var{color}, @var{ix},
@var{iy}]}

@code{[@ref{motif} package]} Creates a message widget.  The first three arguments are
strings, and the last two are scalars.  The widget has @code{Alert!} as
its title and contains the @code{@var{string}} and a button labeled
@code{ok}.  The contents are displayed in the indicated
@code{@var{font}} and @code{@var{color}}.  The widget is displayed at
the position indicated by scalars @code{@var{ix}} and @code{@var{iy}},
measured in pixels relative to the upper right-hand corner of the root
window.  When the user click on the @code{ok} button, then the widget
disappears.

The widget only shows up when @code{xtloop} is running.

See also: @ref{xtloop}, @ref{xmprompt}

@c -------------------------------------
@node xmoptionmenu, xmpixmapbutton, xmmessage, Internal Routines
@subsection xmoptionmenu
@findex xmoptionmenu

@code{xmoptionmenu(@var{parent}, @var{callback}, @var{font},
@var{color}, @var{title}, @var{label1} [,...] [, @var{default}])}

@code{[@ref{motif} package]} Creates a simple option menu widget, with the indicated
@code{@var{title}} and labels on the buttons.  If the last argument is
an integer, then it indicates the default button.

@c -------------------------------------
@node xmpixmapbutton, xmpixmapoptionmenu, xmoptionmenu, Internal Routines
@subsection xmpixmapbutton
@findex xmpixmapbutton

@code{xmpixmapbutton(@var{parent}, @var{pixmap_file}, @var{callback})}

@code{[@ref{motif} package]} Creates a button widget and returns the widget id.

@c -------------------------------------
@node xmpixmapoptionmenu, xmposition, xmpixmapbutton, Internal Routines
@subsection xmpixmapoptionmenu
@findex xmpixmapoptionmenu

@code{xmpixmapoptionmenu(@var{parent}, @var{callback}, @var{font},
@var{color}, @var{title}, @var{pixmapfile1} [,...] [, @var{default}])}

@code{[@ref{motif} package]} Creates an option menu widget that uses pixmaps for the
button labels.  The option menu widget is created inside the widget with
id @code{@var{parent}}.  The option menu's title is @code{@var{title}},
which is displayed in the indicated @code{@var{font}} and
@code{@var{color}} (or defaults, if the arguments are not strings, or
are null strings).  @code{@var{callback}} must be a string containing a
statement to be executed when any one of the options is selected.  The
file names of the pixmaps for all buttons are contained in
@code{@var{pixmapfile1}} and further arguments -- except that if the
last argument is a @code{scalar}, then it indicates which one of the
options is the default one (starting at zero).  If the last argument is
not a scalar, then the first option is the default one.

The function returns an array of integers.  The buttons are stored in a
column/row widget, whose widget ID is returned at index 0.  The widget
IDs of the buttons are returned starting at index 1.  The widget IDs for
the option label and for the "current selection (a cascade button)"
follow at the end.

The @code{@var{callback}} statement can inspect global variable
@code{$OPTION_value} to find out which one of the buttons was selected.

@c ----------------------------
@node xmposition, xmprompt, xmpixmapoptionmenu, Internal Routines
@subsection xmposition
@findex xmposition

@code{xmposition, @var{widget}, @var{x}, @var{y} [, @var{sx}, @var{sy}]}

@code{[@ref{motif} package]} Sets the position (@code{@var{x}, @var{y}}), in pixels
from the top left corner of the parent widget (for child widgets) or
root window (for top level widgets) and (optionally) the dimensions
(@code{@var{sx}, @var{sy}}, in pixels) of the @code{@var{widget}}.  The
position coordinates are only modified if the specified values are
nonnegative, and have effect only on widgets contained in a visible
bulletin board widget, or on top-level widgets.

@c ----------------------------
@node xmprompt, xmpulldownmenu, xmposition, Internal Routines
@subsection xmprompt
@findex xmprompt

@code{xmprompt, @var{string}, @var{default}, @var{call_back} [,
@var{modal_flag}, @var{font}, @var{color}, @var{ix}, @var{iy}]}

@code{[@ref{motif} package]} Creates a prompt widget with title @code{prompt_popup}
which contains: the @code{@var{string}}, a text field containing the
@code{@var{default}} text, an @code{ok} button, and a @code{Cancel}
button.  The widget is displayed in the specified @code{@var{font}} and
@code{@var{color}} (both strings), at the position indicated by
@code{@var{ix}} and @code{@var{iy}} (measured in pixels relative to the
upper left-hand corner of the root window).

The user can modify the text in the text field.  When the user presses
the @code{ok} or @code{cancel} buttons, then the contents of the text
field are returned in the global variable @code{$TEXTFIELD_value}, the
@code{@var{callback}} string is executed, and the widget is removed.

See also: @ref{xmmessage}

@c -------------------------------------
@node xmpulldownmenu, xmquery, xmprompt, Internal Routines
@subsection xmpulldownmenu
@findex xmpulldownmenu

@code{xmpulldownmenu(@var{parent}, @var{cascade}, @var{callback},
@var{font}, @var{color}, @var{item1} [,...])}

@code{[@ref{motif} package]} Creates a pull-down menu widget.  @code{@var{parent}}
must be the widget ID of a menu bar widget, and @code{@var{cascade}} the
widget ID of one of the cascade buttons in the menu bar widget.  The
code to be executed when any one of the pull-down menu entries is
selected is contained in @code{@var{callback}} (a string).  The
pull-down menu entry labels are contained in @code{@var{item1}} and
further arguments.  These labels are displayed in the indicated
@code{@var{font}} and @code{@var{color}} (or defaults, if these
arguments are not strings or are null strings).

The callback string is the same for all menu entries; the callback
statement can look up the index of the selected menu item in global
variable @code{$OPTION_value}.

See also: @ref{xmmenubar}

@c ----------------------------
@node xmquery, xmradiobox, xmpulldownmenu, Internal Routines
@subsection xmquery
@findex xmquery

@code{xmquery, @var{widget}}

@code{[@ref{motif} package]} Gets the pointer location in this widget and for the root
window.

@c -------------------------------------
@node xmradiobox, xmraise, xmquery, Internal Routines
@subsection xmradiobox
@findex xmradiobox

@code{xmradiobox(@var{parent}, @var{callback}, @var{font}, @var{color},
@var{label1} [,...] [, @code{@var{columns}}])}

@code{[@ref{motif} package]} Creates a radio box widget with radio buttons and returns
the IDs of the radio box widget and the radio buttons.  Each radio
button is displayed as a small diamond button with a label after it.
The diamond button looks either depressed (selected), or not depressed
(not selected).  Only one of the radio buttons in the widget can be
selected at any one time, and its diamond button is the only one that
looks depressed.

The radio box widget is placed inside the indicated @code{@var{parent}}
widget.  The radio button labels are indicated by the string argument
@code{label1} and following arguments.  If the last argument is a
scalar, then it indicates the number of columns in which the radio
buttons are to be placed.  The @code{@var{font}} applies to the radio
button labels, and the @code{@var{color}} to just the radio buttons.
The @code{@var{callback}} is a string that gets executed when one of the
radio buttons is selected.  The index of the selected button (with
counting starting at 0) can be found in global variable
@code{$RADIO_button} and the state of the selected button (always 1) in
@code{$RADIO_state}.  These global variables are also used by other
widgets.

The function returns an array of integers.  The first number is the
widget ID of the column/row widget that contains the radio buttons.  The
remaining numbers are the IDs of the individual radio buttons.

@c ----------------------------
@node xmraise, xmresizepolicy, xmradiobox, Internal Routines
@subsection xmraise
@findex xmraise

@code{xmraise, @var{widget}}

@code{[@ref{motif} package]} Raises the @code{@var{widget}}.

@c ----------------------------
@node xmresizepolicy, xmrows, xmraise, Internal Routines
@subsection xmresizepolicy
@findex xmresizepolicy

@code{xmresizepolicy, @var{widget}, @var{flag}}

@code{[@ref{motif} package]} Sets the resize policy on the @code{@var{widget}},
according to the value of @code{@var{flag}}: @code{0} means none,
@code{1} means grow only, @code{2} means any.

@c -------------------------------------
@node xmrows, xmscalegetvalue, xmresizepolicy, Internal Routines
@subsection xmrows
@findex xmrows

@code{xmrows(@var{parent}, @var{width}, @var{height} [, @var{nrows},
@var{pack_flag}])}

@code{[@ref{motif} package]} Returns the ID of the created widget.

@c -------------------------------------
@node xmscalegetvalue, xmscaleresetlimits, xmrows, Internal Routines
@subsection xmscalegetvalue
@findex xmscalegetvalue

@code{xmscalegetvalue(@var{widget})}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmscaleresetlimits, xmscalesetvalue, xmscalegetvalue, Internal Routines
@subsection xmscaleresetlimits
@findex xmscaleresetlimits

@code{xmscaleresetlimits, @var{widget}, @var{min}, @var{max} [,
@var{dshift}]} 

@code{[@ref{motif} package]}

@c ----------------------------
@node xmscalesetvalue, xmscrollbarsetvalues, xmscaleresetlimits, Internal Routines
@subsection xmscalesetvalue
@findex xmscalesetvalue

@code{xmscalesetvalue, @var{widget}, @var{value}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmscrollbarsetvalues, xmscrolledwindow, xmscalesetvalue, Internal Routines
@subsection xmscrollbarsetvalues
@findex xmscrollbarsetvalues

@code{xmscrollbarsetvalues, @var{widget} [, @var{value}, @var{max},
@var{slidersize}, @var{dpage}]}

@code{[@ref{motif} package]} Changes the slider size and range (and dpage).  If a
value is non-positive, then we assume it is not supposed to be changed.

@c -------------------------------------
@node xmscrolledwindow, xmscrolledwindowapp, xmscrollbarsetvalues, Internal Routines
@subsection xmscrolledwindow
@findex xmscrolledwindow

@code{xmscrolledwindow(@var{parent}, @var{width}, @var{height})}

@code{[@ref{motif} package]} Create a scrolled window widget and return its id.

@c -------------------------------------
@node xmscrolledwindowapp, xmselectcolor, xmscrolledwindow, Internal Routines
@subsection xmscrolledwindowapp
@findex xmscrolledwindowapp

@code{xmscrolledwindowapp( @var{parent} [, @var{h_margin},
@var{v_margin}, @var{space}])}

@code{[@ref{motif} package]} Creates a scrolled window that is controlled by the
application, in the widget whose ID is @code{@var{parent}}.  Returns the
widget id.

@c ----------------------------
@node xmselectcolor, xmsensitive, xmscrolledwindowapp, Internal Routines
@subsection xmselectcolor
@findex xmselectcolor

@code{xmselectcolor, @var{widgetID}, @var{color}}

@code{[@ref{motif} package]} Selects the indicated @code{@var{color}} (a string) for
the widget with the indicated @code{@var{widgetID}}.

@c ----------------------------
@node xmsensitive, xmseparator, xmselectcolor, Internal Routines
@subsection xmsensitive
@findex xmsensitive

@code{xmsensitive, @var{widget}, @var{mode}}

@code{[@ref{motif} package]} Use to make labels or buttons sensitive or insensitive.

@c ----------------------------
@node xmseparator, xmsetcolors, xmsensitive, Internal Routines
@subsection xmseparator
@findex xmseparator

@code{xmseparator( @var{parent} [, @var{orientation}, @var{margin},
@var{type}])} 

@code{[@ref{motif} package]} @code{@var{orientation}} = @code{0} for horizontal, else
vertical.  @code{@var{margin}} is the width or height.
@code{@var{type}} is @code{1} for a simple line, @code{0} for empty
space, @code{2} for a double line, @code{3} for a dotted line, @code{5}
for an etched line.  Returns the created widget's id.

@c ----------------------------
@node xmsetcolors, xmsetdirectory, xmseparator, Internal Routines
@subsection xmsetcolors
@findex xmsetcolors

@code{xmsetcolors, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the background color for the @code{@var{widget}} to
@var{color}, and an appropriate set of the other colors.

@c ----------------------------
@node xmsetdirectory, xmsetlabel, xmsetcolors, Internal Routines
@subsection xmsetdirectory
@findex xmsetdirectory

@code{xmsetdirectory, @var{widget}, @var{directory_path}}

@code{[@ref{motif} package]} Can only be used for file selection widgets.

@c ----------------------------
@node xmsetlabel, xmsetmargins, xmsetdirectory, Internal Routines
@subsection xmsetlabel
@findex xmsetlabel

@code{xmsetlabel, @var{widget}, @var{string}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmsetmargins, xmsetmnemonic, xmsetlabel, Internal Routines
@subsection xmsetmargins
@findex xmsetmargins

@code{xmsetmargins, @var{widget}, @var{xm}, @var{ym}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmsetmnemonic, xmsetmodal, xmsetmargins, Internal Routines
@subsection xmsetmnemonic
@findex xmsetmnemonic

@code{xmsetmnemonic, @var{widgetID}, @var{string}}

@code{[@ref{motif} package]} Sets a short-hand keystroke for the widget with the
indicated @code{@var{widgetID}}.  The first character of the
@code{@var{string}} is taken for the short-hand keystroke.  If the
widget is a menu bar item and if the short-hand keystroke appears in the
menu bar item title, then then the short-hand character is underlined in
the menu bar item title.

See also: @ref{xmmenubar}

@c ----------------------------
@node xmsetmodal, xmsetoptionselection, xmsetmnemonic, Internal Routines
@subsection xmsetmodal
@findex xmsetmodal

@code{xmsetmodal, @var{widget}, @var{modal_flag}}

@code{[@ref{motif} package]} @code{0} sets modeless, @code{1} makes the widget modal.

@c ----------------------------
@node xmsetoptionselection, xmsetpixmap, xmsetmodal, Internal Routines
@subsection xmsetoptionselection
@findex xmsetoptionselection

@code{xmsetoptionselection, @var{row_col_widget}, @var{menu_widget}}

@code{[@ref{motif} package]} @code{@var{row_col_widget}} from an option menu and the
@code{@var{menu_widget}} for the menu item it should be set to.

@c ----------------------------
@node xmsetpixmap, xmsettitle, xmsetoptionselection, Internal Routines
@subsection xmsetpixmap
@findex xmsetpixmap

@code{xmsetpixmap, @var{widget}, @var{pixmap_file}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmsettitle, xmset_text_output, xmsetpixmap, Internal Routines
@subsection xmsettitle
@findex xmsettitle

@code{xmsettitle, @var{widgetID}, @var{title}}

@code{[@ref{motif} package]} Sets the title of the widget with the indicated
@code{@var{widgetID}} to @code{@var{title}} (a @code{string}).

@c ----------------------------
@node xmset_text_output, xmsize, xmsettitle, Internal Routines
@subsection xmset_text_output
@findex xmset_text_output

@code{xmset_text_output, @var{widget}}

@code{[@ref{motif} package]} This takes an already defined widget number in the LUX
environment and assigns it to the text output widget used by wprint.

@c ----------------------------
@node xmsize, xmtext, xmset_text_output, Internal Routines
@subsection xmsize
@findex xmsize

@code{xmsize, @var{widget}, @var{sx}, @var{sy}}

@code{[@ref{motif} package]} Resets the dimensions of the @code{@var{widget}}.

@c -------------------------------------
@node xmtext, xmtextappend, xmsize, Internal Routines
@subsection xmtext
@findex xmtext

@code{xmtext(@var{parent} [, @var{rows}, @var{columns}, @var{font},
@var{color}])}

@code{[@ref{motif} package]} Creates an empty scrollable text widget and returns its
widget id.  Note that the text widget is returned; to position this, you
must use the scrolled text widget which is the parent of the returned
one.

@c ----------------------------
@node xmtextappend, xmtextbox, xmtext, Internal Routines
@subsection xmtextappend
@findex xmtextappend

@code{xmtextappend, @var{widget}, @var{string} [, @var{line_feed}]}

@code{[@ref{motif} package]} Adds the @code{@var{string}} to the text
@code{@var{widget}}.  If @code{@var{line_feed}} is non-zero, then a line
feed is included.

@c -------------------------------------
@node xmtextbox, xmtexterase, xmtextappend, Internal Routines
@subsection xmtextbox
@findex xmtextbox

@code{xmtextbox( @var{parent} [, @var{rows}, @var{cols}, @var{font},
@var{color}])} 

@code{[@ref{motif} package]} Creates an empty text widget, not scrolled, write only,
not editable.  Returns the widget's id.

@c ----------------------------
@node xmtexterase, xmtextfield, xmtextbox, Internal Routines
@subsection xmtexterase
@findex xmtexterase

@code{xmtexterase, @var{widget}}

@code{[@ref{motif} package]} Erases all the text in a text widget.

@c -------------------------------------
@node xmtextfield, xmtextfieldarray, xmtexterase, Internal Routines
@subsection xmtextfield
@findex xmtextfield

@code{xmtextfield( @var{parent}, @var{text}, @var{length},
@var{callback} [, @var{font}, @var{color}, @var{lostfocus_callback},
@var{gotfocus_callback}])}

@code{[@ref{motif} package]} Creates a textfield widget, returns widget id.

@c -------------------------------------
@node xmtextfieldarray, xmtextfieldgetstring, xmtextfield, Internal Routines
@subsection xmtextfieldarray
@findex xmtextfieldarray

@code{xmtextfieldarray(@var{parent}, @var{callback}, @var{font},
@var{color}, @var{nxl}, @var{nxm}, @var{nxt}, @var{ny}, @var{label1}
[,...] [, @var{len}])}

@code{[@ref{motif} package]} @code{@var{nxl}} is the horizontal size of the labels,
@code{@var{nxm}} is the margin, @code{@var{nxt}} is the horizontal text
size.  If the last argument is a scalar, then it indicates the allowed
length of each field; otherwise 10 is used as a default.

@c -------------------------------------
@node xmtextfieldgetstring, xmtextfieldseteditable, xmtextfieldarray, Internal Routines
@subsection xmtextfieldgetstring
@findex xmtextfieldgetstring

@code{xmtextfieldgetstring( @var{widget})}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtextfieldseteditable, xmtextfieldsetmaxlength, xmtextfieldgetstring, Internal Routines
@subsection xmtextfieldseteditable
@findex xmtextfieldseteditable

@code{xmtextfieldseteditable, @var{widget}, @var{value}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtextfieldsetmaxlength, xmtextfieldsetstring, xmtextfieldseteditable, Internal Routines
@subsection xmtextfieldsetmaxlength
@findex xmtextfieldsetmaxlength

@code{xmtextfieldsetmaxlength, @var{widget}, @var{value}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtextfieldsetstring, xmtextfromfile, xmtextfieldsetmaxlength, Internal Routines
@subsection xmtextfieldsetstring
@findex xmtextfieldsetstring

@code{xmtextfieldsetstring, @var{widget}, @var{string} [, @var{cursor}]}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xmtextfromfile, xmtextgetinsertposition, xmtextfieldsetstring, Internal Routines
@subsection xmtextfromfile
@findex xmtextfromfile

@code{xmtextfromfile(@var{parent}, @var{filename} [, @var{rows},
@var{cols}, @var{font}, @var{color}])}

@code{[@ref{motif} package]} Returns the widget id.

@c -------------------------------------
@node xmtextgetinsertposition, xmtextgetlastposition, xmtextfromfile, Internal Routines
@subsection xmtextgetinsertposition
@findex xmtextgetinsertposition

@code{xmtextgetinsertposition(@var{widget})}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xmtextgetlastposition, xmtextgetselection, xmtextgetinsertposition, Internal Routines
@subsection xmtextgetlastposition
@findex xmtextgetlastposition

@code{xmtextgetlastposition( @var{widget})}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xmtextgetselection, xmtextgetstring, xmtextgetlastposition, Internal Routines
@subsection xmtextgetselection
@findex xmtextgetselection

@code{xmtextgetselection(@var{widget} [, @var{left}, @var{right}])}

@code{[@ref{motif} package]} Returns the primary selection as a string, optionally
returns the position.

@c -------------------------------------
@node xmtextgetstring, xmtextreplace, xmtextgetselection, Internal Routines
@subsection xmtextgetstring
@findex xmtextgetstring

@code{xmtextgetstring(@var{widget})}

@code{[@ref{motif} package]} Gets a copy of the text contents as a string.

@c ----------------------------
@node xmtextreplace, xmtextseteditable, xmtextgetstring, Internal Routines
@subsection xmtextreplace
@findex xmtextreplace

@code{xmtextreplace, @var{widget}, @var{i1}, @var{i2} [, @var{s}]}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtextseteditable, xmtextsetposition, xmtextreplace, Internal Routines
@subsection xmtextseteditable
@findex xmtextseteditable

@code{xmtextseteditable, @var{widget}, @var{value}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtextsetposition, xmtextsetrowcolumnsize, xmtextseteditable, Internal Routines
@subsection xmtextsetposition
@findex xmtextsetposition

@code{xmtextsetposition, @var{widget}, @var{position}}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtextsetrowcolumnsize, xmtextsetstring, xmtextsetposition, Internal Routines
@subsection xmtextsetrowcolumnsize
@findex xmtextsetrowcolumnsize

@code{xmtextsetrowcolumnsize, @var{widget}, @var{rows}, @var{columns}}

@code{[@ref{motif} package]} Reset the number of rows and columns for a text image.

@c ----------------------------
@node xmtextsetstring, xmtogglegetstate, xmtextsetrowcolumnsize, Internal Routines
@subsection xmtextsetstring
@findex xmtextsetstring

@code{xmtextsetstring, @var{widget}, @var{value}}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xmtogglegetstate, xmtogglesetstate, xmtextsetstring, Internal Routines
@subsection xmtogglegetstate
@findex xmtogglegetstate

@code{xmtogglegetstate( @var{widget})}

@code{[@ref{motif} package]}

@c ----------------------------
@node xmtogglesetstate, xmtoplevel_board, xmtogglegetstate, Internal Routines
@subsection xmtogglesetstate
@findex xmtogglesetstate

@code{xmtogglesetstate, @var{widgetID}, @var{state} [, @var{notify}]}

@code{[@ref{motif} package]} Sets the state of a toggle button.  @code{@var{widgetID}}
is the widget ID of the toggle button.  @code{@var{state}} is the
desired state; zero and non-zero are distinguished.  @code{@var{notify}}
determines if the callback associated with the toggle button gets
executed.

@c -------------------------------------
@node xmtoplevel_board, xmtoplevel_form, xmtogglesetstate, Internal Routines
@subsection xmtoplevel_board
@findex xmtoplevel_board

@code{xmtoplevel_board(@var{width}, @var{height}, @var{title} [,
@var{h_margin}, @var{v_margin}])}

@code{[@ref{motif} package]} Creates a top level board widget, and returns the
widget's ID (an integer).  The board gets the indicated
@code{@var{width}} and @code{@var{height}} (in pixels), and the widget
gets the indicated @code{@var{title}}.  Use @code{xtpopup} to pop up the
widget, and @code{xtloop} to manage it.

See also: @ref{xtpopup}, @ref{xtloop}

@c -------------------------------------
@node xmtoplevel_form, xmtopshadowcolor, xmtoplevel_board, Internal Routines
@subsection xmtoplevel_form
@findex xmtoplevel_form

@code{xmtoplevel_form(@var{width}, @var{height}, @var{title} [,
@var{h_space}, @var{v_space}, @var{h_margin}, @var{v_margin}])}

@code{[@ref{motif} package]} Creates but does not pop up a top-level form widget, with
the minimum indicated @code{@var{width}} and @code{@var{height}} in
pixels, and the indicated @code{@var{title}}, and (optionally)
horizontal and vertical spacings @code{@var{h_space}} and
@code{@var{v_space}}, and horizontal and vertical margins
@code{@var{h_margin}} and @code{@var{v_margin}}.

The return value is the new widget's id.

Similar to @code{xmdialog_form}, except that @code{xmtoplevel_form}
produces a top-level widget.  Use @code{xmpopup} and @code{xmpopdown} to
display/undisplay this widget.

See also: @ref{xtpopup}, @ref{xtpopdown}

@c ----------------------------
@node xmtopshadowcolor, xmvscale, xmtoplevel_form, Internal Routines
@subsection xmtopshadowcolor
@findex xmtopshadowcolor

@code{xmtopshadowcolor, @var{widget}, @var{color}}

@code{[@ref{motif} package]} Sets the top shadow color for the @code{@var{widget}} to
@code{@var{color}}.

@c -------------------------------------
@node xmvscale, xmvscrollbar, xmtopshadowcolor, Internal Routines
@subsection xmvscale
@findex xmvscale

@code{xmvscale(@var{parent}, @var{min}, @var{max}, @var{dshift},
@var{callback} [, @var{show}, @var{size}, @var{drag}])}

@code{[@ref{motif} package]} Creates a vertical scale widget, returns the widget id.

@c -------------------------------------
@node xmvscrollbar, xopen, xmvscale, Internal Routines
@subsection xmvscrollbar
@findex xmvscrollbar

@code{xmvscrollbar(@var{parent}, @var{max}, @var{slidersize},
@var{dpage}, @var{callback} [, @var{drag}])}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xopen, xor, xmvscrollbar, Internal Routines
@subsection xopen
@findex xopen

@code{xopen [, @var{display}] [, /private_colormap, /default_colormap,
/selectvisual]}

@code{[@ref{x11}]} Sets the display screen that image output will be sent to,
to @code{@var{display}} (a string), and optionally selects either a
private colormap (@code{/private_colormap}) or the default colormap
(@code{/default_colormap}).  If @code{/select_visual} is specified, then
a list of available color treatment methods ("visuals" in x-speak) is
displayed and the user can select one.

See also: @ref{xport}

@c -------------------------------------
@node xor, xplace, xopen, Internal Routines
@subsection xor
@findex xor

@code{@var{x} xor @var{y}}

Logical binary xor operator.  @code{@var{x} xor @var{y}} combines the
bits of integers @code{@var{x}} and @code{@var{y}} such that any bit in
the result is set (i.e., equal to 1) if the corresponding bits of either
@code{@var{x}} or @code{@var{y}} but not both are set.

See also: @ref{and}, @ref{or}

@c -------------------------------------
@node xplace, xport, xor, Internal Routines
@subsection xplace
@findex xplace

@code{xplace [, @var{x}, @var{y}] [, /dev, /dvi, img, /plt, /rim, /rpl]}

@code{[@ref{x11}]} Waits for a key or mouse button press in a LUX window.
Returns the number of the pressed mouse button in @code{!button}, mouse
coordinates in @code{!ix}, @code{!iy} (in @code{dev} coordinates), and
@code{!xf}, @code{!yf} (in the specified coordinate system, which
defaults to @code{dvi} coordinates), and the pressed key in
@code{!keycode}, @code{!keystate}, and @code{!keysym}.

See also: @ref{xport}, @ref{xquery}, @ref{!button}, @ref{!ix},
@ref{!iy}, @ref{!keycode}, @ref{!keystate}, @ref{!keysym}, @ref{!xf},
@ref{!yf}, @ref{Screen Coordinates}

@c -------------------------------------
@node xport, xpurge, xplace, Internal Routines
@subsection xport
@findex xport

@code{xport [, @var{window}, @var{width}, @var{height}, @var{xpos},
@var{ypos}, @var{windowtitle}, @var{icontitle}]}

@code{[@ref{x11}]} Creates or switches to a window.  Number
@code{@var{window}} (default: @code{0}, or taken from @code{!window},
which points at the last accessed one); dimensions @code{@var{width}},
@code{@var{height}}, position @code{@var{xpos}}, @code{@var{ypos}}.  If
@code{@var{windowtitle}} or @code{@var{icontitle}} start with a minus
sign, then no "LUX xx:" string is prepended.  If the window already
exist and no sizes were specified, or the specified sizes are equal to
the window's sizes, then the window is merely selected, not recreated.

Alias: @ref{xwindow}

@c -------------------------------------
@node xpurge, xquery, xport, Internal Routines
@subsection xpurge
@findex xpurge

@code{xpurge}

@code{[@ref{x11}]} Executes all pending x display commands and empties the x
event buffer.

See also: @ref{xflush}

@c -------------------------------------
@node xquery, xregister, xpurge, Internal Routines
@subsection xquery
@findex xquery

@code{xquery [, @code{@var{window}} ]}

@code{xquery([ @var{window} ])}

@code{[@ref{x11}]} Returns the current mouse position and system time: the
mouse position relative to the current window in @code{!ix} and
@code{!iy}, the mouse position relative to the root window in
@code{!root_x} and @code{!root_y}, and the system time in @code{!xtime}.
The function form returns @code{1} if the mouse was in the specified
window, @code{0} otherwise.  @code{@var{window}} defaults to the last
window (@code{!window}).

See also: @ref{xport}, @ref{xplace}, @ref{!ix}, @ref{!iy},
@ref{!root_x}, @ref{!root_y}, @ref{!xtime}, @ref{!window}

@c -------------------------------------
@node xregister, xsetaction, xquery, Internal Routines
@subsection xregister
@findex xregister

@code{xregister [, @var{event_mask}, window=@var{window},
menu=@var{menu}] [, /enterwindow, /leavewindow, /allevents, /allwindows,
/allmenus, /deselect]}

@code{[@ref{x11}]} Register, unregister, or display registered event types for
@code{xloop}.  Without arguments, @code{xregister} displays currently
registered event types.  With a positive argument, the corresponding
event types are registered.  With a negative argument, the corresponding
event types are unregistered.  With a zero argument, all event types are
unregistered.  @code{@var{event_mask}} has bits to set for each event
type and also has bits to select specific event sources.  These items
can also be set through the keywords.

@table @code
@item /keypress
(Bit 0) selects a key press.
@item /buttonpress
(Bit 2) selects a mouse button press.
@item /buttonrelease
(Bit 3) selects the release of a mouse button key.
@item /pointermotion
(Bit 4) selects movement of the mouse pointer.
@item /enterwindow
(Bit 5) selects entering of the mouse pointer into a window or menu.
item.
@item /leavewindow
(Bit 6) selects leaving of a window or menu item by the mouse pointer.
@item /allwindows
(Bit 7) selects all LUX windows for event source.
@item /allmenus
(Bit 8) select all LUX menu items for event source.
@item /deselect
(Bit 9)indicates unregistering rather than registering of event types and
sources.
@item /allevents
selects all event types (bits 0 through 6).
@end table

See also: @ref{xloop}

@c -------------------------------------
@node xsetaction, xtloop, xregister, Internal Routines
@subsection xsetaction
@findex xsetaction

@code{xsetaction [, @var{action}, @var{window}]}

@code{[@ref{x11}]} Sets the copy action associated with the window.
@code{@var{window}} defaults to @code{!window}, @code{@var{action}} to
@code{1}.  Choose what to replace the destination with by selecting
@code{@var{action}} from:

@enumerate 0
@item src
@item src xor dst
@item not(src) xor dst
@item 0
@item 1
@item dst
@item not(dst)
@item src and dst
@item src and not(dst)
@item not(src) and dst
@item src or dst
@item src or not(dst)
@item not(src) or dst
@item not(src) or not(dst)
@item not(src) and not(dst)
@item not(src)
@end enumerate

Note that actions 1 and 2 are reversible.  These are suitable for
display of sprites: objects that change the image but may be removed
without a trace by drawing them again.  i use them for simultaneous
display of multiple pseudo-cursors.

See also: @ref{xtv}, @ref{!window}

@c -------------------------------------
@node xtloop, xtmluxge, xsetaction, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtloop
@findex xtloop

@code{xtloop [, @var{par}]}

@code{[@ref{motif} package]} Manages the Motif widgets.  If
@code{@var{par}} is equal to @code{1}, then the manager runs until the
global variable @code{!motif} becomes equal to @code{0}.  If
@code{@var{par}} is equal to @code{0}, then the manager services any
pending events and then exits.  If @code{@var{par}} is equal to
@code{2}, then pending events are serviced and the screen is updated,
and then the manager exits.

See also: @ref{!motif}

@c -------------------------------------
@node xtmluxge, xtparent, xtloop, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtmluxge
@findex xtmluxge

@code{xtmluxge, @var{widget}}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xtparent, xtpopdown, xtmluxge, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtparent
@findex xtparent

@code{xtparent(@var{widget})}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xtpopdown, xtpopup, xtparent, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtpopdown
@findex xtpopdown

@code{xtpopdown, @var{widget}}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xtpopup, xtunmluxge, xtpopdown, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtpopup
@findex xtpopup

@code{xtpopup, @var{widgetID}}

@code{[@ref{motif} package]} Causes the widget with the indicated
@code{@var{widgetID}} to pop up.  To activate the widget, too, use
@code{xtloop}.

See also: @ref{xtloop}

@c -------------------------------------
@node xtunmluxge, xtv, xtpopup, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtunmluxge
@findex xtunmluxge

@code{xtunmluxge, @var{widget}}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xtv, xtvread, xtunmluxge, Internal Routines
@subsection xtv
@findex xtv

@code{tv, @var{image} [, @var{x}, @var{y}, window=@var{window},
scale=@var{scale}] [, /dev, /dvi, /img, /plt, /rim, /rpl] [, /pdev,
/screen, /postscript, /plotwindow]}

@code{[@ref{x11}]} Displays the @code{@var{image}}.

Alias: @ref{tv}

See also: @ref{xport}
@c -------------------------------------
@node xtvread, xtwindow, xtv, Internal Routines
@subsection xtvread
@findex xtvread

@code{xtvread([ @var{ix}, @var{iy}, @var{nx},
@var{ny}] [, @var{window}] [, /greyscale])}

@code{xtvread,[ @var{ix}, @var{iy}, @var{nx}, @var{ny}] , @var{window}
[, /greyscale])}

@code{[@ref{x11}]} Returns part of window @code{@var{window}},
starting at @code{@var{ix}}, @code{@var{iy}} and of dimensions
@code{@var{nx}}, @code{@var{ny}}.  The window part defaults to the whole
window, @code{@var{window}} to the last selected window
(@code{!window}).  By default, the raw pixel values are returned,
without using color table information.  If the result is displayed using
@code{tvraw}, then the original image appears - if the color table has
not been changed in the meantime.  If keyword @code{/greyscale} is
specified, then the read pixel values are translated into (grey)
intensity values between 0 and 255 which are then returned.

If you read part of a window, then that part must be wholly within the
confines of the screen at the time it is read.  There is no such
limitation on reading from a pixmap (with negative @code{@var{window}}).

Alias: @ref{tvread}

See also: @ref{xport}, @ref{xtv}, @ref{!window}
@c -------------------------------------
@node xtwindow, xwin, xtvread, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xtwindow
@findex xtwindow

@code{xtwindow(@var{par})}

@code{[@ref{motif} package]}

@c -------------------------------------
@node xwin, xwindow, xtwindow, Internal Routines
@subsection xwin
@findex xwin

@code{xwin [, @var{window}, @var{width}, @code{height}, @var{xpos},
@var{ypos}, @var{windowtitle}, @var{icontitle}]}

@code{[@ref{x11}]} Creates or switches to a window.  Number
@code{@var{window}} (default: @code{!window}); dimensions
@code{@var{width}}, @code{@var{height}}, position @code{@var{xpos}},
@code{@var{ypos}}.  If @code{@var{windowtitle}} or
@code{@var{icontitle}} start with a minus sign, then no "LUX xx:" string
is prepended.  If the window already exist and no sizes were specified,
or the specified sizes are equal to the window's sizes, then the window
is merely selected, not recreated.

Alias: @ref{xport}, @ref{xwindow}, @ref{!window}

@c -------------------------------------
@node xwindow, xy06, xwin, Internal Routines
@subsection xwindow
@findex xwindow

@code{xwindow [, @var{window}, @var{width}, @var{height}, @var{xpos},
@var{ypos}, @var{windowtitle}, @var{icontitle}]}

@code{[@ref{x11}]} Creates or switches to a window.  Number
@code{@var{window}} (default: @code{!window}); dimensions
@code{@var{width}}, @code{@var{height}}, position @code{@var{xpos}},
@code{@var{ypos}}.  If @code{@var{windowtitle}} or
@code{@var{icontitle}} start with a minus sign, then no "LUX xx:" string
is prepended.  If the window already exist and no sizes were specified,
or the specified sizes are equal to the window's sizes, then the window
is merely selected, not recreated.

Alias: @ref{xport}, @ref{xwin}, @ref{!window}

@c -------------------------------------
@node xy06, xys00a, xwindow, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xy06
@findex xy06

@code{xy06, @var{jdtt}, @var{x}, @var{y}}

[SOFA] Returns the Celestial Intermediate Pole @code{@var{x}},
@code{@var{y}} coordinates for the given TT Julian Date
@code{@var{jdtt}}, based on IAU 2006 precession and IAU 2000A
nutation.  The output variables have the same dimensions as
@code{@var{jdtt}}.

The @code{@var{x}} and @code{@var{y}} coordinates are those of the
unit vector towards the celestial intermediate pole.  They represent
the combined effects of frame bias, precession, and nutation.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node xys00a, xys00b, xy06, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xys00a
@findex xys00a

@code{xys00a, @var{jdtt}, @var{x}, @var{y}, @var{s}}

[SOFA] Returns the Celestial Intermediate Pole @code{@var{x}},
@code{@var{y}} coordinates and the CIO locator @code{@var{s}} (in
radians) for TT Julian Date @code{@var{jdtt}}, based on the IAU 2000A
precession-nutation model.  The output variables have the same
dimensions as @code{@var{jdtt}}.

The @code{@var{x}} and @code{@var{y}} coordinates are those of the
unit vector towards the celestial intermediate pole.  They represent
the combined effects of frame bias, precession, and nutation.  The CIO
locator positions the Celestial Intermediate Origin on the equator of
the CIP.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node xys00b, xys06a, xys00a, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xys00b
@findex xys00b

@code{xys00b, @var{jdtt}, @var{x}, @var{y}, @var{s}}

[SOFA] Returns the Celestial Intermediate Pole @code{@var{x}},
@code{@var{y}} coordinates and the CIO locator @code{@var{s}} for TT
Julian Date @code{@var{jd}}, based on the IAU 2000B
precession-nutation model.  The output variables have the same
dimensions as @code{@var{jdtt}}.

The @code{@var{x}} and @code{@var{y}} coordinates are those of the
unit vector towards the celestial intermediate pole.  They represent
the combined effects of frame bias, precession, and nutation.  The CIO
locator positions the Celestial Intermediate Origin on the equator of
the CIP.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node xys06a, xymov, xys00b, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection xys06a
@findex xys06a

@code{xys06a, @var{jdtt}, @var{x}, @var{y}, @var{s}}

[SOFA] Returns the Celestial Intermediate Pole @code{@var{x}},
@code{@var{y}} coordinates and the CIO locator @code{@var{s}} for TT
Julian Date @code{@var{jd}}, based on the IAU 2006 precession and IAU
2000A nutation models.  The output variables have the same dimensions
as @code{@var{jdtt}}.

The @code{@var{x}} and @code{@var{y}} coordinates are those of the
unit vector towards the celestial intermediate pole.  They represent
the combined effects of frame bias, precession, and nutation.  The CIO
locator positions the Celestial Intermediate Origin on the equator of
the CIP.

See also: @ref{Astronomical Coordinate Calculations}

@c -------------------------------------
@node xymov, zap, xys06a, Internal Routines
@subsection xymov
@findex xymov

@code{xymov, @var{x}, @var{y} [, @var{mode}] [, /dev, /dvi, /img, /plt,
/rim, /rpl, /boundingbox, /movefirst]}

@code{[@ref{x11}]} Draws a line to coordinates @code{(@var{x},@var{y})} with
plot mode @code{@var{mode}}.  All three arguments may be arrays.
Coordinate system keywords are available.  @code{/noboundingbox}
suppresses bounding box updating.  @code{/movefirst} forces a move
(i.e. not draw) to the first point, and is selected by default.

See also: @ref{!bb_update}, @ref{Screen Coordinates}

@c -------------------------------------
@node zap, zero, xymov, Internal Routines
@subsection zap
@findex zap

@code{zap, @var{var1} [, @var{var2}, @dots{}] [, /pointer]}

Completely removes the listed variables (except for function pointers).
Afterward, it is as if they never existed.  If a (function) pointer is
@code{zap}ped, then the corresponding variable, subroutine, function, or
blockroutine, and all associated variables and executable code, get
zapped.  To zap a (function) pointer itself, add the @code{/pointer} key
to the @code{zap} call.  @code{zap} cannot be used inside a user-defined
subroutine or function.

See also: @ref{delete}, @ref{pointer}

@c -------------------------------------
@node zero, zeroifnotdefined, zap, Internal Routines
@subsection zero
@findex zero

@code{zero, @var{var1} [, @var{var2}, @dots{}]}

@code{zero(@var{var} [, @code{@var{mask}}])}

The subroutine form fills the specified variables with zeroes.  The
function form returns a copy of @code{@var{var}} that is zeroed
wherever @code{@var{mask}} is non-zero, or everywhere if no
@code{@var{mask}} is specified.

The subroutine processes scalars and arrays (both real and complex),
strings, and file maps.  The function processes numerical scalars and
arrays.

@c -------------------------------------
@node zeroifnotdefined, zeronans, zero, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection zeroifnotdefined
@findex zeroifnotdefined

@code{[@ref{motif} package]}

@c -------------------------------------
@node zeronans, zinv, zeroifnotdefined, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection zeronans
@findex zeronans

@code{zeronans, [value=@var{value} ,] @var{arg1} [, @dots{}]}

@code{zeronans([ value=@var{value} ,] @var{arg})}

The subroutine form replaces all @code{NaN}s (Not-a-Number values) in
@code{@var{arg1}} and following arguments with the scalar
@code{@var{value}}, which defaults to zero.  The function form returns a
copy of @code{@var{arg}} with @code{NaN}s replaced.

See also: @ref{isnan}

@c -------------------------------------
@node zinv, zoom, zeronans, Internal Routines
@subsection zinv
@findex zinv

@code{zinv(@var{var})}

Zero-protected inverse: returns @code{1/@var{x}} for all nonzero
elements @code{@var{x}} of numerical @code{@var{var}}, and zero for all
zero elements.

@c -------------------------------------
@node zoom, Square Brackets, zinv, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection zoom
@findex zoom

@code{zoom, @var{data} [, @var{bitmap1}, @var{bitmap2}]}

@code{[@ref{x11}]} a routine for inspecting sets of images.

@code{@var{data}} must contain an array with at least two dimensions.  a
two-dimensional slice through the data is displayed in the center of the
current window (based on the current values of the associated global
variables: see below) and a menu of options is shown.  If @code{bitmap1}
or @code{bitmap2} are specified, then the "three-colors" color table is
loaded (@ref{threecolors}) and corresponding slices through
@code{@var{data}}, @code{@var{bitmap1}}, and @code{@var{bitmap2}} are
displayed as if with @code{tv3}.  Currently, the options are:

@table @asis
@item Magnify
Shows the current magnification factor.  If you click the pointer in
this entry, then you are queried for a new magnification factor.
@item Standard Zoom
Returns to the default situation: magnification factor 1, with the image
center in the center of the window.
@item Zoom In (2) Out
Zooming in or out by a factor of 2.  If you click to the left of the 2
(e.g., on "In"), then you zoom in.  If you click to the right, then you
zoom out.
@item Recenter
If you click on this, then you can select a new position in the image to
become the center of attention.  If the image fills the whole window,
then the selected position will be at the very center.
@item Move
This selection enables moving of the displayed image part by moving the
pointer away from the center of the window in the desired direction.
The futher the pointer is from the center of the image, the further the
image moves in each step.  The image only moves while the pointer is
moved, too.  Clicking the pointer anywhere in the window, or
re-selecting the "Move" entry in the menu aborts the moving.
@item Contrast
By default, contrast is determined for each displayed image separately
such that black corresponds to the lowest value and white to the highest
value.  By selecting "Fix", the values that black and white correspond
to are the extreme values in the current image.  By selecting "Let", the
default behavior is restored.  The used contrast limits are displayed on
the next line: If both values are zero, then default behavior is
active.  After clicking on one of these numbers, you are queried for a
replacement value for that number.
@item Colors
If one or two bitmaps are specified in the call to @code{zoom}, then
this entry governs the color contrast of the bitmaps.  If you enter a
new value, then this value produces a new color table as if it was
specified in a call to @code{threecolors}.
@item Step
Steps through the images.  If you click on the less-than sign (<), then
you move one frame back.  If you click on the double less-than sign
(<<), then you move back by 5 frames.  Likewise, greater-than signs move
you forward.  The end of the frame range is taken to connect to the
beginning.
@item Play
Play the images in a movie.  Every time you click to the right of the x,
the play speed gains one unit of forward speed.  Every time you click to
the left, the play speed gains one unit of backward speed.  The speed is
indicated (up to 3 units) by the number of less-than or greater-than
signs shown (which is one more than the speed, up to 4 signs).  If you
click on the x, then the movie is stopped.
@item Dims
Shows the data dimensions that correspond to the x and y axis,
respectively.  By clicking on the dimensions you can advance them
cyclically to any desired value.  If the two dimensions are unequal,
then the corresponding new image is shown.  If the dimensions are equal,
then they do not indicate an image, and then nothing new is shown except
that the colon (:) after "Dims" is replaced by an asterisk (*).
@item Mouse Position
By default, the coordinates and data value shown are those associated
with the current pointer position in the image.  If you click on this
option, then you can select a fixed position in the image.  The
coordinates and data value at that fixed position are then shown and the
option changes to "Fixed Position".  If you click on this again, then
the default behavior results again.
@item x, y
Shows the current image data coordinates corresponding to the 
pointer position.  If the pointer is outside the image, then the nearest
(in some sense) position inside the image is used instead.
@item Frame
Shows the number of the currently displayed frame.  All dimensions other
than those currently displayed are lumped together to yield a frame
number.
@item Value
Shows the image value corresponding to the current pointer position.
@item Quit
Quits @code{zoom}
@end table

The following global variables are set by this routine: @code{!zoomx}
(the x coordinate -- measured in data units -- of the center of the
displayed image part), @code{!zoomy} (the y coordinate of the center),
and @code{!zoommag} (the magnification factor).  The values of these
variables are used as defaults for the next call to @code{zoom}.

See also: @ref{threecolors}, @ref{tv3}, @ref{!zoomx}, @ref{!zoomy},
@ref{!zoommag}

@c -------------------------------------
@node  Square Brackets, Curly Braces, zoom, Internal Routines
@subsection Square Brackets
@findex Square Brackets

@code{[ @var{x} [, @var{y} @dots{}] ]}

Concatenation of scalars, strings, or arrays (numerical or string).
With a single argument, @code{[]} returns that argument with one more
dimension (equal to 1) appended at the high end.  Scalars get upgraded
to numerical arrays, strings to string arrays.

With more than one argument, with not all of them undefined, and with
the defined ones either all numerical or all of string types, @code{[]}
concatenates the arguments.  The concatenation happens in the last
dimension.  If @code{n} is the greatest number of dimensions in any of
the defined arguments, then all defined arguments must have either
@code{n} or @code{n - 1} dimensions (scalars and strings count as having
zero dimensions), and each of the first @code{n - 1} dimensions must
have the same size in all arguments.  The result will have @code{n}
dimensions.  The first @code{n - 1} dimensions will be the same as those
in all of the defined arguments, and the @code{n}th dimension will be
equal to the sum of the @code{n}th dimensions of all arguments (with
@code{n - 1}-dimensional arguments each adding one and undefined
arguments adding none).

Undefined arguments are ignored (if at least one argument has a value),
so you can construct an array one element at a time in a loop without
needing to seed the array with a dummy element, or needing to replicate
the inside of a loop separately for the first element of the array.  For
example:
@example
 delete,x
 do x = [x, more_elements()] while condition
@end example

Alias: @ref{concat}

See also: @ref{Combining Arrays}

@c --------------------------------------
@node Curly Braces,  , Square Brackets, Internal Routines
@comment  node-name,  next,  previous,  up
@subsection Curly Braces
@findex Curly Braces

@code{@{ @var{x} [, @var{y} @dots{}] @}}

List concatenation function.  Combines the arguments into a list or
compact list.

@c --------------------------------------
@node gnu Free Documentation License, Concept Index, Reference Manual, Top
@comment  node-name,  next,  previous,  up
@chapter gnu Free Documentation License

@display
Copyright @copyright{} 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
@uref{http://fsf.org/}

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
@end display

@enumerate 0
@item
preamble

The purpose of this License is to make a manual, textbook, or other
functional and useful document @dfn{free} in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of ``copyleft'', which means that derivative
works of the document must themselves be free in the same sense.  It
complements the gnu General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.

@item
applicability and definitions

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The ``Document'', below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as ``you''.  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

a ``Modified Version'' of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

a ``Secondary Section'' is a named appendix or a front-matter section
of the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The ``Invariant Sections'' are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The ``Cover Texts'' are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

a ``Transparent'' copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not ``Transparent'' is called ``Opaque''.

Examples of suitable formats for Transparent copies include plain
ascii without markup, Texinfo input format, La@TeX{} input
format, sgml or xml using a publicly available
dtd, and standard-conforming simple html,
PostScript or pdf designed for human modification.  Examples
of transparent image formats include png, xcf and
jpg@.  Opaque formats include proprietary formats that can be
read and edited only by proprietary word processors, sgml or
xml for which the dtd and/or processing tools are
not generally available, and the machine-generated html,
PostScript or pdf produced by some word processors for
output purposes only.

The ``Title Page'' means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, ``Title Page'' means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The ``publisher'' means any person or entity that distributes copies
of the Document to the public.

a section ``Entitled XYZ'' means a named subunit of the Document whose
title either is precisely xyz or contains xyz in parentheses following
text that translates xyz in another language.  (Here xyz stands for a
specific section name mentioned below, such as ``Acknowledgements'',
``Dedications'', ``Endorsements'', or ``History''.)  To ``Preserve the Title''
of such a section when you modify the Document means that it remains a
section ``Entitled XYZ'' according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

@item
verbatim copying

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no other
conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.

@item
copying in quantity

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to give
them a chance to provide you with an updated version of the Document.

@item
modifications

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

@enumerate a
@item
Use in the Title Page (and on the covers, if any) a title distinct
from that of the Document, and from those of previous versions
(which should, if there were any, be listed in the History section
of the Document).  You may use the same title as a previous version
if the original publisher of that version gives permission.

@item
List on the Title Page, as authors, one or more persons or entities
responsible for authorship of the modifications in the Modified
Version, together with at least five of the principal authors of the
Document (all of its principal authors, if it has fewer than five),
unless they release you from this requirement.

@item
State on the Title page the name of the publisher of the
Modified Version, as the publisher.

@item
Preserve all the copyright notices of the Document.

@item
Add an appropriate copyright notice for your modifications
adjacent to the other copyright notices.

@item
Include, immediately after the copyright notices, a license notice
giving the public permission to use the Modified Version under the
terms of this License, in the form shown in the Addendum below.

@item
Preserve in that license notice the full lists of Invariant Sections
and required Cover Texts given in the Document's license notice.

@item
Include an unaltered copy of this License.

@item
Preserve the section Entitled ``History'', Preserve its Title, and add
to it an item stating at least the title, year, new authors, and
publisher of the Modified Version as given on the Title Page.  If
there is no section Entitled ``History'' in the Document, create one
stating the title, year, authors, and publisher of the Document as
given on its Title Page, then add an item describing the Modified
Version as stated in the previous sentence.

@item
Preserve the network location, if any, given in the Document for
public access to a Transparent copy of the Document, and likewise
the network locations given in the Document for previous versions
it was based on.  These may be placed in the ``History'' section.
You may omit a network location for a work that was published at
least four years before the Document itself, or if the original
publisher of the version it refers to gives permission.

@item
For any section Entitled ``Acknowledgements'' or ``Dedications'', Preserve
the Title of the section, and preserve in the section all the
substance and tone of each of the contributor acknowledgements and/or
dedications given therein.

@item
Preserve all the Invariant Sections of the Document,
unaltered in their text and in their titles.  Section numbers
or the equivalent are not considered part of the section titles.

@item
Delete any section Entitled ``Endorsements''.  Such a section
may not be included in the Modified Version.

@item
Do not retitle any existing section to be Entitled ``Endorsements'' or
to conflict in title with any Invariant Section.

@item
Preserve any Warranty Disclaimers.
@end enumerate

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled ``Endorsements'', provided it contains
nothing but endorsements of your Modified Version by various
parties---for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.

@item
combining documents

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled ``History''
in the various original documents, forming one section Entitled
``History''; likewise combine any sections Entitled ``Acknowledgements'',
and any sections Entitled ``Dedications''.  You must delete all
sections Entitled ``Endorsements.''

@item
collections of documents

You may make a collection consisting of the Document and other documents
released under this License, and replace the individual copies of this
License in the various documents with a single copy that is included in
the collection, provided that you follow the rules of this License for
verbatim copying of each of the documents in all other respects.

You may extract a single document from such a collection, and distribute
it individually under this License, provided you insert a copy of this
License into the extracted document, and follow this License in all
other respects regarding verbatim copying of that document.

@item
aggregation with independent works

a compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an ``aggregate'' if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.

@item
translation

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled ``Acknowledgements'',
``Dedications'', or ``History'', the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.

@item
termination

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.

@item
future revisions of this license

The Free Software Foundation may publish new, revised versions
of the gnu Free Documentation License from time to time.  Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.  See
@uref{http://www.gnu.org/copyleft/}.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License ``or any later version'' applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

@item
relicensing

``Massive Multiauthor Collaboration Site'' (or ``mmc Site'') means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  a
public wiki that anybody can edit is an example of such a server.  a
``Massive Multiauthor Collaboration'' (or ``MMC'') contained in the
site means any set of copyrightable works thus published on the mmc
site.

``cc-by-SA'' means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

``Incorporate'' means to publish or republish a Document, in whole or
in part, as part of another Document.

An mmc is ``eligible for relicensing'' if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this mmc, and subsequently incorporated in whole
or in part into the mmc, (1) had no cover texts or invariant sections,
and (2) were thus incorporated prior to November 1, 2008.

The operator of an mmc Site may republish an mmc contained in the site
under cc-by-sa on the same site at any time before August 1, 2009,
provided the mmc is eligible for relicensing.

@end enumerate

@page
@heading addendum: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

@smallexample
@group
  Copyright (c)  @var{year}  @var{your name}.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the gnu Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled ``gnu
  Free Documentation License''.
@end group
@end smallexample

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the ``with@dots{}Texts.''@: line with this:

@smallexample
@group
    with the Invariant Sections being @var{list their titles}, with
    the Front-Cover Texts being @var{list}, and with the Back-Cover Texts
    being @var{list}.
@end group
@end smallexample

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the gnu General Public License,
to permit their use in free software.

@c --------------------------------------
@node Concept Index,  , gnu Free Documentation License, Top
@comment  node-name,  next,  previous,  up
@unnumbered Concept Index

@printindex cp

@c --------------------------------------

@contents
@bye
