# get all sources
file(GLOB SOURCES "*.cc" "*.hh")

# split off the file containing main(), and the file generated by bindings.pl
get_filename_component(MAIN ${CMAKE_CURRENT_SOURCE_DIR}/lux.cc ABSOLUTE)
get_filename_component(
  BINDINGS ${CMAKE_CURRENT_SOURCE_DIR}/thebindings.cc
  ABSOLUTE)
list(REMOVE_ITEM SOURCES "${MAIN}" "${BINDINGS}")

# define a library based on the non-main files
add_library(liblux STATIC
  ${SOURCES}
  ${CMAKE_CURRENT_BINARY_DIR}/luxparser.cc
  ${CMAKE_CURRENT_BINARY_DIR}/thebindings.cc)
target_compile_features(liblux PRIVATE cxx_std_17)

# regenerate the parser if it is outdated
find_package(BISON 3.0)
if (${BISON_FOUND})
  BISON_TARGET(luxbison luxparser.yy ${CMAKE_CURRENT_SOURCE_DIR}/luxparser.cc
    DEFINES_FILE ${CMAKE_CURRENT_SOURCE_DIR}/luxparser.hh)
endif()

# use GNU Scientific Library if available
find_path(GSL_INCLUDE gsl/gsl_types.h)
if (NOT ${GSL_INCLUDE} STREQUAL "GSL_INCLUDE-NOTFOUND")
  message("Found GNU GSL")
  find_library(GSL_LIBRARY gsl)
  find_library(GSLBLAS_LIBRARY gslcblas)
  target_link_libraries(liblux ${GSL_LIBRARY} ${GSLBLAS_LIBRARY})
  target_include_directories(liblux PRIVATE ${GSL_INCLUDE})
endif()

# use IMCCE Calceph if available
find_path(CALCEPH_INCLUDE gsl/gsl_types.h)
if (NOT ${CALCEPH_INCLUDE} STREQUAL "CALCEPH_INCLUDE-NOTFOUND")
  message("Found IMCCE Calceph")
  find_library(CALCEPH_LIBRARY calceph)
  target_link_libraries(liblux ${CALCEPH_LIBRARY})
  target_include_directories(liblux PRIVATE ${CALCEPH_INCLUDE})
endif()

# use IJG JPEG if available
find_path(JPEG_INCLUDE jpeglib.h)
if (NOT ${JPEG_INCLUDE} STREQUAL "JPEG_INCLUDE-NOTFOUND")
  message("Found IJG JPEG")
  find_library(JPEG_LIBRARY jpeg)
  target_link_libraries(liblux ${JPEG_LIBRARY})
  target_include_directories(liblux PRIVATE ${JPEG_INCLUDE})
endif()

# use GNU readline if available
find_path(READLINE_INCLUDE readline/readline.h)
if (NOT ${READLINE_INCLUDE} STREQUAL "READLINE_INCLUDE-NOTFOUND")
  message("Found GNU Readline")
  find_library(READLINE_LIBRARY readline)
  target_link_libraries(liblux ${READLINE_LIBRARY})
  target_include_directories(liblux PRIVATE ${READLINE_INCLUDE})
endif()

# use OpenImageIO if available
find_path(OIIO_INCLUDE OpenImageIO/imageio.h)
if (NOT ${OIIO_INCLUDE} STREQUAL "OIIO_INCLUDE-NOTFOUND")
  message("Found AcademySoftwareFoundation OpenImageIO")
  find_library(OIIO_LIBRARY OpenImageIO)
  find_library(OIIOUTIL_LIBRARY OpenImageIO_Util)
  target_link_libraries(liblux ${OIIO_LIBRARY} ${OIIOUTIL_LIBRARY})
  target_include_directories(liblux PRIVATE ${OIIO_INCLUDE})
endif()

# use IAU SOFA if available
find_path(SOFA_INCLUDE sofa.h)
if (NOT ${SOFA_INCLUDE} STREQUAL "SOFA_INCLUDE-NOTFOUND")
  message("Found IAU SOFA")
  find_library(SOFA_LIBRARY sofa_c)
  target_link_libraries(liblux ${SOFA_LIBRARY})
  target_include_directories(liblux PRIVATE ${SOFA_INCLUDE})
endif()

# create config.hh file to be able to suppress code making use of unavailable
# libraries
configure_file(config.hh.in config.hh)

# make config.hh accessible via #include "config.hh"
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# regenerate the bindings if they're outdated
find_package(Perl 5.28)
if (${PERL_FOUND})
  add_custom_command(OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/thebindings.cc
    COMMAND perl ${CMAKE_CURRENT_SOURCE_DIR}/bindings.pl ${CMAKE_CURRENT_SOURCE_DIR}/thebindings.cc
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/bindings.pl ${SOURCES}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
endif()

# define an executable based on the main file
add_executable(Lux "${MAIN}" ${BISON_luxbison_OUTPUTS})
# create the executable with a lower-case name
set_target_properties(${PROJECT_NAME} PROPERTIES OUTPUT_NAME "lux")

# make the executable depend on the library
target_link_libraries(Lux liblux)
